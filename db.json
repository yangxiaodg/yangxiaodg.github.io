{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/dark.css","path":"css/dark.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","path":"css/indexcover.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/post.css","path":"css/post.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/reward.css","path":"css/reward.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"f3af07fa14a0a9a4119ad2ab7637ecf23568f47a","modified":1665137999412},{"_id":"source/_data/friends.json","hash":"64317415d9a3c31c69e7efaff17ba8775268355f","modified":1665137999412},{"_id":"source/_posts/基于Xcode11创建自定义UIWindow.md","hash":"28c1f5b6f285e595b6512916b053532b488f7e53","modified":1667187365485},{"_id":"source/_posts/记录学习设计模式-01-简单工厂和工厂方法.md","hash":"cc1805a028a3084a1e86557ba398f0df7f2aef02","modified":1667187365485},{"_id":"source/categories/index.md","hash":"57974cb8107db54818077da09cd4851bfdac9716","modified":1665137999417},{"_id":"source/contact/index.md","hash":"543e39afa39588a1c4cec1a9060dcf19fb8f2c2d","modified":1665137999417},{"_id":"source/friends/index.md","hash":"6e1710744cd6ee34cd876af8b9a51b32e8677df8","modified":1665137999418},{"_id":"source/about/index.md","hash":"27716ad12695774908760b4b4efa667654c1f754","modified":1665137999417},{"_id":"source/tags/index.md","hash":"5ad11165bda96d8d1bbc3641c7cf4402894f8fa0","modified":1665137999418},{"_id":"source/_posts/基于Xcode11创建自定义UIWindow/16277872853169.png","hash":"9d4bf9cf8097ba301e9c7e60ef5a382e5ff68b35","modified":1665137999416},{"_id":"source/_posts/基于Xcode11创建自定义UIWindow/16277873129770.png","hash":"e9f5c3d9a0c3043678d798111c954c1f42836662","modified":1665137999417},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1665140264654},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1665140264654},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1665140264655},{"_id":"themes/hexo-theme-matery/README.md","hash":"d64f79581eaf7b2ce8205209de8b01311db41832","modified":1665140264655},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"45d95b12690fdf4aabe5c471ef9f84109bdaf7bd","modified":1665140264655},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"0975f70c6d93d98f03f8df98f26d5f1cf9260f20","modified":1665140264655},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1665140264656},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1665140264656},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1665140264656},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1665140264656},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1665140264656},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1665140264667},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1665140264667},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1665140264668},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1665140264668},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1665140264669},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1665140264669},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1665140264670},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1665140264671},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1665140264671},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1665140264672},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"f5d76dea8673199693fb0c4e0955853112538a04","modified":1665140264672},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1665140264673},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1665140264673},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1665140264673},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1665140264674},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1665140264674},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1665140264686},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1665140264656},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"12350c0d366141b5c27792bb414d4adc303b0a9f","modified":1665140264656},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1665140264656},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"4765267aafe2871a2fdaeccd1598890219bd7d71","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"086a06863a0f88888707409936aa06a09ff50e3a","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1665140264658},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1665140264658},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"7c87e0eb2cf662c2a9b9b0e1e5d228b0fac2622e","modified":1665140264658},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1665140264658},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1665140264658},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f5c00f21af281a09dc7de89e82a3b442903451a7","modified":1665140264658},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1665140264659},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"e8b44268b59add61af44b7338527523d10d9d742","modified":1665140264659},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1665140264659},{"_id":"themes/hexo-theme-matery/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1665140264659},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1665140264659},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"0953217f4e19a51dfc5a0ffc7d066406df18060b","modified":1665140264659},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1665140264660},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1665140264660},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"70fccaea75ce48364222c4e5de0496e556b01cb1","modified":1665140264660},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"6261f8191c3c1159f63ec7f9293bb93f7d2a3dbb","modified":1665140264660},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1665140264661},{"_id":"themes/hexo-theme-matery/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1665140264661},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1665140264661},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1665140264661},{"_id":"themes/hexo-theme-matery/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1665140264662},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"236668e72b01db91f5bf29eec4c79e34e2746d98","modified":1665140264662},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1665140264662},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1665140264662},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1665140264662},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1665140264663},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"2ac48566bb806336f1e5bc5c66fc816a580d63c3","modified":1665140264663},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1665140264663},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1665140264664},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1665140264664},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1665140264664},{"_id":"themes/hexo-theme-matery/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1665140264664},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1665140264664},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1665140264665},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1665140264665},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1665140264665},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1665140264665},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1665140264665},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1665140264665},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1665140264666},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1665140264666},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1665140264666},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1665140264666},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1665140264667},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"ab02fb2da648f4f7afa0c2381aaca334bdeb54e6","modified":1665140264675},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1665140264675},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"84b0122b92342834540f69b19600cb54c50ab69e","modified":1665140264675},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1665140264676},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1665140264677},{"_id":"themes/hexo-theme-matery/source/css/dark.css","hash":"0dcd292d10f27f11c18d1a1a461b7e0cfe6c55cf","modified":1665140264677},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1665140264677},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1665140264678},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","hash":"e4a478c91cd6750a9f18b65b914ff0b316fb08b3","modified":1665140264678},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1665140264679},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1665140264679},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1665140264680},{"_id":"themes/hexo-theme-matery/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1665140264680},{"_id":"themes/hexo-theme-matery/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1665140264681},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1665140264688},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1665140264689},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1665140264691},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1665140264693},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1665140264807},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1665140264817},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1665140264838},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1665140264846},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1665140264698},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1665140264698},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1665140264698},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1665140264699},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1665140264705},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1665140264706},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1665140264720},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1665140264721},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1665140264721},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1665140264721},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1665140264722},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1665140264722},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1665140264722},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1665140264723},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1665140264723},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1665140264724},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1665140264732},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1665140264732},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1665140264739},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1665140264740},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1665140264740},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1665140264741},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1665140264743},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1665140264743},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1665140264751},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1665140264774},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1665140264783},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1665140264783},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1665140264784},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1665140264784},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1665140264785},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1665140264785},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1665140264785},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1665140264786},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1665140264786},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1665140264786},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1665140264787},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1665140264791},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1665140264796},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1665140264796},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1665140264800},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1665140264802},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1665140264816},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1665140264816},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1665140264816},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1665140264817},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1665140264822},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1665140264824},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1665140264825},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1665140264826},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1665140264829},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1665140264831},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1665140264831},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1665140264832},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1665140264833},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1665140264834},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1665140264835},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1665140264836},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1665140264847},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1665140264847},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1665140264713},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1665140264713},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1665140264720},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1665140264720},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1665140264745},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1665140264745},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1665140264746},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1665140264746},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1665140264747},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1665140264747},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1665140264748},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1665140264748},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1665140264792},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1665140264749},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1665140264793},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1665140264793},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1665140264793},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1665140264794},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1665140264795},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1665140264795},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1665140264731},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1665140264739},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1665140264742},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1665140264809},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1665140264811},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1665140264812},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1665140264820},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1665140264821},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1665140264823},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1665140264823},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1665140264824},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1665140264827},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1665140264827},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1665140264828},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1665140264830},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1665140264833},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1665140264835},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1665140264837},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1665140264708},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1665140264711},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1665140264817},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1665140264725},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1665140264752},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1665140264754},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1665140264803},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1665140264807},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1665140264809},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1665140264814},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1665140264815},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1665140264841},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1665140264707},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1665140264710},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1665140264719},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1665140264688},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1665140264805},{"_id":"source/_posts/基于Xcode11创建自定义UIWindow/16277872068447.png","hash":"4dd634e01851446ff1adc6424b39ba5233ac0064","modified":1665137999416},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1665140264813},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1665140264845},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1665140264717},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1665140264799},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1665140264791},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1665140264840},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1665140264730},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1665140264736},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1665140264782},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1665140264773},{"_id":"public/search.xml","hash":"aa490567b8e6d4e3667953c9e7dcb87bd725d1e1","modified":1667539119757},{"_id":"public/404/index.html","hash":"3a219fa46d8ad9d6dfef151345902fe46ce8193a","modified":1667526452507},{"_id":"public/categories/index.html","hash":"03f325648caecd389996ca8fc8c96acc8f29d712","modified":1667538843535},{"_id":"public/contact/index.html","hash":"40336fee977cab4c436b2fe62fc384fee9208675","modified":1667526452507},{"_id":"public/friends/index.html","hash":"0a6027da0a6ec6f20d04361a22713e3b0ea5a911","modified":1667526452507},{"_id":"public/about/index.html","hash":"287e99212e734cfff814e80e623b5c7cbea11bf7","modified":1667539119757},{"_id":"public/tags/index.html","hash":"f0f86db33234645feec65aa124fdc4b8279b9f54","modified":1667539119757},{"_id":"public/2022/10/07/ji-lu-xue-xi-she-ji-mo-shi-01-jian-dan-gong-han-he-gong-han-fang-fa/index.html","hash":"4d65deb94778e66be671f9fe397e64433795af87","modified":1667187398166},{"_id":"public/2021/10/21/ji-yu-xcode11-chuang-jian-zi-ding-yi-uiwindow/index.html","hash":"b939887be60ebe5e2575572075c2cbc16037a4c3","modified":1667187398166},{"_id":"public/archives/index.html","hash":"5eefd512c75e106bb71cb5251005d95f0c76a143","modified":1667539162647},{"_id":"public/archives/2021/index.html","hash":"2e21b8fd3dc1f71a955ae49d763fa1c1c697ebd4","modified":1667187398166},{"_id":"public/archives/2021/10/index.html","hash":"e3389336d2363e92b2e05cd192dcfbe823ae71fa","modified":1667187398166},{"_id":"public/archives/2022/index.html","hash":"51c7d958055e7b973069903b260d8fd94fc9852a","modified":1667539162647},{"_id":"public/archives/2022/10/index.html","hash":"c98465f93b4fd06d944131bd88b40fac8e5a6d4d","modified":1667187398166},{"_id":"public/categories/ios/index.html","hash":"6bf28906216c75119453aa6d37ae6d16c95a4c78","modified":1667187398166},{"_id":"public/categories/java/index.html","hash":"6f3a79e6818f5d312e218bfd3038bf9d1245a1ae","modified":1667539119757},{"_id":"public/index.html","hash":"fceeabb4a91dc9d6808be02eda7fd83fc488d4db","modified":1667539162647},{"_id":"public/tags/ios/index.html","hash":"2ef3a671eaa481614ae4a477c1a6b3c6f169e492","modified":1667187398166},{"_id":"public/tags/objective-c/index.html","hash":"2e71731feaaf65ef656177dcaaeee03b2feceff5","modified":1667187398166},{"_id":"public/tags/设计模式/index.html","hash":"6bac33d01fd3d2790850b64d3bd661c061e58695","modified":1667187398166},{"_id":"public/tags/思考方式/index.html","hash":"11c9f5528fdbdfd70469200c54344b4b2c44d111","modified":1667187398166},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1667187398166},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1667187398166},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1667187398166},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1667187398166},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1667187398166},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1667187398166},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1667187398166},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1667187398166},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1667187398166},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1667187398166},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1667187398166},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1667187398166},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1667187398166},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1667187398166},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1667187398166},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1667187398166},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1667187398166},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1667187398166},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1667187398166},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1667187398166},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1667187398166},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1667187398166},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1667187398166},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1667187398166},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1667187398166},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1667187398166},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1667187398166},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1667187398166},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1667187398166},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1667187398166},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1667187398166},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1667187398166},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1667187398166},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1667187398166},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1667187398166},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1667187398166},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1667187398166},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1667187398166},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1667187398166},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1667187398166},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1667187398166},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1667187398166},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1667187398166},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1667187398166},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1667187398166},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1667187398166},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1667187398166},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1667187398166},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1667187398166},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1667187398166},{"_id":"public/2021/10/21/ji-yu-xcode11-chuang-jian-zi-ding-yi-uiwindow/16277872853169.png","hash":"9d4bf9cf8097ba301e9c7e60ef5a382e5ff68b35","modified":1667187398166},{"_id":"public/2021/10/21/ji-yu-xcode11-chuang-jian-zi-ding-yi-uiwindow/16277873129770.png","hash":"e9f5c3d9a0c3043678d798111c954c1f42836662","modified":1667187398166},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1667187398166},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1667187398166},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1667187398166},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1667187398166},{"_id":"public/css/indexcover.css","hash":"4dea2c489452c3efe70fa91a6a7678da64d895da","modified":1667187398166},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1667187398166},{"_id":"public/css/post.css","hash":"d38c71eddb8af1752c48eb48595fbaf89450ff40","modified":1667187398166},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1667187398166},{"_id":"public/css/reward.css","hash":"98b32aabeb908727844af04c31f08da6cab08335","modified":1667187398166},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1667187398166},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1667187398166},{"_id":"public/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1667187398166},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1667187398166},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1667187398166},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1667187398166},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1667187398166},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1667187398166},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1667187398166},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1667187398166},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1667187398166},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1667187398166},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1667187398166},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1667187398166},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1667187398166},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1667187398166},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1667187398166},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1667187398166},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1667187398166},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1667187398166},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1667187398166},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1667187398166},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1667187398166},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1667187398166},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1667187398166},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1667187398166},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1667187398166},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1667187398166},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1667187398166},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1667187398166},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1667187398166},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1667187398166},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1667187398166},{"_id":"public/css/dark.css","hash":"0dcd292d10f27f11c18d1a1a461b7e0cfe6c55cf","modified":1667187398166},{"_id":"public/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1667187398166},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1667187398166},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1667187398166},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1667187398166},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1667187398166},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1667187398166},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1667187398166},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1667187398166},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1667187398166},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1667187398166},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1667187398166},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1667187398166},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1667187398166},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1667187398166},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1667187398166},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1667187398166},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1667187398166},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1667187398166},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1667187398166},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1667187398166},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1667187398166},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1667187398166},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1667187398166},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1667187398166},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1667187398166},{"_id":"public/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1667187398166},{"_id":"public/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1667187398166},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1667187398166},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1667187398166},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1667187398166},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1667187398166},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1667187398166},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1667187398166},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1667187398166},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1667187398166},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1667187398166},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1667187398166},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1667187398166},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1667187398166},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1667187398166},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1667187398166},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1667187398166},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1667187398166},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1667187398166},{"_id":"public/2021/10/21/ji-yu-xcode11-chuang-jian-zi-ding-yi-uiwindow/16277872068447.png","hash":"4dd634e01851446ff1adc6424b39ba5233ac0064","modified":1667187398166},{"_id":"source/_posts/java8的stream.md","hash":"5a88fd152272fa08cbdfc9bd5f9d062622ea0396","modified":1667181688846},{"_id":"public/2022/10/26/java8-de-stream/index.html","hash":"5d3338acd953139f8f8ca805ecf8adec3145af01","modified":1667186055924},{"_id":"public/tags/java8/index.html","hash":"b343f89fad75afb9249c48a00a58d7aa44abf662","modified":1667186055924},{"_id":"source/_posts/什么是Web3-0.md","hash":"eed388594ef5c3adb30a3cbe1499915405150d42","modified":1667187222977},{"_id":"public/2022/10/31/shi-me-shi-web3-0/index.html","hash":"1d1ddc4a1588ce1d50e95141953674bb41df8336","modified":1667187176192},{"_id":"public/categories/web3-0/index.html","hash":"53710af2539210a89afff121ba663a3f40e0de3c","modified":1667186055924},{"_id":"public/tags/web/index.html","hash":"1c76ea4f1b5fca17bc231f94c8a021b95de7df3c","modified":1667186055924},{"_id":"source/_posts/什么是Web3-0/1667183789631-dd785c26-0224-4212-a3dc-782fe61d5dc4.jpeg","hash":"e191a24c878f23e2f6b2a7bc33120da6657df144","modified":1667184345575},{"_id":"source/_posts/什么是Web3-0/1667183789718-964dbbfc-1786-4678-867d-e69cea9981f9.jpeg","hash":"602d0af08bc8b8b553ee7f5c06359a8a3af7f00d","modified":1667184345560},{"_id":"source/_posts/什么是Web3-0/1667183789660-e1d372b9-3971-4cce-b0dc-e3ef6133e671.jpeg","hash":"48a54f3a13605f38b14967276f3021106bf012ff","modified":1667184345540},{"_id":"source/_posts/什么是Web3-0/1667183790172-0d0d9de2-891b-4864-b5c4-834c6d950816.jpeg","hash":"2c4504360a5052f9d64f302c36611e34db45d30b","modified":1667184345505},{"_id":"source/_posts/什么是Web3-0/1667183789652-9cba8aef-9ee1-4d8e-a6b4-d421eb87e6f5.jpeg","hash":"1a04b7ea9493f07b4c58ad91642405476c29e2af","modified":1667184345591},{"_id":"source/_posts/什么是Web3-0/1667183790180-a72ab9b6-e223-4aa3-a0dd-475a8c603072.jpeg","hash":"5de623c89da98b6710338c0f26d5ea59b9843d8b","modified":1667184345526},{"_id":"source/_posts/什么是Web3-0/1667183790202-825900a2-6d75-4a59-9d3a-35e031294881.jpeg","hash":"3babacb9ee90f26bb2e7424becbe76a1539d73a8","modified":1667184345512},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789631-dd785c26-0224-4212-a3dc-782fe61d5dc4.jpeg","hash":"e191a24c878f23e2f6b2a7bc33120da6657df144","modified":1667184444213},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789660-e1d372b9-3971-4cce-b0dc-e3ef6133e671.jpeg","hash":"48a54f3a13605f38b14967276f3021106bf012ff","modified":1667184444213},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789718-964dbbfc-1786-4678-867d-e69cea9981f9.jpeg","hash":"602d0af08bc8b8b553ee7f5c06359a8a3af7f00d","modified":1667184444213},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183790172-0d0d9de2-891b-4864-b5c4-834c6d950816.jpeg","hash":"2c4504360a5052f9d64f302c36611e34db45d30b","modified":1667184444213},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789652-9cba8aef-9ee1-4d8e-a6b4-d421eb87e6f5.jpeg","hash":"1a04b7ea9493f07b4c58ad91642405476c29e2af","modified":1667184444213},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183790202-825900a2-6d75-4a59-9d3a-35e031294881.jpeg","hash":"3babacb9ee90f26bb2e7424becbe76a1539d73a8","modified":1667184444213},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183790180-a72ab9b6-e223-4aa3-a0dd-475a8c603072.jpeg","hash":"5de623c89da98b6710338c0f26d5ea59b9843d8b","modified":1667184444213},{"_id":"source/_posts/什么是Web3-0/1667183789631.jpeg","hash":"e191a24c878f23e2f6b2a7bc33120da6657df144","modified":1667184345575},{"_id":"source/_posts/什么是Web3-0/1667183789660.jpeg","hash":"48a54f3a13605f38b14967276f3021106bf012ff","modified":1667184345540},{"_id":"source/_posts/什么是Web3-0/1667183790172.jpeg","hash":"2c4504360a5052f9d64f302c36611e34db45d30b","modified":1667184345505},{"_id":"source/_posts/什么是Web3-0/1667183789718.jpeg","hash":"602d0af08bc8b8b553ee7f5c06359a8a3af7f00d","modified":1667184345560},{"_id":"source/_posts/什么是Web3-0/1667183789652.jpeg","hash":"1a04b7ea9493f07b4c58ad91642405476c29e2af","modified":1667184345591},{"_id":"source/_posts/什么是Web3-0/1667183790180.jpeg","hash":"5de623c89da98b6710338c0f26d5ea59b9843d8b","modified":1667184345526},{"_id":"source/_posts/什么是Web3-0/1667183790202.jpeg","hash":"3babacb9ee90f26bb2e7424becbe76a1539d73a8","modified":1667184345512},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789631.jpeg","hash":"e191a24c878f23e2f6b2a7bc33120da6657df144","modified":1667185710859},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789718.jpeg","hash":"602d0af08bc8b8b553ee7f5c06359a8a3af7f00d","modified":1667185710859},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789660.jpeg","hash":"48a54f3a13605f38b14967276f3021106bf012ff","modified":1667185710859},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183790172.jpeg","hash":"2c4504360a5052f9d64f302c36611e34db45d30b","modified":1667185710859},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789652.jpeg","hash":"1a04b7ea9493f07b4c58ad91642405476c29e2af","modified":1667185710859},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183790180.jpeg","hash":"5de623c89da98b6710338c0f26d5ea59b9843d8b","modified":1667185710859},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183790202.jpeg","hash":"3babacb9ee90f26bb2e7424becbe76a1539d73a8","modified":1667185710859},{"_id":"source/_posts/hellow.md","hash":"e24788d8adee0257ff1b70bb5e08cd035386306c","modified":1667187509683},{"_id":"source/_posts/感受java8后lambda之美.md","hash":"95bed6a6a1dd8104c1b5ac45f207c7779d9857f2","modified":1667527092493},{"_id":"source/_posts/感受java8后lambda之美/image_16155432.png","hash":"82bfdd63567076352313b10286ddcbc46588f6ee","modified":1667526120451},{"_id":"source/_posts/感受java8后lambda之美/image_23fab375.png","hash":"f40bb976e9bfbbdb7b31232c8f5f1a125a4c5d59","modified":1667526120451},{"_id":"source/_posts/感受java8后lambda之美/image_7771b4fe.png","hash":"a0b4ed5df52f34ac41e7e901bbd93d4b45961c75","modified":1667526120452},{"_id":"source/_posts/感受java8后lambda之美/image_79d304da.png","hash":"ab609b189e3da922b22c0a94146eadfc7ec2373d","modified":1667526120453},{"_id":"source/_posts/感受java8后lambda之美/image_9186bf98.png","hash":"7e7c755f3d086836057e551e4b809186a6a85176","modified":1667526120453},{"_id":"source/_posts/感受java8后lambda之美/image_c1ac2536.png","hash":"8721847009c10220ecec669342f626568e3fe497","modified":1667526120454},{"_id":"source/_posts/感受java8后lambda之美/image_eba0197b.png","hash":"126816f760c9a3abae668504b06b2fcdfd3c6d40","modified":1667526120454},{"_id":"source/_posts/感受java8后lambda之美/image_ec9c4260.png","hash":"a12867ca34f35c0cc2208210e8931c8a9ba7d35c","modified":1667526120455},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/index.html","hash":"39f7d4f51a0c81e3195fc3a7dfd5a03d75da8579","modified":1667539162647},{"_id":"public/archives/2022/11/index.html","hash":"4885b29688101402b1159458a7bf9f303090ed60","modified":1667539162647},{"_id":"public/categories/jdk1-8/index.html","hash":"150c18ca5100067a70348ba99f98cb40726d6d6f","modified":1667526452507},{"_id":"public/categories/jdk1-8/lambda/index.html","hash":"cf47cb314f8c1480d8eb71cda4f55a63a6de660b","modified":1667526452507},{"_id":"public/categories/jdk1-8/lambda/函数式编程/index.html","hash":"a17b5b6862096f2879a8d4dfeb9b985534817d42","modified":1667526452507},{"_id":"public/tags/java/index.html","hash":"03f61f6c266d16b75087aa91f4085a438d326835","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_16155432.png","hash":"82bfdd63567076352313b10286ddcbc46588f6ee","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_23fab375.png","hash":"f40bb976e9bfbbdb7b31232c8f5f1a125a4c5d59","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_7771b4fe.png","hash":"a0b4ed5df52f34ac41e7e901bbd93d4b45961c75","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_79d304da.png","hash":"ab609b189e3da922b22c0a94146eadfc7ec2373d","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_9186bf98.png","hash":"7e7c755f3d086836057e551e4b809186a6a85176","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_c1ac2536.png","hash":"8721847009c10220ecec669342f626568e3fe497","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_eba0197b.png","hash":"126816f760c9a3abae668504b06b2fcdfd3c6d40","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_ec9c4260.png","hash":"a12867ca34f35c0cc2208210e8931c8a9ba7d35c","modified":1667526452507},{"_id":"source/_posts/在hexo中无痛使用本地图片.md","hash":"26730abeddddcb0cabef184ccee66705ea654fc2","modified":1667539156978},{"_id":"public/2022/11/04/zai-hexo-zhong-wu-tong-shi-yong-ben-di-tu-pian/index.html","hash":"fea520b640c1da93ed4bd39ba927d7e62dec8a98","modified":1667539162647},{"_id":"public/tags/hexo/index.html","hash":"d9e72c7026313afeae65d89e72d3e075c20914d5","modified":1667539119757},{"_id":"public/categories/hexo/index.html","hash":"5d2bdad32f999f53823f8f1809f2c9036afcc28b","modified":1667539162647},{"_id":"public/tags/jdk1-8/index.html","hash":"68053962c61bff3d17f38cf0f57020b408fd38c4","modified":1667539119757},{"_id":"public/tags/lambda/index.html","hash":"4ebbda3baa23d9f9408d215659c9a4336e0a7bdf","modified":1667539119757},{"_id":"public/tags/函数式编程/index.html","hash":"4348695ec7a6c2b5738cd55483f02667d1ffa4c7","modified":1667539119757},{"_id":"source/_posts/Java8Stream实战系列.md","hash":"8a814a02ae37c825f2ac53a32281aecce7189ba1","modified":1667538837194},{"_id":"public/2022/11/04/java8stream-shi-zhan-xi-lie/index.html","hash":"31d69416572f25feed1c3352da33df9784631b90","modified":1667539162647},{"_id":"public/tags/stream/index.html","hash":"6c1c8ff39ed5aa56ccce7742afc87fcbe3a3f276","modified":1667539119757},{"_id":"public/tags/lambda操作/index.html","hash":"6313157fdd72ae2065b351884f72485b06797fff","modified":1667539119757},{"_id":"source/_posts/45个日常用git合代码的经典操作场景.md","hash":"6a78fcb5fbbb029d3991ea7a251829c5c0b80bac","modified":1667530207298},{"_id":"public/2022/11/04/45-ge-ri-chang-yong-git-he-dai-ma-de-jing-dian-cao-zuo-chang-jing/index.html","hash":"5f3e28e4c814ea2c0a24000e8479ce6af4064166","modified":1667538843535},{"_id":"public/categories/git/index.html","hash":"5ba7079f7c8487c2a2edec14e32bf131b0958cd8","modified":1667538843535},{"_id":"public/tags/git/index.html","hash":"10aad2cdec48fada7d566fd5993686b18931fd28","modified":1667539119757},{"_id":"public/tags/代码合并/index.html","hash":"c3f868f2f2b68e4ed71d6f032f33aea0a2a5197b","modified":1667539119757},{"_id":"source/_posts/Java基础篇的八股文.md","hash":"b19a4e3586cae48ef2e463a774db7782b5e62058","modified":1667539105832},{"_id":"source/_posts/Java并发编程八股文.md","hash":"03781a8508783fa9d7f07d4bac3e8e1e9b2d7cd4","modified":1667539100929},{"_id":"source/_posts/Java虚拟机八股文.md","hash":"c5ba1778c27657d9f456fc1b2086bfbd4de22134","modified":1667539113815},{"_id":"public/2022/11/04/java-bing-fa-bian-cheng-ba-gu-wen/index.html","hash":"49cd869e1c75288070891ce252590e31bd34c9a1","modified":1667539119757},{"_id":"public/2022/11/04/java-ji-chu-pian-de-ba-gu-wen/index.html","hash":"091e426d50c9ebccb89c49678431f001e3531a1a","modified":1667539119757},{"_id":"public/2022/11/04/java-xu-ni-ji-ba-gu-wen/index.html","hash":"09fb7b567bbe0a5da2de9b2b06d1cac79da1360f","modified":1667539119757},{"_id":"public/tags/并发编程/index.html","hash":"9099862a08c1624f2bee1160581b2fa7e8dc4e0e","modified":1667539119757},{"_id":"public/tags/java基础/index.html","hash":"5da84593e4ccf7f84c6d2635ed18a73f8b4cc4c6","modified":1667539119757},{"_id":"public/tags/虚拟机/index.html","hash":"80cb5be3460fb6e5cea4937d05080484c62156f4","modified":1667539119757},{"_id":"public/tags/八股文/index.html","hash":"9646cb61af064943af598ec2aeb9855f98d0aa0f","modified":1667539119757}],"Category":[{"name":"ios","_id":"cl8ye4pnu00043eld4hw29j7v"},{"name":"java","_id":"cl8ye4pnx00093eld9k027sjj"},{"name":"web3.0","_id":"cl9w6c3kl0001yzld94rlcmy9"},{"name":"jdk1.8","_id":"cla1u1fnp00014sld6y8t6vme"},{"name":"lambda","parent":"cla1u1fnp00014sld6y8t6vme","_id":"cla1u1fnr00044sld7vi5a4kd"},{"name":"函数式编程","parent":"cla1u1fnr00044sld7vi5a4kd","_id":"cla1u1fns00054sld3clq8076"},{"name":"hexo","_id":"cla1uku9o0001wwldfw4makkm"},{"name":"git","_id":"cla1wfs1q0001hzld8czpfcpj"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}],"Page":[{"title":"404","date":"2020-05-29T16:00:00.000Z","type":"404","layout":"404","description":"Cannot find the page you want :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2020-05-30 00:00:00\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Cannot find the page you want :(\"\n---","updated":"2022-10-07T10:19:59.412Z","path":"404/index.html","comments":1,"_id":"cl8ye4pnm00003eld0dcx32ji","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2022-10-07T10:19:59.417Z","path":"categories/index.html","comments":1,"_id":"cl8ye4pns00023eld80cgcxyp","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2022-10-07T10:19:59.417Z","path":"contact/index.html","comments":1,"_id":"cl8ye4pnw00063eldc9spavac","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"friends","date":"2018-12-12T13:25:30.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2022-10-07T10:19:59.418Z","path":"friends/index.html","comments":1,"_id":"cl8ye4pnx00073eld4d4gbgx3","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2022-10-07T10:19:59.417Z","path":"about/index.html","comments":1,"_id":"cl8ye4pnx00083eldc1n5dly8","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-10T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-10 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2022-10-07T10:19:59.418Z","path":"tags/index.html","comments":1,"_id":"cl8ye4pnz000b3eld0q3u06j3","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""}],"Post":[{"title":"感受java8后lambda之美","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-04T01:41:09.000Z","password":null,"summary":"java8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。","_content":"\n\n一、引言\n\njava8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。总结就是：使用不可变值与函数，函数对不可变值进行处理，映射成另一个值。\n\n## 二、java重要的函数式接口 \n\n### 1、什么是函数式接口 \n\n函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。\n\n#### 1.1 java8自带的常用函数式接口。 \n\n![image_ec9c4260.png](感受java8后lambda之美/image_ec9c4260.png)\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Predicate<Integer> predicate = x -> x > 185;\n        Student student = new Student(\"9龙\", 23, 175);\n        System.out.println(\n            \"9龙的身高高于185吗？：\" + predicate.test(student.getStature()));\n\n        Consumer<String> consumer = System.out::println;\n        consumer.accept(\"命运由我不由天\");\n\n        Function<Student, String> function = Student::getName;\n        String name = function.apply(student);\n        System.out.println(name);\n\n        Supplier<Integer> supplier = \n            () -> Integer.valueOf(BigDecimal.TEN.toString());\n        System.out.println(supplier.get());\n\n        UnaryOperator<Boolean> unaryOperator = uglily -> !uglily;\n        Boolean apply2 = unaryOperator.apply(true);\n        System.out.println(apply2);\n\n        BinaryOperator<Integer> operator = (x, y) -> x * y;\n        Integer integer = operator.apply(2, 3);\n        System.out.println(integer);\n\n        test(() -> \"我是一个演示的函数式接口\");\n    }\n\n    /**\n     * 演示自定义函数式接口使用\n     *\n     * @param worker\n     */\n    public static void test(Worker worker) {\n        String work = worker.work();\n        System.out.println(work);\n    }\n\n    public interface Worker {\n        String work();\n    }\n}\n//9龙的身高高于185吗？：false\n//命运由我不由天\n//9龙\n//10\n//false\n//6\n//我是一个演示的函数式接口\n```\n\n以上演示了lambda接口的使用及自定义一个函数式接口并使用。下面，我们看看java8将函数式接口封装到流中如何高效的帮助我们处理集合。  \n\n\n注意：Student::getName例子中这种编写lambda表达式的方式称为方法引用。格式为ClassNmae::methodName。是不是很神奇，java8就是这么迷人。\n\n> 示例：本篇所有示例都基于以下三个类。OutstandingClass：班级；Student：学生；SpecialityEnum：特长。\n\n#### ![image_7771b4fe.png](感受java8后lambda之美/image_7771b4fe.png) \n\n#### 1.2 惰性求值与及早求值 \n\n惰性求值：只描述Stream，操作的结果也是Stream，这样的操作称为惰性求值。惰性求值可以像建造者模式一样链式使用，最后再使用及早求值得到最终结果。\n\n及早求值：得到最终的结果而不是Stream，这样的操作称为及早求值。\n\n### 2、常用的流 \n\n#### 2.1 collect(Collectors.toList()) \n\n将流转换为list。还有toSet()，toMap()等。及早求值。\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> studentList = Stream.of(new Student(\"路飞\", 22, 175),\n                new Student(\"红发\", 40, 180),\n                new Student(\"白胡子\", 50, 185)).collect(Collectors.toList());\n        System.out.println(studentList);\n    }\n}\n//输出结果\n//[Student{name='路飞', age=22, stature=175, specialities=null}, \n//Student{name='红发', age=40, stature=180, specialities=null}, \n//Student{name='白胡子', age=50, stature=185, specialities=null}]\n```\n\n#### 2.2 filter \n\n顾名思义，起过滤筛选的作用。内部就是Predicate接口。惰性求值。\n\n![image_eba0197b.png](感受java8后lambda之美/image_eba0197b.png)\n\n比如我们筛选出出身高小于180的同学。\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        List<Student> list = students.stream()\n            .filter(stu -> stu.getStature() < 180)\n            .collect(Collectors.toList());\n        System.out.println(list);\n    }\n}\n//输出结果\n//[Student{name='路飞', age=22, stature=175, specialities=null}]\n```\n\n#### 2.3 map    \n\n转换功能，内部就是Function接口。惰性求值\n\n![image_23fab375.png](感受java8后lambda之美/image_23fab375.png)\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        List<String> names = students.stream().map(student -> student.getName())\n                .collect(Collectors.toList());\n        System.out.println(names);\n    }\n}\n//输出结果\n//[路飞, 红发, 白胡子]\n```\n\n例子中将student对象转换为String对象，获取student的名字。  \n\n\n#### 2.4 flatMap \n\n将多个Stream合并为一个Stream。惰性求值\n\n![image_c1ac2536.png](感受java8后lambda之美/image_c1ac2536.png)\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        List<Student> studentList = Stream.of(students,\n                asList(new Student(\"艾斯\", 25, 183),\n                        new Student(\"雷利\", 48, 176)))\n                .flatMap(students1 -> students1.stream()).collect(Collectors.toList());\n        System.out.println(studentList);\n    }\n}\n//输出结果\n//[Student{name='路飞', age=22, stature=175, specialities=null}, \n//Student{name='红发', age=40, stature=180, specialities=null}, \n//Student{name='白胡子', age=50, stature=185, specialities=null}, \n//Student{name='艾斯', age=25, stature=183, specialities=null},\n//Student{name='雷利', age=48, stature=176, specialities=null}]\n```\n\n调用Stream.of的静态方法将两个list转换为Stream，再通过flatMap将两个流合并为一个。  \n\n\n#### 2.5 max和min \n\n我们经常会在集合中求最大或最小值，使用流就很方便。及早求值。\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        Optional<Student> max = students.stream()\n            .max(Comparator.comparing(stu -> stu.getAge()));\n        Optional<Student> min = students.stream()\n            .min(Comparator.comparing(stu -> stu.getAge()));\n        //判断是否有值\n        if (max.isPresent()) {\n            System.out.println(max.get());\n        }\n        if (min.isPresent()) {\n            System.out.println(min.get());\n        }\n    }\n}\n//输出结果\n//Student{name='白胡子', age=50, stature=185, specialities=null}\n//Student{name='路飞', age=22, stature=175, specialities=null}\n```\n\nmax、min接收一个Comparator（例子中使用java8自带的静态函数，只需要传进需要比较值即可。）并且返回一个Optional对象，该对象是java8新增的类，专门为了防止null引发的空指针异常。  \n\n\n可以使用max.isPresent()判断是否有值；可以使用max.orElse(new Student())，当值为null时就使用给定值；也可以使用max.orElseGet(() -> new Student());这需要传入一个Supplier的lambda表达式。\n\n#### 2.6 count \n\n统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        long count = students.stream().filter(s1 -> s1.getAge() < 45).count();\n        System.out.println(\"年龄小于45岁的人数是：\" + count);\n    }\n}\n//输出结果\n//年龄小于45岁的人数是：2\n```\n\n#### 2.7 reduce    \n\nreduce 操作可以实现从一组值中生成一个值。在上述例子中用到的 count 、 min 和 max 方法，因为常用而被纳入标准库中。事实上，这些方法都是 reduce 操作。及早求值。\n\n![image_9186bf98.png](感受java8后lambda之美/image_9186bf98.png)\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        Integer reduce = Stream.of(1, 2, 3, 4).reduce(0, (acc, x) -> acc+ x);\n        System.out.println(reduce);\n    }\n}\n//输出结果\n//10\n```\n\n我们看得reduce接收了一个初始值为0的累加器，依次取出值与累加器相加，最后累加器的值就是最终的结果。\n\n## 三、高级集合类及收集器 \n\n### 3.1 转换成值 \n\n收集器，一种通用的、从流生成复杂值的结构。只要将它传给 collect 方法，所有的流就都可以使用它了。标准类库已经提供了一些有用的收集器，以下示例代码中的收集器都是从 java.util.stream.Collectors 类中静态导入的。\n\n```java\npublic class CollectorsTest {\n    public static void main(String[] args) {\n        List<Student> students1 = new ArrayList<>(3);\n        students1.add(new Student(\"路飞\", 23, 175));\n        students1.add(new Student(\"红发\", 40, 180));\n        students1.add(new Student(\"白胡子\", 50, 185));\n\n        OutstandingClass ostClass1 = new OutstandingClass(\"一班\", students1);\n        //复制students1，并移除一个学生\n        List<Student> students2 = new ArrayList<>(students1);\n        students2.remove(1);\n        OutstandingClass ostClass2 = new OutstandingClass(\"二班\", students2);\n        //将ostClass1、ostClass2转换为Stream\n        Stream<OutstandingClass> classStream = Stream.of(ostClass1, ostClass2);\n        OutstandingClass outstandingClass = biggestGroup(classStream);\n        System.out.println(\"人数最多的班级是：\" + outstandingClass.getName());\n\n        System.out.println(\"一班平均年龄是：\" + averageNumberOfStudent(students1));\n    }\n\n    /**\n     * 获取人数最多的班级\n     */\n    private static OutstandingClass biggestGroup(Stream<OutstandingClass> outstandingClasses) {\n        return outstandingClasses.collect(\n                maxBy(comparing(ostClass -> ostClass.getStudents().size())))\n                .orElseGet(OutstandingClass::new);\n    }\n\n    /**\n     * 计算平均年龄\n     */\n    private static double averageNumberOfStudent(List<Student> students) {\n        return students.stream().collect(averagingInt(Student::getAge));\n    }\n}\n//输出结果\n//人数最多的班级是：一班\n//一班平均年龄是：37.666666666666664\n```\n\nmaxBy或者minBy就是求最大值与最小值。  \n\n\n### 3.2 转换成块 \n\n常用的流操作是将其分解成两个集合，Collectors.partitioningBy帮我们实现了，接收一个Predicate函数式接口。\n\n![image_16155432.png](感受java8后lambda之美/image_16155432.png)\n\n将示例学生分为会唱歌与不会唱歌的两个集合。\n\n```java\npublic class PartitioningByTest {\n    public static void main(String[] args) {\n        //省略List<student> students的初始化\n        Map<Boolean, List<Student>> listMap = students.stream().collect(\n            Collectors.partitioningBy(student -> student.getSpecialities().\n                                      contains(SpecialityEnum.SING)));\n    }\n}\n```\n\n### 3.3 数据分组 \n\n数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使用任意值对数据分组。Collectors.groupingBy接收一个Function做转换。\n\n![image_79d304da.png](感受java8后lambda之美/image_79d304da.png)\n\n如图，我们使用groupingBy将根据进行分组为圆形一组，三角形一组，正方形一组。\n\n例子：根据学生第一个特长进行分组\n\n```java\npublic class GroupingByTest {\n    public static void main(String[] args) {\n        //省略List<student> students的初始化\n         Map<SpecialityEnum, List<Student>> listMap = \n             students.stream().collect(\n             Collectors.groupingBy(student -> student.getSpecialities().get(0)));\n    }\n}\n```\n\nCollectors.groupingBy与SQL 中的 group by 操作是一样的。\n\n### 3.4 字符串拼接 \n\n如果将所有学生的名字拼接起来，怎么做呢？通常只能创建一个StringBuilder，循环拼接。使用Stream，使用Collectors.joining()简单容易。\n\n```java\npublic class JoiningTest {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n         String names = students.stream()\n             .map(Student::getName).collect(Collectors.joining(\",\",\"[\",\"]\"));\n        System.out.println(names);\n    }\n}\n//输出结果\n//[路飞,红发,白胡子]\n```\n\njoining接收三个参数，第一个是分界符，第二个是前缀符，第三个是结束符。也可以不传入参数Collectors.joining()，这样就是直接拼接。  \n\n\n## 四、总结 \n\n本篇主要从实际使用讲述了常用的方法及流，使用java8可以很清晰表达你要做什么，代码也很简洁。本篇例子主要是为了讲解较为简单，大家可以去使用java8重构自己现有的代码，自行领会lambda的奥妙。\n\n本文说的Stream要组合使用才会发挥更大的功能，链式调用很迷人，根据自己的业务去做吧。","source":"_posts/感受java8后lambda之美.md","raw":"\n---\ntitle: 感受java8后lambda之美\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-04 09:41:09\npassword:\nsummary: java8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。\ntags: \n    - jdk1.8\n    - lambda\n    - 函数式编程\ncategories:\n    - java\n---\n\n\n一、引言\n\njava8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。总结就是：使用不可变值与函数，函数对不可变值进行处理，映射成另一个值。\n\n## 二、java重要的函数式接口 \n\n### 1、什么是函数式接口 \n\n函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。\n\n#### 1.1 java8自带的常用函数式接口。 \n\n![image_ec9c4260.png](感受java8后lambda之美/image_ec9c4260.png)\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Predicate<Integer> predicate = x -> x > 185;\n        Student student = new Student(\"9龙\", 23, 175);\n        System.out.println(\n            \"9龙的身高高于185吗？：\" + predicate.test(student.getStature()));\n\n        Consumer<String> consumer = System.out::println;\n        consumer.accept(\"命运由我不由天\");\n\n        Function<Student, String> function = Student::getName;\n        String name = function.apply(student);\n        System.out.println(name);\n\n        Supplier<Integer> supplier = \n            () -> Integer.valueOf(BigDecimal.TEN.toString());\n        System.out.println(supplier.get());\n\n        UnaryOperator<Boolean> unaryOperator = uglily -> !uglily;\n        Boolean apply2 = unaryOperator.apply(true);\n        System.out.println(apply2);\n\n        BinaryOperator<Integer> operator = (x, y) -> x * y;\n        Integer integer = operator.apply(2, 3);\n        System.out.println(integer);\n\n        test(() -> \"我是一个演示的函数式接口\");\n    }\n\n    /**\n     * 演示自定义函数式接口使用\n     *\n     * @param worker\n     */\n    public static void test(Worker worker) {\n        String work = worker.work();\n        System.out.println(work);\n    }\n\n    public interface Worker {\n        String work();\n    }\n}\n//9龙的身高高于185吗？：false\n//命运由我不由天\n//9龙\n//10\n//false\n//6\n//我是一个演示的函数式接口\n```\n\n以上演示了lambda接口的使用及自定义一个函数式接口并使用。下面，我们看看java8将函数式接口封装到流中如何高效的帮助我们处理集合。  \n\n\n注意：Student::getName例子中这种编写lambda表达式的方式称为方法引用。格式为ClassNmae::methodName。是不是很神奇，java8就是这么迷人。\n\n> 示例：本篇所有示例都基于以下三个类。OutstandingClass：班级；Student：学生；SpecialityEnum：特长。\n\n#### ![image_7771b4fe.png](感受java8后lambda之美/image_7771b4fe.png) \n\n#### 1.2 惰性求值与及早求值 \n\n惰性求值：只描述Stream，操作的结果也是Stream，这样的操作称为惰性求值。惰性求值可以像建造者模式一样链式使用，最后再使用及早求值得到最终结果。\n\n及早求值：得到最终的结果而不是Stream，这样的操作称为及早求值。\n\n### 2、常用的流 \n\n#### 2.1 collect(Collectors.toList()) \n\n将流转换为list。还有toSet()，toMap()等。及早求值。\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> studentList = Stream.of(new Student(\"路飞\", 22, 175),\n                new Student(\"红发\", 40, 180),\n                new Student(\"白胡子\", 50, 185)).collect(Collectors.toList());\n        System.out.println(studentList);\n    }\n}\n//输出结果\n//[Student{name='路飞', age=22, stature=175, specialities=null}, \n//Student{name='红发', age=40, stature=180, specialities=null}, \n//Student{name='白胡子', age=50, stature=185, specialities=null}]\n```\n\n#### 2.2 filter \n\n顾名思义，起过滤筛选的作用。内部就是Predicate接口。惰性求值。\n\n![image_eba0197b.png](感受java8后lambda之美/image_eba0197b.png)\n\n比如我们筛选出出身高小于180的同学。\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        List<Student> list = students.stream()\n            .filter(stu -> stu.getStature() < 180)\n            .collect(Collectors.toList());\n        System.out.println(list);\n    }\n}\n//输出结果\n//[Student{name='路飞', age=22, stature=175, specialities=null}]\n```\n\n#### 2.3 map    \n\n转换功能，内部就是Function接口。惰性求值\n\n![image_23fab375.png](感受java8后lambda之美/image_23fab375.png)\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        List<String> names = students.stream().map(student -> student.getName())\n                .collect(Collectors.toList());\n        System.out.println(names);\n    }\n}\n//输出结果\n//[路飞, 红发, 白胡子]\n```\n\n例子中将student对象转换为String对象，获取student的名字。  \n\n\n#### 2.4 flatMap \n\n将多个Stream合并为一个Stream。惰性求值\n\n![image_c1ac2536.png](感受java8后lambda之美/image_c1ac2536.png)\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        List<Student> studentList = Stream.of(students,\n                asList(new Student(\"艾斯\", 25, 183),\n                        new Student(\"雷利\", 48, 176)))\n                .flatMap(students1 -> students1.stream()).collect(Collectors.toList());\n        System.out.println(studentList);\n    }\n}\n//输出结果\n//[Student{name='路飞', age=22, stature=175, specialities=null}, \n//Student{name='红发', age=40, stature=180, specialities=null}, \n//Student{name='白胡子', age=50, stature=185, specialities=null}, \n//Student{name='艾斯', age=25, stature=183, specialities=null},\n//Student{name='雷利', age=48, stature=176, specialities=null}]\n```\n\n调用Stream.of的静态方法将两个list转换为Stream，再通过flatMap将两个流合并为一个。  \n\n\n#### 2.5 max和min \n\n我们经常会在集合中求最大或最小值，使用流就很方便。及早求值。\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        Optional<Student> max = students.stream()\n            .max(Comparator.comparing(stu -> stu.getAge()));\n        Optional<Student> min = students.stream()\n            .min(Comparator.comparing(stu -> stu.getAge()));\n        //判断是否有值\n        if (max.isPresent()) {\n            System.out.println(max.get());\n        }\n        if (min.isPresent()) {\n            System.out.println(min.get());\n        }\n    }\n}\n//输出结果\n//Student{name='白胡子', age=50, stature=185, specialities=null}\n//Student{name='路飞', age=22, stature=175, specialities=null}\n```\n\nmax、min接收一个Comparator（例子中使用java8自带的静态函数，只需要传进需要比较值即可。）并且返回一个Optional对象，该对象是java8新增的类，专门为了防止null引发的空指针异常。  \n\n\n可以使用max.isPresent()判断是否有值；可以使用max.orElse(new Student())，当值为null时就使用给定值；也可以使用max.orElseGet(() -> new Student());这需要传入一个Supplier的lambda表达式。\n\n#### 2.6 count \n\n统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        long count = students.stream().filter(s1 -> s1.getAge() < 45).count();\n        System.out.println(\"年龄小于45岁的人数是：\" + count);\n    }\n}\n//输出结果\n//年龄小于45岁的人数是：2\n```\n\n#### 2.7 reduce    \n\nreduce 操作可以实现从一组值中生成一个值。在上述例子中用到的 count 、 min 和 max 方法，因为常用而被纳入标准库中。事实上，这些方法都是 reduce 操作。及早求值。\n\n![image_9186bf98.png](感受java8后lambda之美/image_9186bf98.png)\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        Integer reduce = Stream.of(1, 2, 3, 4).reduce(0, (acc, x) -> acc+ x);\n        System.out.println(reduce);\n    }\n}\n//输出结果\n//10\n```\n\n我们看得reduce接收了一个初始值为0的累加器，依次取出值与累加器相加，最后累加器的值就是最终的结果。\n\n## 三、高级集合类及收集器 \n\n### 3.1 转换成值 \n\n收集器，一种通用的、从流生成复杂值的结构。只要将它传给 collect 方法，所有的流就都可以使用它了。标准类库已经提供了一些有用的收集器，以下示例代码中的收集器都是从 java.util.stream.Collectors 类中静态导入的。\n\n```java\npublic class CollectorsTest {\n    public static void main(String[] args) {\n        List<Student> students1 = new ArrayList<>(3);\n        students1.add(new Student(\"路飞\", 23, 175));\n        students1.add(new Student(\"红发\", 40, 180));\n        students1.add(new Student(\"白胡子\", 50, 185));\n\n        OutstandingClass ostClass1 = new OutstandingClass(\"一班\", students1);\n        //复制students1，并移除一个学生\n        List<Student> students2 = new ArrayList<>(students1);\n        students2.remove(1);\n        OutstandingClass ostClass2 = new OutstandingClass(\"二班\", students2);\n        //将ostClass1、ostClass2转换为Stream\n        Stream<OutstandingClass> classStream = Stream.of(ostClass1, ostClass2);\n        OutstandingClass outstandingClass = biggestGroup(classStream);\n        System.out.println(\"人数最多的班级是：\" + outstandingClass.getName());\n\n        System.out.println(\"一班平均年龄是：\" + averageNumberOfStudent(students1));\n    }\n\n    /**\n     * 获取人数最多的班级\n     */\n    private static OutstandingClass biggestGroup(Stream<OutstandingClass> outstandingClasses) {\n        return outstandingClasses.collect(\n                maxBy(comparing(ostClass -> ostClass.getStudents().size())))\n                .orElseGet(OutstandingClass::new);\n    }\n\n    /**\n     * 计算平均年龄\n     */\n    private static double averageNumberOfStudent(List<Student> students) {\n        return students.stream().collect(averagingInt(Student::getAge));\n    }\n}\n//输出结果\n//人数最多的班级是：一班\n//一班平均年龄是：37.666666666666664\n```\n\nmaxBy或者minBy就是求最大值与最小值。  \n\n\n### 3.2 转换成块 \n\n常用的流操作是将其分解成两个集合，Collectors.partitioningBy帮我们实现了，接收一个Predicate函数式接口。\n\n![image_16155432.png](感受java8后lambda之美/image_16155432.png)\n\n将示例学生分为会唱歌与不会唱歌的两个集合。\n\n```java\npublic class PartitioningByTest {\n    public static void main(String[] args) {\n        //省略List<student> students的初始化\n        Map<Boolean, List<Student>> listMap = students.stream().collect(\n            Collectors.partitioningBy(student -> student.getSpecialities().\n                                      contains(SpecialityEnum.SING)));\n    }\n}\n```\n\n### 3.3 数据分组 \n\n数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使用任意值对数据分组。Collectors.groupingBy接收一个Function做转换。\n\n![image_79d304da.png](感受java8后lambda之美/image_79d304da.png)\n\n如图，我们使用groupingBy将根据进行分组为圆形一组，三角形一组，正方形一组。\n\n例子：根据学生第一个特长进行分组\n\n```java\npublic class GroupingByTest {\n    public static void main(String[] args) {\n        //省略List<student> students的初始化\n         Map<SpecialityEnum, List<Student>> listMap = \n             students.stream().collect(\n             Collectors.groupingBy(student -> student.getSpecialities().get(0)));\n    }\n}\n```\n\nCollectors.groupingBy与SQL 中的 group by 操作是一样的。\n\n### 3.4 字符串拼接 \n\n如果将所有学生的名字拼接起来，怎么做呢？通常只能创建一个StringBuilder，循环拼接。使用Stream，使用Collectors.joining()简单容易。\n\n```java\npublic class JoiningTest {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n         String names = students.stream()\n             .map(Student::getName).collect(Collectors.joining(\",\",\"[\",\"]\"));\n        System.out.println(names);\n    }\n}\n//输出结果\n//[路飞,红发,白胡子]\n```\n\njoining接收三个参数，第一个是分界符，第二个是前缀符，第三个是结束符。也可以不传入参数Collectors.joining()，这样就是直接拼接。  \n\n\n## 四、总结 \n\n本篇主要从实际使用讲述了常用的方法及流，使用java8可以很清晰表达你要做什么，代码也很简洁。本篇例子主要是为了讲解较为简单，大家可以去使用java8重构自己现有的代码，自行领会lambda的奥妙。\n\n本文说的Stream要组合使用才会发挥更大的功能，链式调用很迷人，根据自己的业务去做吧。","slug":"感受java8后lambda之美","published":1,"updated":"2022-11-04T01:58:12.493Z","_id":"cla1u1fni00004sld4m8lg8sb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一、引言</p>\n<p>java8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。总结就是：使用不可变值与函数，函数对不可变值进行处理，映射成另一个值。</p>\n<h2 id=\"二、java重要的函数式接口\"><a href=\"#二、java重要的函数式接口\" class=\"headerlink\" title=\"二、java重要的函数式接口\"></a>二、java重要的函数式接口</h2><h3 id=\"1、什么是函数式接口\"><a href=\"#1、什么是函数式接口\" class=\"headerlink\" title=\"1、什么是函数式接口\"></a>1、什么是函数式接口</h3><p>函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。</p>\n<h4 id=\"1-1-java8自带的常用函数式接口。\"><a href=\"#1-1-java8自带的常用函数式接口。\" class=\"headerlink\" title=\"1.1 java8自带的常用函数式接口。\"></a>1.1 java8自带的常用函数式接口。</h4><p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_ec9c4260.png\" alt=\"image_ec9c4260.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> predicate <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">></span> <span class=\"token number\">185</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9龙\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"9龙的身高高于185吗？：\"</span> <span class=\"token operator\">+</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getStature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span>\n        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"命运由我不由天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> function <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> supplier <span class=\"token operator\">=</span> \n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span>TEN<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> unaryOperator <span class=\"token operator\">=</span> uglily <span class=\"token operator\">-></span> <span class=\"token operator\">!</span>uglily<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Boolean</span> apply2 <span class=\"token operator\">=</span> unaryOperator<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>apply2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> operator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> integer <span class=\"token operator\">=</span> operator<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"我是一个演示的函数式接口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 演示自定义函数式接口使用\n     *\n     * @param worker\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Worker</span> worker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> work <span class=\"token operator\">=</span> worker<span class=\"token punctuation\">.</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Worker</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//9龙的身高高于185吗？：false</span>\n<span class=\"token comment\">//命运由我不由天</span>\n<span class=\"token comment\">//9龙</span>\n<span class=\"token comment\">//10</span>\n<span class=\"token comment\">//false</span>\n<span class=\"token comment\">//6</span>\n<span class=\"token comment\">//我是一个演示的函数式接口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上演示了lambda接口的使用及自定义一个函数式接口并使用。下面，我们看看java8将函数式接口封装到流中如何高效的帮助我们处理集合。  </p>\n<p>注意：Student::getName例子中这种编写lambda表达式的方式称为方法引用。格式为ClassNmae::methodName。是不是很神奇，java8就是这么迷人。</p>\n<blockquote>\n<p>示例：本篇所有示例都基于以下三个类。OutstandingClass：班级；Student：学生；SpecialityEnum：特长。</p>\n</blockquote>\n<h4 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_7771b4fe.png\" alt=\"image_7771b4fe.png\"></h4><h4 id=\"1-2-惰性求值与及早求值\"><a href=\"#1-2-惰性求值与及早求值\" class=\"headerlink\" title=\"1.2 惰性求值与及早求值\"></a>1.2 惰性求值与及早求值</h4><p>惰性求值：只描述Stream，操作的结果也是Stream，这样的操作称为惰性求值。惰性求值可以像建造者模式一样链式使用，最后再使用及早求值得到最终结果。</p>\n<p>及早求值：得到最终的结果而不是Stream，这样的操作称为及早求值。</p>\n<h3 id=\"2、常用的流\"><a href=\"#2、常用的流\" class=\"headerlink\" title=\"2、常用的流\"></a>2、常用的流</h3><h4 id=\"2-1-collect-Collectors-toList\"><a href=\"#2-1-collect-Collectors-toList\" class=\"headerlink\" title=\"2.1 collect(Collectors.toList())\"></a>2.1 collect(Collectors.toList())</h4><p>将流转换为list。还有toSet()，toMap()等。及早求值。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> studentList <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>studentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-filter\"><a href=\"#2-2-filter\" class=\"headerlink\" title=\"2.2 filter\"></a>2.2 filter</h4><p>顾名思义，起过滤筛选的作用。内部就是Predicate接口。惰性求值。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_eba0197b.png\" alt=\"image_eba0197b.png\"></p>\n<p>比如我们筛选出出身高小于180的同学。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getStature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-3-map\"><a href=\"#2-3-map\" class=\"headerlink\" title=\"2.3 map\"></a>2.3 map</h4><p>转换功能，内部就是Function接口。惰性求值</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_23fab375.png\" alt=\"image_23fab375.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> names <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[路飞, 红发, 白胡子]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例子中将student对象转换为String对象，获取student的名字。  </p>\n<h4 id=\"2-4-flatMap\"><a href=\"#2-4-flatMap\" class=\"headerlink\" title=\"2.4 flatMap\"></a>2.4 flatMap</h4><p>将多个Stream合并为一个Stream。惰性求值</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_c1ac2536.png\" alt=\"image_c1ac2536.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> studentList <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span>\n                <span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"艾斯\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">183</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"雷利\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">176</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>students1 <span class=\"token operator\">-></span> students1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>studentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='艾斯', age=25, stature=183, specialities=null&#125;,</span>\n<span class=\"token comment\">//Student&#123;name='雷利', age=48, stature=176, specialities=null&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>调用Stream.of的静态方法将两个list转换为Stream，再通过flatMap将两个流合并为一个。  </p>\n<h4 id=\"2-5-max和min\"><a href=\"#2-5-max和min\" class=\"headerlink\" title=\"2.5 max和min\"></a>2.5 max和min</h4><p>我们经常会在集合中求最大或最小值，使用流就很方便。及早求值。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> max <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> min <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//判断是否有值</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;</span>\n<span class=\"token comment\">//Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>max、min接收一个Comparator（例子中使用java8自带的静态函数，只需要传进需要比较值即可。）并且返回一个Optional对象，该对象是java8新增的类，专门为了防止null引发的空指针异常。  </p>\n<p>可以使用max.isPresent()判断是否有值；可以使用max.orElse(new Student())，当值为null时就使用给定值；也可以使用max.orElseGet(() -&gt; new Student());这需要传入一个Supplier的lambda表达式。</p>\n<h4 id=\"2-6-count\"><a href=\"#2-6-count\" class=\"headerlink\" title=\"2.6 count\"></a>2.6 count</h4><p>统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">-></span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年龄小于45岁的人数是：\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//年龄小于45岁的人数是：2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-7-reduce\"><a href=\"#2-7-reduce\" class=\"headerlink\" title=\"2.7 reduce\"></a>2.7 reduce</h4><p>reduce 操作可以实现从一组值中生成一个值。在上述例子中用到的 count 、 min 和 max 方法，因为常用而被纳入标准库中。事实上，这些方法都是 reduce 操作。及早求值。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_9186bf98.png\" alt=\"image_9186bf98.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Integer</span> reduce <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> acc<span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reduce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们看得reduce接收了一个初始值为0的累加器，依次取出值与累加器相加，最后累加器的值就是最终的结果。</p>\n<h2 id=\"三、高级集合类及收集器\"><a href=\"#三、高级集合类及收集器\" class=\"headerlink\" title=\"三、高级集合类及收集器\"></a>三、高级集合类及收集器</h2><h3 id=\"3-1-转换成值\"><a href=\"#3-1-转换成值\" class=\"headerlink\" title=\"3.1 转换成值\"></a>3.1 转换成值</h3><p>收集器，一种通用的、从流生成复杂值的结构。只要将它传给 collect 方法，所有的流就都可以使用它了。标准类库已经提供了一些有用的收集器，以下示例代码中的收集器都是从 java.util.stream.Collectors 类中静态导入的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CollectorsTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">OutstandingClass</span> ostClass1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一班\"</span><span class=\"token punctuation\">,</span> students1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//复制students1，并移除一个学生</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>students1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students2<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OutstandingClass</span> ostClass2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二班\"</span><span class=\"token punctuation\">,</span> students2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//将ostClass1、ostClass2转换为Stream</span>\n        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">></span></span> classStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>ostClass1<span class=\"token punctuation\">,</span> ostClass2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OutstandingClass</span> outstandingClass <span class=\"token operator\">=</span> <span class=\"token function\">biggestGroup</span><span class=\"token punctuation\">(</span>classStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"人数最多的班级是：\"</span> <span class=\"token operator\">+</span> outstandingClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一班平均年龄是：\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">averageNumberOfStudent</span><span class=\"token punctuation\">(</span>students1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 获取人数最多的班级\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">OutstandingClass</span> <span class=\"token function\">biggestGroup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">></span></span> outstandingClasses<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> outstandingClasses<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>ostClass <span class=\"token operator\">-></span> ostClass<span class=\"token punctuation\">.</span><span class=\"token function\">getStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElseGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OutstandingClass</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 计算平均年龄\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">averageNumberOfStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">averagingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//人数最多的班级是：一班</span>\n<span class=\"token comment\">//一班平均年龄是：37.666666666666664</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>maxBy或者minBy就是求最大值与最小值。  </p>\n<h3 id=\"3-2-转换成块\"><a href=\"#3-2-转换成块\" class=\"headerlink\" title=\"3.2 转换成块\"></a>3.2 转换成块</h3><p>常用的流操作是将其分解成两个集合，Collectors.partitioningBy帮我们实现了，接收一个Predicate函数式接口。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_16155432.png\" alt=\"image_16155432.png\"></p>\n<p>将示例学生分为会唱歌与不会唱歌的两个集合。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PartitioningByTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//省略List&lt;student> students的初始化</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> listMap <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">partitioningBy</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSpecialities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n                                      <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpecialityEnum</span><span class=\"token punctuation\">.</span>SING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-3-数据分组\"><a href=\"#3-3-数据分组\" class=\"headerlink\" title=\"3.3 数据分组\"></a>3.3 数据分组</h3><p>数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使用任意值对数据分组。Collectors.groupingBy接收一个Function做转换。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_79d304da.png\" alt=\"image_79d304da.png\"></p>\n<p>如图，我们使用groupingBy将根据进行分组为圆形一组，三角形一组，正方形一组。</p>\n<p>例子：根据学生第一个特长进行分组</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GroupingByTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//省略List&lt;student> students的初始化</span>\n         <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpecialityEnum</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> listMap <span class=\"token operator\">=</span> \n             students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n             <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSpecialities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Collectors.groupingBy与SQL 中的 group by 操作是一样的。</p>\n<h3 id=\"3-4-字符串拼接\"><a href=\"#3-4-字符串拼接\" class=\"headerlink\" title=\"3.4 字符串拼接\"></a>3.4 字符串拼接</h3><p>如果将所有学生的名字拼接起来，怎么做呢？通常只能创建一个StringBuilder，循环拼接。使用Stream，使用Collectors.joining()简单容易。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JoiningTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token class-name\">String</span> names <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[路飞,红发,白胡子]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>joining接收三个参数，第一个是分界符，第二个是前缀符，第三个是结束符。也可以不传入参数Collectors.joining()，这样就是直接拼接。  </p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>本篇主要从实际使用讲述了常用的方法及流，使用java8可以很清晰表达你要做什么，代码也很简洁。本篇例子主要是为了讲解较为简单，大家可以去使用java8重构自己现有的代码，自行领会lambda的奥妙。</p>\n<p>本文说的Stream要组合使用才会发挥更大的功能，链式调用很迷人，根据自己的业务去做吧。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>一、引言</p>\n<p>java8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。总结就是：使用不可变值与函数，函数对不可变值进行处理，映射成另一个值。</p>\n<h2 id=\"二、java重要的函数式接口\"><a href=\"#二、java重要的函数式接口\" class=\"headerlink\" title=\"二、java重要的函数式接口\"></a>二、java重要的函数式接口</h2><h3 id=\"1、什么是函数式接口\"><a href=\"#1、什么是函数式接口\" class=\"headerlink\" title=\"1、什么是函数式接口\"></a>1、什么是函数式接口</h3><p>函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。</p>\n<h4 id=\"1-1-java8自带的常用函数式接口。\"><a href=\"#1-1-java8自带的常用函数式接口。\" class=\"headerlink\" title=\"1.1 java8自带的常用函数式接口。\"></a>1.1 java8自带的常用函数式接口。</h4><p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_ec9c4260.png\" alt=\"image_ec9c4260.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> predicate <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">></span> <span class=\"token number\">185</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9龙\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"9龙的身高高于185吗？：\"</span> <span class=\"token operator\">+</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getStature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span>\n        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"命运由我不由天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> function <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> supplier <span class=\"token operator\">=</span> \n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span>TEN<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> unaryOperator <span class=\"token operator\">=</span> uglily <span class=\"token operator\">-></span> <span class=\"token operator\">!</span>uglily<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Boolean</span> apply2 <span class=\"token operator\">=</span> unaryOperator<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>apply2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> operator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> integer <span class=\"token operator\">=</span> operator<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"我是一个演示的函数式接口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 演示自定义函数式接口使用\n     *\n     * @param worker\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Worker</span> worker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> work <span class=\"token operator\">=</span> worker<span class=\"token punctuation\">.</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Worker</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//9龙的身高高于185吗？：false</span>\n<span class=\"token comment\">//命运由我不由天</span>\n<span class=\"token comment\">//9龙</span>\n<span class=\"token comment\">//10</span>\n<span class=\"token comment\">//false</span>\n<span class=\"token comment\">//6</span>\n<span class=\"token comment\">//我是一个演示的函数式接口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上演示了lambda接口的使用及自定义一个函数式接口并使用。下面，我们看看java8将函数式接口封装到流中如何高效的帮助我们处理集合。  </p>\n<p>注意：Student::getName例子中这种编写lambda表达式的方式称为方法引用。格式为ClassNmae::methodName。是不是很神奇，java8就是这么迷人。</p>\n<blockquote>\n<p>示例：本篇所有示例都基于以下三个类。OutstandingClass：班级；Student：学生；SpecialityEnum：特长。</p>\n</blockquote>\n<h4 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_7771b4fe.png\" alt=\"image_7771b4fe.png\"></h4><h4 id=\"1-2-惰性求值与及早求值\"><a href=\"#1-2-惰性求值与及早求值\" class=\"headerlink\" title=\"1.2 惰性求值与及早求值\"></a>1.2 惰性求值与及早求值</h4><p>惰性求值：只描述Stream，操作的结果也是Stream，这样的操作称为惰性求值。惰性求值可以像建造者模式一样链式使用，最后再使用及早求值得到最终结果。</p>\n<p>及早求值：得到最终的结果而不是Stream，这样的操作称为及早求值。</p>\n<h3 id=\"2、常用的流\"><a href=\"#2、常用的流\" class=\"headerlink\" title=\"2、常用的流\"></a>2、常用的流</h3><h4 id=\"2-1-collect-Collectors-toList\"><a href=\"#2-1-collect-Collectors-toList\" class=\"headerlink\" title=\"2.1 collect(Collectors.toList())\"></a>2.1 collect(Collectors.toList())</h4><p>将流转换为list。还有toSet()，toMap()等。及早求值。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> studentList <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>studentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-filter\"><a href=\"#2-2-filter\" class=\"headerlink\" title=\"2.2 filter\"></a>2.2 filter</h4><p>顾名思义，起过滤筛选的作用。内部就是Predicate接口。惰性求值。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_eba0197b.png\" alt=\"image_eba0197b.png\"></p>\n<p>比如我们筛选出出身高小于180的同学。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getStature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-3-map\"><a href=\"#2-3-map\" class=\"headerlink\" title=\"2.3 map\"></a>2.3 map</h4><p>转换功能，内部就是Function接口。惰性求值</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_23fab375.png\" alt=\"image_23fab375.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> names <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[路飞, 红发, 白胡子]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例子中将student对象转换为String对象，获取student的名字。  </p>\n<h4 id=\"2-4-flatMap\"><a href=\"#2-4-flatMap\" class=\"headerlink\" title=\"2.4 flatMap\"></a>2.4 flatMap</h4><p>将多个Stream合并为一个Stream。惰性求值</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_c1ac2536.png\" alt=\"image_c1ac2536.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> studentList <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span>\n                <span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"艾斯\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">183</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"雷利\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">176</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>students1 <span class=\"token operator\">-></span> students1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>studentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='艾斯', age=25, stature=183, specialities=null&#125;,</span>\n<span class=\"token comment\">//Student&#123;name='雷利', age=48, stature=176, specialities=null&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>调用Stream.of的静态方法将两个list转换为Stream，再通过flatMap将两个流合并为一个。  </p>\n<h4 id=\"2-5-max和min\"><a href=\"#2-5-max和min\" class=\"headerlink\" title=\"2.5 max和min\"></a>2.5 max和min</h4><p>我们经常会在集合中求最大或最小值，使用流就很方便。及早求值。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> max <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> min <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//判断是否有值</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;</span>\n<span class=\"token comment\">//Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>max、min接收一个Comparator（例子中使用java8自带的静态函数，只需要传进需要比较值即可。）并且返回一个Optional对象，该对象是java8新增的类，专门为了防止null引发的空指针异常。  </p>\n<p>可以使用max.isPresent()判断是否有值；可以使用max.orElse(new Student())，当值为null时就使用给定值；也可以使用max.orElseGet(() -&gt; new Student());这需要传入一个Supplier的lambda表达式。</p>\n<h4 id=\"2-6-count\"><a href=\"#2-6-count\" class=\"headerlink\" title=\"2.6 count\"></a>2.6 count</h4><p>统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">-></span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年龄小于45岁的人数是：\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//年龄小于45岁的人数是：2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-7-reduce\"><a href=\"#2-7-reduce\" class=\"headerlink\" title=\"2.7 reduce\"></a>2.7 reduce</h4><p>reduce 操作可以实现从一组值中生成一个值。在上述例子中用到的 count 、 min 和 max 方法，因为常用而被纳入标准库中。事实上，这些方法都是 reduce 操作。及早求值。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_9186bf98.png\" alt=\"image_9186bf98.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Integer</span> reduce <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> acc<span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reduce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们看得reduce接收了一个初始值为0的累加器，依次取出值与累加器相加，最后累加器的值就是最终的结果。</p>\n<h2 id=\"三、高级集合类及收集器\"><a href=\"#三、高级集合类及收集器\" class=\"headerlink\" title=\"三、高级集合类及收集器\"></a>三、高级集合类及收集器</h2><h3 id=\"3-1-转换成值\"><a href=\"#3-1-转换成值\" class=\"headerlink\" title=\"3.1 转换成值\"></a>3.1 转换成值</h3><p>收集器，一种通用的、从流生成复杂值的结构。只要将它传给 collect 方法，所有的流就都可以使用它了。标准类库已经提供了一些有用的收集器，以下示例代码中的收集器都是从 java.util.stream.Collectors 类中静态导入的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CollectorsTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">OutstandingClass</span> ostClass1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一班\"</span><span class=\"token punctuation\">,</span> students1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//复制students1，并移除一个学生</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>students1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students2<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OutstandingClass</span> ostClass2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二班\"</span><span class=\"token punctuation\">,</span> students2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//将ostClass1、ostClass2转换为Stream</span>\n        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">></span></span> classStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>ostClass1<span class=\"token punctuation\">,</span> ostClass2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OutstandingClass</span> outstandingClass <span class=\"token operator\">=</span> <span class=\"token function\">biggestGroup</span><span class=\"token punctuation\">(</span>classStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"人数最多的班级是：\"</span> <span class=\"token operator\">+</span> outstandingClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一班平均年龄是：\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">averageNumberOfStudent</span><span class=\"token punctuation\">(</span>students1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 获取人数最多的班级\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">OutstandingClass</span> <span class=\"token function\">biggestGroup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">></span></span> outstandingClasses<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> outstandingClasses<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>ostClass <span class=\"token operator\">-></span> ostClass<span class=\"token punctuation\">.</span><span class=\"token function\">getStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElseGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OutstandingClass</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 计算平均年龄\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">averageNumberOfStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">averagingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//人数最多的班级是：一班</span>\n<span class=\"token comment\">//一班平均年龄是：37.666666666666664</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>maxBy或者minBy就是求最大值与最小值。  </p>\n<h3 id=\"3-2-转换成块\"><a href=\"#3-2-转换成块\" class=\"headerlink\" title=\"3.2 转换成块\"></a>3.2 转换成块</h3><p>常用的流操作是将其分解成两个集合，Collectors.partitioningBy帮我们实现了，接收一个Predicate函数式接口。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_16155432.png\" alt=\"image_16155432.png\"></p>\n<p>将示例学生分为会唱歌与不会唱歌的两个集合。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PartitioningByTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//省略List&lt;student> students的初始化</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> listMap <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">partitioningBy</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSpecialities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n                                      <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpecialityEnum</span><span class=\"token punctuation\">.</span>SING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-3-数据分组\"><a href=\"#3-3-数据分组\" class=\"headerlink\" title=\"3.3 数据分组\"></a>3.3 数据分组</h3><p>数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使用任意值对数据分组。Collectors.groupingBy接收一个Function做转换。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_79d304da.png\" alt=\"image_79d304da.png\"></p>\n<p>如图，我们使用groupingBy将根据进行分组为圆形一组，三角形一组，正方形一组。</p>\n<p>例子：根据学生第一个特长进行分组</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GroupingByTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//省略List&lt;student> students的初始化</span>\n         <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpecialityEnum</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> listMap <span class=\"token operator\">=</span> \n             students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n             <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSpecialities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Collectors.groupingBy与SQL 中的 group by 操作是一样的。</p>\n<h3 id=\"3-4-字符串拼接\"><a href=\"#3-4-字符串拼接\" class=\"headerlink\" title=\"3.4 字符串拼接\"></a>3.4 字符串拼接</h3><p>如果将所有学生的名字拼接起来，怎么做呢？通常只能创建一个StringBuilder，循环拼接。使用Stream，使用Collectors.joining()简单容易。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JoiningTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token class-name\">String</span> names <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[路飞,红发,白胡子]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>joining接收三个参数，第一个是分界符，第二个是前缀符，第三个是结束符。也可以不传入参数Collectors.joining()，这样就是直接拼接。  </p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>本篇主要从实际使用讲述了常用的方法及流，使用java8可以很清晰表达你要做什么，代码也很简洁。本篇例子主要是为了讲解较为简单，大家可以去使用java8重构自己现有的代码，自行领会lambda的奥妙。</p>\n<p>本文说的Stream要组合使用才会发挥更大的功能，链式调用很迷人，根据自己的业务去做吧。</p>\n"},{"title":"在hexo中无痛使用本地图片","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-04T01:57:08.000Z","password":null,"summary":"在 hexo 中使用本地图片是件非常让人纠结的事情","_content":"\n## 1 起因 \n\n在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。\n\n这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。\n\nhexo 下插入图片现在大概有几个方案\n\n### 1.1 放在根目录 \n\n早期大部分的方案是把图片放在 `source/img` 下，然后在 markdown 里写 `![img](/source/img/img.png)` 。显然这样在本地的编辑器里完全不能正确识别图片的位置。\n\n### 1.2 asset-image \n\n在 hexo 2.x 时出现的插件，后来被吸纳进 `hexo 3 core` ，用法的介绍见 [资源文件夹 | Hexo][_ Hexo] 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。\n\n## 2 解决方案 \n\n[CodeFalling/hexo-asset-image][CodeFalling_hexo-asset-image]\n\n### 2.1 使用 \n\n首先确认 `_config.yml` 中有 `post_asset_folder:true` 。\n\n在 hexo 目录，执行\n\n```java\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n\n假设在\n\n```java\nMacGesture2-Publish\n├── apppicker.jpg\n├── logo.jpg\n└── rules.jpg MacGesture2-Publish.md\n```\n\n这样的目录结构（目录名和文章名一致），只要使用 `![logo](MacGesture2-Publish/logo.jpg)`就可以插入图片。\n\n生成的结构为\n\n```java\npublic/2015/10/18/MacGesture2-Publish\n├── apppicker.jpg\n├── index.html\n├── logo.jpg\n└── rules.jpg\n```\n\n同时，生成的 html 是\n\n```java\n<img src=\"/2015/10/18/MacGesture2-Publish/logo.jpg\" alt=\"logo\">\n```\n\n而不是愚蠢的\n\n```java\n<img src=\"MacGesture2-Publish/logo.jpg\" alt=\"logo\">\n```\n\n值得一提的是，这个插件对于 [CodeFalling/hexo-renderer-org][CodeFalling_hexo-renderer-org] 同样有效。","source":"_posts/在hexo中无痛使用本地图片.md","raw":"---\ntitle: 在hexo中无痛使用本地图片\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-04 09:57:08\npassword:\nsummary: 在 hexo 中使用本地图片是件非常让人纠结的事情\ntags:\n    hexo\ncategories:\n    - hexo\n---\n\n## 1 起因 \n\n在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。\n\n这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。\n\nhexo 下插入图片现在大概有几个方案\n\n### 1.1 放在根目录 \n\n早期大部分的方案是把图片放在 `source/img` 下，然后在 markdown 里写 `![img](/source/img/img.png)` 。显然这样在本地的编辑器里完全不能正确识别图片的位置。\n\n### 1.2 asset-image \n\n在 hexo 2.x 时出现的插件，后来被吸纳进 `hexo 3 core` ，用法的介绍见 [资源文件夹 | Hexo][_ Hexo] 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。\n\n## 2 解决方案 \n\n[CodeFalling/hexo-asset-image][CodeFalling_hexo-asset-image]\n\n### 2.1 使用 \n\n首先确认 `_config.yml` 中有 `post_asset_folder:true` 。\n\n在 hexo 目录，执行\n\n```java\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n\n假设在\n\n```java\nMacGesture2-Publish\n├── apppicker.jpg\n├── logo.jpg\n└── rules.jpg MacGesture2-Publish.md\n```\n\n这样的目录结构（目录名和文章名一致），只要使用 `![logo](MacGesture2-Publish/logo.jpg)`就可以插入图片。\n\n生成的结构为\n\n```java\npublic/2015/10/18/MacGesture2-Publish\n├── apppicker.jpg\n├── index.html\n├── logo.jpg\n└── rules.jpg\n```\n\n同时，生成的 html 是\n\n```java\n<img src=\"/2015/10/18/MacGesture2-Publish/logo.jpg\" alt=\"logo\">\n```\n\n而不是愚蠢的\n\n```java\n<img src=\"MacGesture2-Publish/logo.jpg\" alt=\"logo\">\n```\n\n值得一提的是，这个插件对于 [CodeFalling/hexo-renderer-org][CodeFalling_hexo-renderer-org] 同样有效。","slug":"在hexo中无痛使用本地图片","published":1,"updated":"2022-11-04T05:19:16.978Z","_id":"cla1uku9k0000wwld3jap61ky","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-起因\"><a href=\"#1-起因\" class=\"headerlink\" title=\"1 起因\"></a>1 起因</h2><p>在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。</p>\n<p>这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。</p>\n<p>hexo 下插入图片现在大概有几个方案</p>\n<h3 id=\"1-1-放在根目录\"><a href=\"#1-1-放在根目录\" class=\"headerlink\" title=\"1.1 放在根目录\"></a>1.1 放在根目录</h3><p>早期大部分的方案是把图片放在 <code>source/img</code> 下，然后在 markdown 里写 <code>![img](/source/img/img.png)</code> 。显然这样在本地的编辑器里完全不能正确识别图片的位置。</p>\n<h3 id=\"1-2-asset-image\"><a href=\"#1-2-asset-image\" class=\"headerlink\" title=\"1.2 asset-image\"></a>1.2 asset-image</h3><p>在 hexo 2.x 时出现的插件，后来被吸纳进 <code>hexo 3 core</code> ，用法的介绍见 [资源文件夹 | Hexo][_ Hexo] 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。</p>\n<h2 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2 解决方案\"></a>2 解决方案</h2><p>[CodeFalling/hexo-asset-image][CodeFalling_hexo-asset-image]</p>\n<h3 id=\"2-1-使用\"><a href=\"#2-1-使用\" class=\"headerlink\" title=\"2.1 使用\"></a>2.1 使用</h3><p>首先确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code> 。</p>\n<p>在 hexo 目录，执行</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">npm install https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token class-name\">CodeFalling</span><span class=\"token operator\">/</span>hexo<span class=\"token operator\">-</span>asset<span class=\"token operator\">-</span>image <span class=\"token operator\">--</span>save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设在</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">MacGesture2</span><span class=\"token operator\">-</span><span class=\"token class-name\">Publish</span>\n├── apppicker<span class=\"token punctuation\">.</span>jpg\n├── logo<span class=\"token punctuation\">.</span>jpg\n└── rules<span class=\"token punctuation\">.</span>jpg <span class=\"token class-name\">MacGesture2</span><span class=\"token operator\">-</span><span class=\"token class-name\">Publish</span><span class=\"token punctuation\">.</span>md<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样的目录结构（目录名和文章名一致），只要使用 <code>![logo](MacGesture2-Publish/logo.jpg)</code>就可以插入图片。</p>\n<p>生成的结构为</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span><span class=\"token operator\">/</span><span class=\"token number\">2015</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">18</span><span class=\"token operator\">/</span><span class=\"token class-name\">MacGesture2</span><span class=\"token operator\">-</span><span class=\"token class-name\">Publish</span>\n├── apppicker<span class=\"token punctuation\">.</span>jpg\n├── index<span class=\"token punctuation\">.</span>html\n├── logo<span class=\"token punctuation\">.</span>jpg\n└── rules<span class=\"token punctuation\">.</span>jpg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同时，生成的 html 是</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"/2015/10/18/MacGesture2-Publish/logo.jpg\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>而不是愚蠢的</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"MacGesture2-Publish/logo.jpg\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>值得一提的是，这个插件对于 [CodeFalling/hexo-renderer-org][CodeFalling_hexo-renderer-org] 同样有效。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h2 id=\"1-起因\"><a href=\"#1-起因\" class=\"headerlink\" title=\"1 起因\"></a>1 起因</h2><p>在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。</p>\n<p>这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。</p>\n<p>hexo 下插入图片现在大概有几个方案</p>\n<h3 id=\"1-1-放在根目录\"><a href=\"#1-1-放在根目录\" class=\"headerlink\" title=\"1.1 放在根目录\"></a>1.1 放在根目录</h3><p>早期大部分的方案是把图片放在 <code>source/img</code> 下，然后在 markdown 里写 <code>![img](/source/img/img.png)</code> 。显然这样在本地的编辑器里完全不能正确识别图片的位置。</p>\n<h3 id=\"1-2-asset-image\"><a href=\"#1-2-asset-image\" class=\"headerlink\" title=\"1.2 asset-image\"></a>1.2 asset-image</h3><p>在 hexo 2.x 时出现的插件，后来被吸纳进 <code>hexo 3 core</code> ，用法的介绍见 [资源文件夹 | Hexo][_ Hexo] 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。</p>\n<h2 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2 解决方案\"></a>2 解决方案</h2><p>[CodeFalling/hexo-asset-image][CodeFalling_hexo-asset-image]</p>\n<h3 id=\"2-1-使用\"><a href=\"#2-1-使用\" class=\"headerlink\" title=\"2.1 使用\"></a>2.1 使用</h3><p>首先确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code> 。</p>\n<p>在 hexo 目录，执行</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">npm install https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token class-name\">CodeFalling</span><span class=\"token operator\">/</span>hexo<span class=\"token operator\">-</span>asset<span class=\"token operator\">-</span>image <span class=\"token operator\">--</span>save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设在</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">MacGesture2</span><span class=\"token operator\">-</span><span class=\"token class-name\">Publish</span>\n├── apppicker<span class=\"token punctuation\">.</span>jpg\n├── logo<span class=\"token punctuation\">.</span>jpg\n└── rules<span class=\"token punctuation\">.</span>jpg <span class=\"token class-name\">MacGesture2</span><span class=\"token operator\">-</span><span class=\"token class-name\">Publish</span><span class=\"token punctuation\">.</span>md<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样的目录结构（目录名和文章名一致），只要使用 <code>![logo](MacGesture2-Publish/logo.jpg)</code>就可以插入图片。</p>\n<p>生成的结构为</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span><span class=\"token operator\">/</span><span class=\"token number\">2015</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">18</span><span class=\"token operator\">/</span><span class=\"token class-name\">MacGesture2</span><span class=\"token operator\">-</span><span class=\"token class-name\">Publish</span>\n├── apppicker<span class=\"token punctuation\">.</span>jpg\n├── index<span class=\"token punctuation\">.</span>html\n├── logo<span class=\"token punctuation\">.</span>jpg\n└── rules<span class=\"token punctuation\">.</span>jpg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同时，生成的 html 是</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"/2015/10/18/MacGesture2-Publish/logo.jpg\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>而不是愚蠢的</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"MacGesture2-Publish/logo.jpg\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>值得一提的是，这个插件对于 [CodeFalling/hexo-renderer-org][CodeFalling_hexo-renderer-org] 同样有效。</p>\n"},{"title":"Java8Stream实战系列","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-04T02:02:54.000Z","password":null,"summary":"就目前而言，Java8之类的仍然是主流","_content":"\n就目前而言，Java8之类的仍然是主流，即使用比较广泛，其次就是JDK11之类的，毕竟对于企业研发而言，求稳第一。  \n\n\n## 一、Java8有哪些新特性？ \n\n *  1.Lambda表达式；\n *  2.新的日期API；\n *  3.引入Optional；\n *  4.新增Base64加解密API；\n *  5.接口的默认方法和静态方法；\n *  6.新增方法引用格式；\n *  7.新增Stream类；\n *  8.注解相关的改变；\n *  9.支持并行数组；\n *  10.对并发类的扩展。\n\n这里不一一讲解，只讲Stream相关系列的实战和应用。\n\n## 二、我在实践应用Stream相关的是如何提高开发效率的？ \n\n以下以实用为主(实际应用比较多的)，进行分类划分。在实际中这些通常以组合的形式进行使用，不局限于单单使用某一个。这样做的目的就是为了提高研发效率以及更快更好的解决问题。不然，使用Stream这些新特性的意义也就不存在了。\n\n\n### 1.分组 \n\n\n```java\nMap<String, List<T>> groupMapData = originData.stream().collect(Collectors.groupingBy(T::getType));\n```\n\n### 2.条件筛选 \n\n\n```java\nList<T> filterList = originData.stream().filter(a -> a.getName().equals(\"YC\")).collect(Collectors.toList());\n```\n\n### 3.排序 \n\n```java\nList<T> filterOBDHourData = originData.stream()                       .sorted(Comparator.comparing(T::getId).reversed())                       .collect(Collectors.toList());\n```\n\n  \n\n\n### 4.去重 \n\n```java\nList<T> dataVOS = originData.stream().collect(        Collectors.collectingAndThen(            Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(T::getName))), ArrayList::new)\n```\n\n### 5.数组转List \n  \n\n```java\nList<String> codes = new ArrayList<>();String[] arr = target.trim().split(\",\");if (arr.length > 0) {  codes = Stream.of(arr).collect(Collectors.toList());}\n```\n\n### 6.数据合并(含去重以及不去重) \n\n\n```java\nList<String> result = Stream.of(Lists.newArrayList(\"A\", \"B\", \"C\"), Lists.newArrayList(\"A\", \"B\")).flatMap(Collection::stream).distinct().collect(Collectors.toList());\nList<String> result = Stream.of(Lists.newArrayList(\"A\", \"B\", \"C\"), Lists.newArrayList(\"A\", \"B\")).flatMap(Collection::stream).collect(Collectors.toList());\n```\n\n  \n\n\n### 7.分页 \n\n\n```java\nList<T> dataList = originData.stream().skip((dto.getPageNum() - 1) * dto.getPageSize()).limit(dto.getPageSize()).collect(Collectors.toList());\n```\n  \n### 8.统计 \n\n\n```java\n//求最大值BigDecimal max = dataList.stream().map(T::getPrice).max((x1, x2) -> x1.compareTo(x2)).get();\n//求最小值BigDecimal min = dataList.stream().map(T::getPrice).min((x1, x2) -> x1.compareTo(x2)).get();\n//求和 空指针异常排除BigDecimal sum = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);\n//求平均值BigDecimal average = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add).divide(BigDecimal.valueOf(dataList.size()), 2, BigDecimal.ROUND_HALF_UP);\n```\n\n### 9.拼接 \n\n```java\nString nameJoin = dataList.stream().map(T::getName).collect(Collectors.joining(\",\"));\n```\n\n### 10.归集 \n\n\n```java\nMap<String, T> mapNameObject = dataList.stream().collect(Collectors.toMap(T::getName, item -> item));\n```\n\n### 11.映射Map \n\n\n```java\nList<String> strList = Arrays.asList(\"1,2,3\", \"4,5,6\");List<String> newStrList = strList.stream().flatMap(item -> {  return Arrays.stream(item.split(\",\"));}).collect(Collectors.toList());\n```\n\n### 12.搜索 \n\n\n```java\noriginData.stream().filter(data -> Boolean.FALSE ? data.getName().equals(dto.getName()) :data.getName().contains(dto    .getName())).collect(Collectors.toList());\n```\n","source":"_posts/Java8Stream实战系列.md","raw":"---\ntitle: Java8Stream实战系列\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-04 10:02:54\npassword:\nsummary: 就目前而言，Java8之类的仍然是主流\ntags:\n    - jdk1.8\n    - stream\n    - lambda操作\ncategories:\n    - java\n---\n\n就目前而言，Java8之类的仍然是主流，即使用比较广泛，其次就是JDK11之类的，毕竟对于企业研发而言，求稳第一。  \n\n\n## 一、Java8有哪些新特性？ \n\n *  1.Lambda表达式；\n *  2.新的日期API；\n *  3.引入Optional；\n *  4.新增Base64加解密API；\n *  5.接口的默认方法和静态方法；\n *  6.新增方法引用格式；\n *  7.新增Stream类；\n *  8.注解相关的改变；\n *  9.支持并行数组；\n *  10.对并发类的扩展。\n\n这里不一一讲解，只讲Stream相关系列的实战和应用。\n\n## 二、我在实践应用Stream相关的是如何提高开发效率的？ \n\n以下以实用为主(实际应用比较多的)，进行分类划分。在实际中这些通常以组合的形式进行使用，不局限于单单使用某一个。这样做的目的就是为了提高研发效率以及更快更好的解决问题。不然，使用Stream这些新特性的意义也就不存在了。\n\n\n### 1.分组 \n\n\n```java\nMap<String, List<T>> groupMapData = originData.stream().collect(Collectors.groupingBy(T::getType));\n```\n\n### 2.条件筛选 \n\n\n```java\nList<T> filterList = originData.stream().filter(a -> a.getName().equals(\"YC\")).collect(Collectors.toList());\n```\n\n### 3.排序 \n\n```java\nList<T> filterOBDHourData = originData.stream()                       .sorted(Comparator.comparing(T::getId).reversed())                       .collect(Collectors.toList());\n```\n\n  \n\n\n### 4.去重 \n\n```java\nList<T> dataVOS = originData.stream().collect(        Collectors.collectingAndThen(            Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(T::getName))), ArrayList::new)\n```\n\n### 5.数组转List \n  \n\n```java\nList<String> codes = new ArrayList<>();String[] arr = target.trim().split(\",\");if (arr.length > 0) {  codes = Stream.of(arr).collect(Collectors.toList());}\n```\n\n### 6.数据合并(含去重以及不去重) \n\n\n```java\nList<String> result = Stream.of(Lists.newArrayList(\"A\", \"B\", \"C\"), Lists.newArrayList(\"A\", \"B\")).flatMap(Collection::stream).distinct().collect(Collectors.toList());\nList<String> result = Stream.of(Lists.newArrayList(\"A\", \"B\", \"C\"), Lists.newArrayList(\"A\", \"B\")).flatMap(Collection::stream).collect(Collectors.toList());\n```\n\n  \n\n\n### 7.分页 \n\n\n```java\nList<T> dataList = originData.stream().skip((dto.getPageNum() - 1) * dto.getPageSize()).limit(dto.getPageSize()).collect(Collectors.toList());\n```\n  \n### 8.统计 \n\n\n```java\n//求最大值BigDecimal max = dataList.stream().map(T::getPrice).max((x1, x2) -> x1.compareTo(x2)).get();\n//求最小值BigDecimal min = dataList.stream().map(T::getPrice).min((x1, x2) -> x1.compareTo(x2)).get();\n//求和 空指针异常排除BigDecimal sum = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);\n//求平均值BigDecimal average = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add).divide(BigDecimal.valueOf(dataList.size()), 2, BigDecimal.ROUND_HALF_UP);\n```\n\n### 9.拼接 \n\n```java\nString nameJoin = dataList.stream().map(T::getName).collect(Collectors.joining(\",\"));\n```\n\n### 10.归集 \n\n\n```java\nMap<String, T> mapNameObject = dataList.stream().collect(Collectors.toMap(T::getName, item -> item));\n```\n\n### 11.映射Map \n\n\n```java\nList<String> strList = Arrays.asList(\"1,2,3\", \"4,5,6\");List<String> newStrList = strList.stream().flatMap(item -> {  return Arrays.stream(item.split(\",\"));}).collect(Collectors.toList());\n```\n\n### 12.搜索 \n\n\n```java\noriginData.stream().filter(data -> Boolean.FALSE ? data.getName().equals(dto.getName()) :data.getName().contains(dto    .getName())).collect(Collectors.toList());\n```\n","slug":"Java8Stream实战系列","published":1,"updated":"2022-11-04T05:13:57.194Z","_id":"cla1ut5bv00006llddor7gqde","comments":1,"layout":"post","photos":[],"link":"","content":"<p>就目前而言，Java8之类的仍然是主流，即使用比较广泛，其次就是JDK11之类的，毕竟对于企业研发而言，求稳第一。  </p>\n<h2 id=\"一、Java8有哪些新特性？\"><a href=\"#一、Java8有哪些新特性？\" class=\"headerlink\" title=\"一、Java8有哪些新特性？\"></a>一、Java8有哪些新特性？</h2><ul>\n<li> 1.Lambda表达式；</li>\n<li> 2.新的日期API；</li>\n<li> 3.引入Optional；</li>\n<li> 4.新增Base64加解密API；</li>\n<li> 5.接口的默认方法和静态方法；</li>\n<li> 6.新增方法引用格式；</li>\n<li> 7.新增Stream类；</li>\n<li> 8.注解相关的改变；</li>\n<li> 9.支持并行数组；</li>\n<li> 10.对并发类的扩展。</li>\n</ul>\n<p>这里不一一讲解，只讲Stream相关系列的实战和应用。</p>\n<h2 id=\"二、我在实践应用Stream相关的是如何提高开发效率的？\"><a href=\"#二、我在实践应用Stream相关的是如何提高开发效率的？\" class=\"headerlink\" title=\"二、我在实践应用Stream相关的是如何提高开发效率的？\"></a>二、我在实践应用Stream相关的是如何提高开发效率的？</h2><p>以下以实用为主(实际应用比较多的)，进行分类划分。在实际中这些通常以组合的形式进行使用，不局限于单单使用某一个。这样做的目的就是为了提高研发效率以及更快更好的解决问题。不然，使用Stream这些新特性的意义也就不存在了。</p>\n<h3 id=\"1-分组\"><a href=\"#1-分组\" class=\"headerlink\" title=\"1.分组\"></a>1.分组</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> groupMapData <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-条件筛选\"><a href=\"#2-条件筛选\" class=\"headerlink\" title=\"2.条件筛选\"></a>2.条件筛选</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> filterList <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-排序\"><a href=\"#3-排序\" class=\"headerlink\" title=\"3.排序\"></a>3.排序</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> filterOBDHourData <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                       <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                       <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-去重\"><a href=\"#4-去重\" class=\"headerlink\" title=\"4.去重\"></a>4.去重</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataVOS <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>        <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">collectingAndThen</span><span class=\"token punctuation\">(</span>            <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-数组转List\"><a href=\"#5-数组转List\" class=\"headerlink\" title=\"5.数组转List\"></a>5.数组转List</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> codes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  codes <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-数据合并-含去重以及不去重\"><a href=\"#6-数据合并-含去重以及不去重\" class=\"headerlink\" title=\"6.数据合并(含去重以及不去重)\"></a>6.数据合并(含去重以及不去重)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-分页\"><a href=\"#7-分页\" class=\"headerlink\" title=\"7.分页\"></a>7.分页</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataList <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">.</span><span class=\"token function\">getPageNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> dto<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"8-统计\"><a href=\"#8-统计\" class=\"headerlink\" title=\"8.统计\"></a>8.统计</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//求最大值BigDecimal max = dataList.stream().map(T::getPrice).max((x1, x2) -> x1.compareTo(x2)).get();</span>\n<span class=\"token comment\">//求最小值BigDecimal min = dataList.stream().map(T::getPrice).min((x1, x2) -> x1.compareTo(x2)).get();</span>\n<span class=\"token comment\">//求和 空指针异常排除BigDecimal sum = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);</span>\n<span class=\"token comment\">//求平均值BigDecimal average = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add).divide(BigDecimal.valueOf(dataList.size()), 2, BigDecimal.ROUND_HALF_UP);</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9-拼接\"><a href=\"#9-拼接\" class=\"headerlink\" title=\"9.拼接\"></a>9.拼接</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> nameJoin <span class=\"token operator\">=</span> dataList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"10-归集\"><a href=\"#10-归集\" class=\"headerlink\" title=\"10.归集\"></a>10.归集</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> mapNameObject <span class=\"token operator\">=</span> dataList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> item <span class=\"token operator\">-></span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"11-映射Map\"><a href=\"#11-映射Map\" class=\"headerlink\" title=\"11.映射Map\"></a>11.映射Map</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strList <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1,2,3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4,5,6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> newStrList <span class=\"token operator\">=</span> strList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"12-搜索\"><a href=\"#12-搜索\" class=\"headerlink\" title=\"12.搜索\"></a>12.搜索</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>FALSE <span class=\"token operator\">?</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>dto    <span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>就目前而言，Java8之类的仍然是主流，即使用比较广泛，其次就是JDK11之类的，毕竟对于企业研发而言，求稳第一。  </p>\n<h2 id=\"一、Java8有哪些新特性？\"><a href=\"#一、Java8有哪些新特性？\" class=\"headerlink\" title=\"一、Java8有哪些新特性？\"></a>一、Java8有哪些新特性？</h2><ul>\n<li> 1.Lambda表达式；</li>\n<li> 2.新的日期API；</li>\n<li> 3.引入Optional；</li>\n<li> 4.新增Base64加解密API；</li>\n<li> 5.接口的默认方法和静态方法；</li>\n<li> 6.新增方法引用格式；</li>\n<li> 7.新增Stream类；</li>\n<li> 8.注解相关的改变；</li>\n<li> 9.支持并行数组；</li>\n<li> 10.对并发类的扩展。</li>\n</ul>\n<p>这里不一一讲解，只讲Stream相关系列的实战和应用。</p>\n<h2 id=\"二、我在实践应用Stream相关的是如何提高开发效率的？\"><a href=\"#二、我在实践应用Stream相关的是如何提高开发效率的？\" class=\"headerlink\" title=\"二、我在实践应用Stream相关的是如何提高开发效率的？\"></a>二、我在实践应用Stream相关的是如何提高开发效率的？</h2><p>以下以实用为主(实际应用比较多的)，进行分类划分。在实际中这些通常以组合的形式进行使用，不局限于单单使用某一个。这样做的目的就是为了提高研发效率以及更快更好的解决问题。不然，使用Stream这些新特性的意义也就不存在了。</p>\n<h3 id=\"1-分组\"><a href=\"#1-分组\" class=\"headerlink\" title=\"1.分组\"></a>1.分组</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> groupMapData <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-条件筛选\"><a href=\"#2-条件筛选\" class=\"headerlink\" title=\"2.条件筛选\"></a>2.条件筛选</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> filterList <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-排序\"><a href=\"#3-排序\" class=\"headerlink\" title=\"3.排序\"></a>3.排序</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> filterOBDHourData <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                       <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                       <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-去重\"><a href=\"#4-去重\" class=\"headerlink\" title=\"4.去重\"></a>4.去重</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataVOS <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>        <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">collectingAndThen</span><span class=\"token punctuation\">(</span>            <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-数组转List\"><a href=\"#5-数组转List\" class=\"headerlink\" title=\"5.数组转List\"></a>5.数组转List</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> codes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  codes <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-数据合并-含去重以及不去重\"><a href=\"#6-数据合并-含去重以及不去重\" class=\"headerlink\" title=\"6.数据合并(含去重以及不去重)\"></a>6.数据合并(含去重以及不去重)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-分页\"><a href=\"#7-分页\" class=\"headerlink\" title=\"7.分页\"></a>7.分页</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataList <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">.</span><span class=\"token function\">getPageNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> dto<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"8-统计\"><a href=\"#8-统计\" class=\"headerlink\" title=\"8.统计\"></a>8.统计</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//求最大值BigDecimal max = dataList.stream().map(T::getPrice).max((x1, x2) -> x1.compareTo(x2)).get();</span>\n<span class=\"token comment\">//求最小值BigDecimal min = dataList.stream().map(T::getPrice).min((x1, x2) -> x1.compareTo(x2)).get();</span>\n<span class=\"token comment\">//求和 空指针异常排除BigDecimal sum = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);</span>\n<span class=\"token comment\">//求平均值BigDecimal average = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add).divide(BigDecimal.valueOf(dataList.size()), 2, BigDecimal.ROUND_HALF_UP);</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9-拼接\"><a href=\"#9-拼接\" class=\"headerlink\" title=\"9.拼接\"></a>9.拼接</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> nameJoin <span class=\"token operator\">=</span> dataList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"10-归集\"><a href=\"#10-归集\" class=\"headerlink\" title=\"10.归集\"></a>10.归集</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> mapNameObject <span class=\"token operator\">=</span> dataList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> item <span class=\"token operator\">-></span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"11-映射Map\"><a href=\"#11-映射Map\" class=\"headerlink\" title=\"11.映射Map\"></a>11.映射Map</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strList <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1,2,3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4,5,6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> newStrList <span class=\"token operator\">=</span> strList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"12-搜索\"><a href=\"#12-搜索\" class=\"headerlink\" title=\"12.搜索\"></a>12.搜索</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>FALSE <span class=\"token operator\">?</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>dto    <span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"45个日常用git合代码的经典操作场景","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-04T02:49:16.000Z","password":null,"summary":"下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。","_content":"  \n\n\ngit对于大家应该都不太陌生，熟练使用git已经成为程序员的一项基本技能，尽管在工作中有诸如 `Sourcetree`这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的git命令。  \n\n\n下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。  \n\n\n### 我刚才提交了什么? \n\n如果你用 `git commit -a` 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前`HEAD`上的最近一次的提交(commit):\n\n```java\n(main)$ git show\n```\n\n或者\n\n```java\n$ git log -n1 -p\n```\n\n### 我的提交信息(commit message)写错了 \n\n如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):\n\n```java\n$ git commit --amend --only\n```\n\n这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:\n\n```java\n$ git commit --amend --only -m 'xxxxxxx'\n```\n\n如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。\n\n### 我提交(commit)里的用户名和邮箱不对 \n\n如果这只是单个提交(commit)，修改它：\n\n```java\n$ git commit --amend --author \"New Authorname <authoremail@mydomain.com>\"\n```\n\n如果你需要修改所有历史, 参考 'git filter-branch'的指南页.\n\n### 我想从一个提交(commit)里移除一个文件 \n\n通过下面的方法，从一个提交(commit)里移除一个文件:\n\n```java\n$ git checkout HEAD^ myfile\n$ git add -A\n$ git commit --amend\n```\n\n这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。\n\n### 我想删除我的的最后一次提交(commit) \n\n如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。\n\n```java\n$ git reset HEAD^ --hard\n$ git push -f [remote] [branch]\n```\n\n如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):\n\n```java\n(my-branch*)$ git reset --soft HEAD@{1}\n```\n\n这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 `git revert SHAofBadCommit`， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 `git push -f`。\n\n### 删除任意提交(commit) \n\n同样的警告：不到万不得已的时候不要这么做.\n\n```java\n$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT\n$ git push -f [remote] [branch]\n```\n\n或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。\n\n### 我尝试推一个修正后的提交(amended commit)到远程，但是报错： \n\n```java\nTo https://github.com/yourusername/repo.git\n! [rejected]        mybranch -> mybranch (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/tanay1337/webmaker.org.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n\n注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (`-f`)。注意 – 总是 确保你指明一个分支!\n\n```java\n(my-branch)$ git push origin mybranch -f\n```\n\n一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。\n\n### 我意外的做了一次硬重置(hard reset)，我想找回我的内容 \n\n如果你意外的做了 `git reset --hard`, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。\n\n```java\n(main)$ git reflog\n```\n\n你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:\n\n```java\n(main)$ git reset --hard SHA1234\n```\n\n这样就完成了。\n\n## 暂存(Staging) \n\n### 我需要把暂存的内容添加到上一次的提交(commit) \n\n```java\n(my-branch*)$ git commit --amend\n```\n\n### 我想要暂存一个新文件的一部分，而不是这个文件的全部 \n\n一般来说, 如果你想暂存一个文件的一部分, 你可这样做:\n\n```java\n$ git add --patch filename.x\n```\n\n`-p` 简写。这会打开交互模式， 你将能够用 `s` 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:\n\n```java\n$ git add -N filename.x\n```\n\n然后, 你需要用 `e` 选项来手动选择需要添加的行，执行 `git diff --cached` 将会显示哪些行暂存了哪些行只是保存在本地了。\n\n### 我想把在一个文件里的变化(changes)加到两个提交(commit)里 \n\n`git add` 会把整个文件加入到一个提交. `git add -p` 允许交互式的选择你想要提交的部分.\n\n### 我想把暂存的内容变成未暂存，把未暂存的内容暂存起来 \n\n多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。\n\n```java\n$ git commit -m \"WIP\"\n$ git add .\n$ git stash\n$ git reset HEAD^\n$ git stash pop --index 0\n```\n\n注意1: 这里使用`pop`仅仅是因为想尽可能保持幂等。注意2: 假如你不加上`--index`你会把暂存的文件标记为为存储。\n\n## 未暂存(Unstaged)的内容 \n\n### 我想把未暂存的内容移动到一个新分支 \n\n```java\n$ git checkout -b my-branch\n```\n\n### 我想把未暂存的内容移动到另一个已存在的分支 \n\n```java\n$ git stash\n$ git checkout my-branch\n$ git stash pop\n```\n\n### 我想丢弃本地未提交的变化(uncommitted changes) \n\n如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：\n\n```java\n# one commit\n(my-branch)$ git reset --hard HEAD^\n# two commits\n(my-branch)$ git reset --hard HEAD^^\n# four commits\n(my-branch)$ git reset --hard HEAD~4\n# or\n(main)$ git checkout -f\n```\n\n重置某个特殊的文件, 你可以用文件名做为参数:\n\n```java\n$ git reset filename\n```\n\n### 我想丢弃某些未暂存的内容 \n\n如果你想丢弃工作拷贝中的一部分内容，而不是全部。\n\n签出(checkout)不需要的内容，保留需要的。\n\n```java\n$ git checkout -p\n# Answer y to all of the snippets you want to drop\n```\n\n另外一个方法是使用 `stash`， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。\n\n```java\n$ git stash -p\n# Select all of the snippets you want to save\n$ git reset --hard\n$ git stash pop\n```\n\n或者, stash 你不需要的部分, 然后stash drop。\n\n```java\n$ git stash -p\n# Select all of the snippets you don't want to save\n$ git stash drop\n```\n\n## 分支(Branches) \n\n### 我从错误的分支拉取了内容，或把内容拉取到了错误的分支 \n\n这是另外一种使用 `git reflog` 情况，找到在这次错误拉(pull) 之前HEAD的指向。\n\n```java\n(main)$ git reflog\nab7555f HEAD@{0}: pull origin wrong-branch: Fast-forward\nc5bc55a HEAD@{1}: checkout: checkout message goes here\n```\n\n重置分支到你所需的提交(desired commit):\n\n```java\n$ git reset --hard c5bc55a\n```\n\n完成。\n\n### 我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致 \n\n先确认你没有推(push)你的内容到远程。\n\n`git status` 会显示你领先(ahead)源(origin)多少个提交:\n\n```java\n(my-branch)$ git status\n# On branch my-branch\n# Your branch is ahead of 'origin/my-branch' by 2 commits.\n#   (use \"git push\" to publish your local commits)\n#\n```\n\n一种方法是:\n\n```java\n(main)$ git reset --hard origin/my-branch\n```\n\n### 我需要提交到一个新分支，但错误的提交到了main \n\n在main下创建一个新分支，不切换到新分支,仍在main下:\n\n```java\n(main)$ git branch my-branch\n```\n\n把main分支重置到前一个提交:\n\n```java\n(main)$ git reset --hard HEAD^\n```\n\n`HEAD^` 是 `HEAD^1` 的简写，你可以通过指定要设置的`HEAD`来进一步重置。\n\n或者, 如果你不想使用 `HEAD^`, 找到你想重置到的提交(commit)的hash(`git log` 能够完成)， 然后重置到这个hash。使用`git push` 同步内容到远程。\n\n例如, main分支想重置到的提交的hash为`a13b85e`:\n\n```java\n(main)$ git reset --hard a13b85e\nHEAD is now at a13b85e\n```\n\n签出(checkout)刚才新建的分支继续工作:\n\n```java\n(main)$ git checkout my-branch\n```\n\n### 我想保留来自另外一个ref-ish的整个文件 \n\n假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:微信搜索公众号：Java后端编程，回复：java 领取资料 。\n\n```java\n(solution)$ git add -A && git commit -m \"Adding all changes from this spike into one big commit.\"\n```\n\n当你想要把它放到一个分支里 (可能是`feature`, 或者 `develop`), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。\n\n假设你有:\n\n *  分支 `solution`, 拥有原型方案， 领先 `develop` 分支。\n *  分支 `develop`, 在这里你应用原型方案的一些内容。\n\n我去可以通过把内容拿到你的分支里，来解决这个问题:\n\n```java\n(develop)$ git checkout solution -- file1.txt\n```\n\n这会把这个文件内容从分支 `solution` 拿到分支 `develop` 里来:\n\n```java\n# On branch develop\n# Your branch is up-to-date with 'origin/develop'.\n# Changes to be committed:\n#  (use \"git reset HEAD <file>...\" to unstage)\n#\n#        modified:   file1.txt\n```\n\n然后, 正常提交。\n\nNote: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.\n\n### 我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里 \n\n假设你有一个`main`分支， 执行`git log`, 你看到你做过两次提交:\n\n```java\n(main)$ git log\n\ncommit e3851e817c451cc36f2e6f3049db528415e3c114\nAuthor: Alex Lee <alexlee@example.com>\nDate:   Tue Jul 22 15:39:27 2014 -0400\n\n    Bug #21 - Added CSRF protection\n\ncommit 5ea51731d150f7ddc4a365437931cd8be3bf3131\nAuthor: Alex Lee <alexlee@example.com>\nDate:   Tue Jul 22 15:39:12 2014 -0400\n\n    Bug #14 - Fixed spacing on title\n\ncommit a13b85e984171c6e2a1729bb061994525f626d14\nAuthor: Aki Rose <akirose@example.com>\nDate:   Tue Jul 21 01:12:48 2014 -0400\n\n    First commit\n```\n\n让我们用提交hash(commit hash)标记bug (`e3851e8` for \\#21, `5ea5173` for \\#14).\n\n首先, 我们把`main`分支重置到正确的提交(`a13b85e`):\n\n```java\n(main)$ git reset --hard a13b85e\nHEAD is now at a13b85e\n```\n\n现在, 我们对 bug \\#21 创建一个新的分支:\n\n```java\n(main)$ git checkout -b 21\n(21)$\n```\n\n接着, 我们用 cherry-pick 把对bug \\#21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。\n\n```java\n(21)$ git cherry-pick e3851e8\n```\n\n这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.\n\n再者， 我们为bug \\#14 创建一个新的分支, 也基于`main`分支\n\n```java\n(21)$ git checkout main\n(main)$ git checkout -b 14\n(14)$\n```\n\n最后, 为 bug \\#14 执行 `cherry-pick`:\n\n```java\n(14)$ git cherry-pick 5ea5173\n```\n\n### 我想删除上游(upstream)分支被删除了的本地分支 \n\n一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（[IDEA 中玩转 Git][IDEA _ Git]）。\n\n```java\n$ git fetch -p\n```\n\n### 我不小心删除了我的分支 \n\n如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:\n\n```java\n(main)$ git checkout -b my-branch\n(my-branch)$ git branch\n(my-branch)$ touch foo.txt\n(my-branch)$ ls\nREADME.md foo.txt\n```\n\n添加文件并做一次提交\n\n```java\n(my-branch)$ git add .\n(my-branch)$ git commit -m 'foo.txt added'\n(my-branch)$ foo.txt added\n 1 files changed, 1 insertions(+)\n create mode 100644 foo.txt\n(my-branch)$ git log\n\ncommit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012\nAuthor: siemiatj <siemiatj@example.com>\nDate:   Wed Jul 30 00:34:10 2014 +0200\n\n    foo.txt added\n\ncommit 69204cdf0acbab201619d95ad8295928e7f411d5\nAuthor: Kate Hudson <katehudson@example.com>\nDate:   Tue Jul 29 13:14:46 2014 -0400\n\n    Fixes #6: Force pushing after amending commits\n```\n\n现在我们切回到主(main)分支，‘不小心的’删除`my-branch`分支\n\n```java\n(my-branch)$ git checkout main\nSwitched to branch 'main'\nYour branch is up-to-date with 'origin/main'.\n(main)$ git branch -D my-branch\nDeleted branch my-branch (was 4e3cd85).\n(main)$ echo oh noes, deleted my branch!\noh noes, deleted my branch!\n```\n\n在这时候你应该想起了`reflog`, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。\n\n```java\n(main)$ git reflog\n69204cd HEAD@{0}: checkout: moving from my-branch to main\n4e3cd85 HEAD@{1}: commit: foo.txt added\n69204cd HEAD@{2}: checkout: moving from main to my-branch\n```\n\n正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。\n\n```java\n(main)$ git checkout -b my-branch-help\nSwitched to a new branch 'my-branch-help'\n(my-branch-help)$ git reset --hard 4e3cd85\nHEAD is now at 4e3cd85 foo.txt added\n(my-branch-help)$ ls\nREADME.md foo.txt\n```\n\n看! 我们把删除的文件找回来了。Git的 `reflog` 在rebasing出错的时候也是同样有用的。\n\n### 我想删除一个分支 \n\n删除一个远程分支:\n\n```java\n(main)$ git push origin --delete my-branch\n```\n\n你也可以:\n\n```java\n(main)$ git push origin :my-branch\n```\n\n删除一个本地分支:\n\n```java\n(main)$ git branch -D my-branch\n```\n\n### 我想从别人正在工作的远程分支签出(checkout)一个分支 \n\n首先, 从远程拉取(fetch) 所有分支:\n\n```java\n(main)$ git fetch --all\n```\n\n假设你想要从远程的`daves`分支签出到本地的`daves`\n\n```java\n(main)$ git checkout --track origin/daves\nBranch daves set up to track remote branch daves from origin.\nSwitched to a new branch 'daves'\n```\n\n(`--track` 是 `git checkout -b [branch] [remotename]/[branch]` 的简写)\n\n这样就得到了一个`daves`分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.\n\n## Rebasing 和合并(Merging) \n\n### 我想撤销rebase/merge \n\n你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG\\_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。\n\n```java\n(my-branch)$ git reset --hard ORIG_HEAD\n```\n\n### 我已经rebase过, 但是我不想强推(force push) \n\n不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:\n\n```java\n(main)$ git checkout my-branch\n(my-branch)$ git rebase -i main\n(my-branch)$ git checkout main\n(main)$ git merge --ff-only my-branch\n```\n\n### 我需要组合(combine)几个提交(commit) \n\n假设你的工作分支将会做对于 `main` 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:\n\n```java\n(my-branch)$ git reset --soft main\n(my-branch)$ git commit -am \"New awesome feature\"\n```\n\n如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):\n\n```java\n(my-branch)$ git rebase -i main\n```\n\n如果没有相对的其它分支， 你将不得不相对自己的`HEAD` 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于`HEAD~2` 进行rebase， 组合最近3次提交(commit), 相对于`HEAD~3`, 等等。\n\n```java\n(main)$ git rebase -i HEAD~2\n```\n\n在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:\n\n```java\npick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\npick b729ad5 fixup\npick e3851e8 another fix\n\n# Rebase 8074d12..b729ad5 onto 8074d12\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n\n所有以 `#` 开头的行都是注释, 不会影响 rebase.\n\n然后，你可以用任何上面命令列表的命令替换 `pick`, 你也可以通过删除对应的行来删除一个提交(commit)。\n\n例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 `f`:\n\n```java\npick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\nf b729ad5 fixup\nf e3851e8 another fix\n```\n\n如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个`r`，或者更简单的用`s` 替代 `f`:\n\n```java\npick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\ns b729ad5 fixup\ns e3851e8 another fix\n```\n\n你可以在接下来弹出的文本提示框里重命名提交(commit)。\n\n```java\nNewer, awesomer features\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# rebase in progress; onto 8074d12\n# You are currently editing a commit while rebasing branch 'main' on '8074d12'.\n#\n# Changes to be committed:\n#\tmodified:   README.md\n#\n```\n\n如果成功了, 你应该看到类似下面的内容:\n\n```java\n(main)$ Successfully rebased and updated refs/heads/main.\n```\n\n#### 安全合并(merging)策略 \n\n`--no-commit` 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。`no-ff` 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多Git资料，参见[IDEA 中如何完成 Git 版本回退？][IDEA _ Git 1]）。\n\n```java\n(main)$ git merge --no-ff --no-commit my-branch\n```\n\n#### 我需要将一个分支合并成一个提交(commit) \n\n```java\n(main)$ git merge --squash my-branch\n```\n\n#### 我只想组合(combine)未推的提交(unpushed commit) \n\n有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。\n\n```java\n(main)$ git rebase -i @{u}\n```\n\n这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。\n\n### 检查是否分支上的所有提交(commit)都合并(merge)过了 \n\n检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:\n\n```java\n(main)$ git log --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll\n```\n\n这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:\n\n```java\n(main)$ git log main ^feature/120-on-scroll --no-merges\n```\n\n### 交互式rebase(interactive rebase)可能出现的问题 \n\n#### 这个rebase 编辑屏幕出现'noop' \n\n如果你看到的是这样:\n\n```java\nnoop\n```\n\n这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:\n\n *  检查确保主(main)分支没有问题\n *  rebase `HEAD~2` 或者更早\n\n#### 有冲突的情况 \n\n如果你不能成功的完成rebase, 你可能必须要解决冲突。\n\n首先执行 `git status` 找出哪些文件有冲突:\n\n```java\n(my-branch)$ git status\nOn branch my-branch\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n modified:   README.md\n```\n\n在这个例子里面, `README.md` 有冲突。打开这个文件找到类似下面的内容:\n\n```java\n<<<<<<< HEAD\n   some code\n   =========\n   some code\n   >>>>>>> new-commit\n```\n\n你需要解决新提交的代码(示例里, 从中间`==`线到`new-commit`的地方)与`HEAD` 之间不一样的地方.\n\n有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):\n\n```java\n(main*)$ git mergetool -t opendiff\n```\n\n在你解决完所有冲突和测试过后, `git add` 变化了的(changed)文件, 然后用`git rebase --continue` 继续rebase。\n\n```java\n(my-branch)$ git add README.md\n(my-branch)$ git rebase --continue\n```\n\n如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行`git rebase --skip`。\n\n任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:\n\n```java\n(my-branch)$ git rebase --abort\n```\n\n## Stash \n\n### 暂存所有改动 \n\n暂存你工作目录下的所有改动\n\n```java\n$ git stash\n```\n\n你可以使用`-u`来排除一些文件\n\n```java\n$ git stash -u\n```\n\n### 暂存指定文件 \n\n假设你只想暂存某一个文件\n\n```java\n$ git stash push working-directory-path/filename.ext\n```\n\n假设你想暂存多个文件\n\n```java\n$ git stash push working-directory-path/filename1.ext working-directory-path/filename2.ext\n```\n\n### 暂存时记录消息 \n\n这样你可以在`list`时看到它\n\n```java\n$ git stash save <message>\n```\n\n或\n\n```java\n$ git stash push -m <message>\n```\n\n### 使用某个指定暂存 \n\n首先你可以查看你的`stash`记录\n\n```java\n$ git stash list\n```\n\n然后你可以`apply`某个`stash`\n\n```java\n$ git stash apply \"stash@{n}\"\n```\n\n此处， 'n'是`stash`在栈中的位置，最上层的`stash`会是0\n\n除此之外，也可以使用时间标记(假如你能记得的话)。\n\n```java\n$ git stash apply \"stash@{2.hours.ago}\"\n```\n\n### 暂存时保留未暂存的内容 \n\n你需要手动create一个`stash commit`， 然后使用`git stash store`。\n\n```java\n$ git stash create\n$ git stash store -m \"commit-message\" CREATED_SHA1\n```\n\n## 杂项(Miscellaneous Objects) \n\n### 克隆所有子模块 \n\n```java\n$ git clone --recursive git://github.com/foo/bar.git\n```\n\n如果已经克隆了:\n\n```java\n$ git submodule update --init --recursive\n```\n\n### 删除标签(tag) \n\n```java\n$ git tag -d <tag_name>\n$ git push <remote> :refs/tags/<tag_name>\n```\n\n### 恢复已删除标签(tag) \n\n如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):\n\n```java\n$ git fsck --unreachable | grep tag\n```\n\n记下这个标签(tag)的hash，然后用Git的 update-ref\n\n```java\n$ git update-ref refs/tags/<tag_name> <hash>\n```\n\n这时你的标签(tag)应该已经恢复了。\n\n### 已删除补丁(patch) \n\n如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 `git am`。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。\n\n做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。\n\n## 跟踪文件(Tracking Files) \n\n### 我只想改变一个文件名字的大小写，而不修改内容 \n\n```java\n(main)$ git mv --force myfile MyFile\n```\n\n### 我想从Git删除一个文件，但保留该文件 \n\n```java\n(main)$ git rm --cached log.txt\n```\n\n## 配置(Configuration) \n\n### 我想给一些Git命令添加别名(alias) \n\n在 OS X 和 Linux 下, 你的 Git的配置文件储存在 `~/.gitconfig`。我在`[alias]` 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:\n\n```java\n[alias]\n    a = add\n    amend = commit --amend\n    c = commit\n    ca = commit --amend\n    ci = commit -a\n    co = checkout\n    d = diff\n    dc = diff --changed\n    ds = diff --staged\n    f = fetch\n    loll = log --graph --decorate --pretty=oneline --abbrev-commit\n    m = merge\n    one = log --pretty=oneline\n    outstanding = rebase -i @{u}\n    s = status\n    unpushed = log @{u}\n    wc = whatchanged\n    wip = rebase -i @{u}\n    zap = fetch -p\n```\n\n### 我想缓存一个仓库(repository)的用户名和密码 \n\n你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。\n\n```java\n$ git config --global credential.helper cache\n# Set git to use the credential memory cache\n```\n\n```java\n$ git config --global credential.helper 'cache --timeout=3600'\n# Set the cache to timeout after 1 hour (setting is in seconds)\n```\n\n### 我不知道我做错了些什么 \n\n你把事情搞砸了：你 `重置(reset)` 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。\n\n这就是 `git reflog` 的目的， `reflog` 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到`reflog`。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。\n\n```java\n(main)$ git reflog\n0a2e358 HEAD@{0}: reset: moving to HEAD~2\n0254ea7 HEAD@{1}: checkout: moving from 2.2 to main\nc10f740 HEAD@{2}: checkout: moving from main to 2.2\n```\n\n上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 `HEAD@{0}`标识.\n\n如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。\n\n```java\n$ git reset --hard 0254ea7\n```\n\n然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。","source":"_posts/45个日常用git合代码的经典操作场景.md","raw":"---\ntitle: 45个日常用git合代码的经典操作场景\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-04 10:49:16\npassword:\nsummary: 下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。\ntags:\n    - git\n    - 代码合并\ncategories:\n    - git\n---\n  \n\n\ngit对于大家应该都不太陌生，熟练使用git已经成为程序员的一项基本技能，尽管在工作中有诸如 `Sourcetree`这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的git命令。  \n\n\n下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。  \n\n\n### 我刚才提交了什么? \n\n如果你用 `git commit -a` 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前`HEAD`上的最近一次的提交(commit):\n\n```java\n(main)$ git show\n```\n\n或者\n\n```java\n$ git log -n1 -p\n```\n\n### 我的提交信息(commit message)写错了 \n\n如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):\n\n```java\n$ git commit --amend --only\n```\n\n这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:\n\n```java\n$ git commit --amend --only -m 'xxxxxxx'\n```\n\n如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。\n\n### 我提交(commit)里的用户名和邮箱不对 \n\n如果这只是单个提交(commit)，修改它：\n\n```java\n$ git commit --amend --author \"New Authorname <authoremail@mydomain.com>\"\n```\n\n如果你需要修改所有历史, 参考 'git filter-branch'的指南页.\n\n### 我想从一个提交(commit)里移除一个文件 \n\n通过下面的方法，从一个提交(commit)里移除一个文件:\n\n```java\n$ git checkout HEAD^ myfile\n$ git add -A\n$ git commit --amend\n```\n\n这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。\n\n### 我想删除我的的最后一次提交(commit) \n\n如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。\n\n```java\n$ git reset HEAD^ --hard\n$ git push -f [remote] [branch]\n```\n\n如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):\n\n```java\n(my-branch*)$ git reset --soft HEAD@{1}\n```\n\n这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 `git revert SHAofBadCommit`， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 `git push -f`。\n\n### 删除任意提交(commit) \n\n同样的警告：不到万不得已的时候不要这么做.\n\n```java\n$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT\n$ git push -f [remote] [branch]\n```\n\n或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。\n\n### 我尝试推一个修正后的提交(amended commit)到远程，但是报错： \n\n```java\nTo https://github.com/yourusername/repo.git\n! [rejected]        mybranch -> mybranch (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/tanay1337/webmaker.org.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n\n注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (`-f`)。注意 – 总是 确保你指明一个分支!\n\n```java\n(my-branch)$ git push origin mybranch -f\n```\n\n一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。\n\n### 我意外的做了一次硬重置(hard reset)，我想找回我的内容 \n\n如果你意外的做了 `git reset --hard`, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。\n\n```java\n(main)$ git reflog\n```\n\n你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:\n\n```java\n(main)$ git reset --hard SHA1234\n```\n\n这样就完成了。\n\n## 暂存(Staging) \n\n### 我需要把暂存的内容添加到上一次的提交(commit) \n\n```java\n(my-branch*)$ git commit --amend\n```\n\n### 我想要暂存一个新文件的一部分，而不是这个文件的全部 \n\n一般来说, 如果你想暂存一个文件的一部分, 你可这样做:\n\n```java\n$ git add --patch filename.x\n```\n\n`-p` 简写。这会打开交互模式， 你将能够用 `s` 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:\n\n```java\n$ git add -N filename.x\n```\n\n然后, 你需要用 `e` 选项来手动选择需要添加的行，执行 `git diff --cached` 将会显示哪些行暂存了哪些行只是保存在本地了。\n\n### 我想把在一个文件里的变化(changes)加到两个提交(commit)里 \n\n`git add` 会把整个文件加入到一个提交. `git add -p` 允许交互式的选择你想要提交的部分.\n\n### 我想把暂存的内容变成未暂存，把未暂存的内容暂存起来 \n\n多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。\n\n```java\n$ git commit -m \"WIP\"\n$ git add .\n$ git stash\n$ git reset HEAD^\n$ git stash pop --index 0\n```\n\n注意1: 这里使用`pop`仅仅是因为想尽可能保持幂等。注意2: 假如你不加上`--index`你会把暂存的文件标记为为存储。\n\n## 未暂存(Unstaged)的内容 \n\n### 我想把未暂存的内容移动到一个新分支 \n\n```java\n$ git checkout -b my-branch\n```\n\n### 我想把未暂存的内容移动到另一个已存在的分支 \n\n```java\n$ git stash\n$ git checkout my-branch\n$ git stash pop\n```\n\n### 我想丢弃本地未提交的变化(uncommitted changes) \n\n如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：\n\n```java\n# one commit\n(my-branch)$ git reset --hard HEAD^\n# two commits\n(my-branch)$ git reset --hard HEAD^^\n# four commits\n(my-branch)$ git reset --hard HEAD~4\n# or\n(main)$ git checkout -f\n```\n\n重置某个特殊的文件, 你可以用文件名做为参数:\n\n```java\n$ git reset filename\n```\n\n### 我想丢弃某些未暂存的内容 \n\n如果你想丢弃工作拷贝中的一部分内容，而不是全部。\n\n签出(checkout)不需要的内容，保留需要的。\n\n```java\n$ git checkout -p\n# Answer y to all of the snippets you want to drop\n```\n\n另外一个方法是使用 `stash`， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。\n\n```java\n$ git stash -p\n# Select all of the snippets you want to save\n$ git reset --hard\n$ git stash pop\n```\n\n或者, stash 你不需要的部分, 然后stash drop。\n\n```java\n$ git stash -p\n# Select all of the snippets you don't want to save\n$ git stash drop\n```\n\n## 分支(Branches) \n\n### 我从错误的分支拉取了内容，或把内容拉取到了错误的分支 \n\n这是另外一种使用 `git reflog` 情况，找到在这次错误拉(pull) 之前HEAD的指向。\n\n```java\n(main)$ git reflog\nab7555f HEAD@{0}: pull origin wrong-branch: Fast-forward\nc5bc55a HEAD@{1}: checkout: checkout message goes here\n```\n\n重置分支到你所需的提交(desired commit):\n\n```java\n$ git reset --hard c5bc55a\n```\n\n完成。\n\n### 我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致 \n\n先确认你没有推(push)你的内容到远程。\n\n`git status` 会显示你领先(ahead)源(origin)多少个提交:\n\n```java\n(my-branch)$ git status\n# On branch my-branch\n# Your branch is ahead of 'origin/my-branch' by 2 commits.\n#   (use \"git push\" to publish your local commits)\n#\n```\n\n一种方法是:\n\n```java\n(main)$ git reset --hard origin/my-branch\n```\n\n### 我需要提交到一个新分支，但错误的提交到了main \n\n在main下创建一个新分支，不切换到新分支,仍在main下:\n\n```java\n(main)$ git branch my-branch\n```\n\n把main分支重置到前一个提交:\n\n```java\n(main)$ git reset --hard HEAD^\n```\n\n`HEAD^` 是 `HEAD^1` 的简写，你可以通过指定要设置的`HEAD`来进一步重置。\n\n或者, 如果你不想使用 `HEAD^`, 找到你想重置到的提交(commit)的hash(`git log` 能够完成)， 然后重置到这个hash。使用`git push` 同步内容到远程。\n\n例如, main分支想重置到的提交的hash为`a13b85e`:\n\n```java\n(main)$ git reset --hard a13b85e\nHEAD is now at a13b85e\n```\n\n签出(checkout)刚才新建的分支继续工作:\n\n```java\n(main)$ git checkout my-branch\n```\n\n### 我想保留来自另外一个ref-ish的整个文件 \n\n假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:微信搜索公众号：Java后端编程，回复：java 领取资料 。\n\n```java\n(solution)$ git add -A && git commit -m \"Adding all changes from this spike into one big commit.\"\n```\n\n当你想要把它放到一个分支里 (可能是`feature`, 或者 `develop`), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。\n\n假设你有:\n\n *  分支 `solution`, 拥有原型方案， 领先 `develop` 分支。\n *  分支 `develop`, 在这里你应用原型方案的一些内容。\n\n我去可以通过把内容拿到你的分支里，来解决这个问题:\n\n```java\n(develop)$ git checkout solution -- file1.txt\n```\n\n这会把这个文件内容从分支 `solution` 拿到分支 `develop` 里来:\n\n```java\n# On branch develop\n# Your branch is up-to-date with 'origin/develop'.\n# Changes to be committed:\n#  (use \"git reset HEAD <file>...\" to unstage)\n#\n#        modified:   file1.txt\n```\n\n然后, 正常提交。\n\nNote: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.\n\n### 我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里 \n\n假设你有一个`main`分支， 执行`git log`, 你看到你做过两次提交:\n\n```java\n(main)$ git log\n\ncommit e3851e817c451cc36f2e6f3049db528415e3c114\nAuthor: Alex Lee <alexlee@example.com>\nDate:   Tue Jul 22 15:39:27 2014 -0400\n\n    Bug #21 - Added CSRF protection\n\ncommit 5ea51731d150f7ddc4a365437931cd8be3bf3131\nAuthor: Alex Lee <alexlee@example.com>\nDate:   Tue Jul 22 15:39:12 2014 -0400\n\n    Bug #14 - Fixed spacing on title\n\ncommit a13b85e984171c6e2a1729bb061994525f626d14\nAuthor: Aki Rose <akirose@example.com>\nDate:   Tue Jul 21 01:12:48 2014 -0400\n\n    First commit\n```\n\n让我们用提交hash(commit hash)标记bug (`e3851e8` for \\#21, `5ea5173` for \\#14).\n\n首先, 我们把`main`分支重置到正确的提交(`a13b85e`):\n\n```java\n(main)$ git reset --hard a13b85e\nHEAD is now at a13b85e\n```\n\n现在, 我们对 bug \\#21 创建一个新的分支:\n\n```java\n(main)$ git checkout -b 21\n(21)$\n```\n\n接着, 我们用 cherry-pick 把对bug \\#21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。\n\n```java\n(21)$ git cherry-pick e3851e8\n```\n\n这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.\n\n再者， 我们为bug \\#14 创建一个新的分支, 也基于`main`分支\n\n```java\n(21)$ git checkout main\n(main)$ git checkout -b 14\n(14)$\n```\n\n最后, 为 bug \\#14 执行 `cherry-pick`:\n\n```java\n(14)$ git cherry-pick 5ea5173\n```\n\n### 我想删除上游(upstream)分支被删除了的本地分支 \n\n一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（[IDEA 中玩转 Git][IDEA _ Git]）。\n\n```java\n$ git fetch -p\n```\n\n### 我不小心删除了我的分支 \n\n如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:\n\n```java\n(main)$ git checkout -b my-branch\n(my-branch)$ git branch\n(my-branch)$ touch foo.txt\n(my-branch)$ ls\nREADME.md foo.txt\n```\n\n添加文件并做一次提交\n\n```java\n(my-branch)$ git add .\n(my-branch)$ git commit -m 'foo.txt added'\n(my-branch)$ foo.txt added\n 1 files changed, 1 insertions(+)\n create mode 100644 foo.txt\n(my-branch)$ git log\n\ncommit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012\nAuthor: siemiatj <siemiatj@example.com>\nDate:   Wed Jul 30 00:34:10 2014 +0200\n\n    foo.txt added\n\ncommit 69204cdf0acbab201619d95ad8295928e7f411d5\nAuthor: Kate Hudson <katehudson@example.com>\nDate:   Tue Jul 29 13:14:46 2014 -0400\n\n    Fixes #6: Force pushing after amending commits\n```\n\n现在我们切回到主(main)分支，‘不小心的’删除`my-branch`分支\n\n```java\n(my-branch)$ git checkout main\nSwitched to branch 'main'\nYour branch is up-to-date with 'origin/main'.\n(main)$ git branch -D my-branch\nDeleted branch my-branch (was 4e3cd85).\n(main)$ echo oh noes, deleted my branch!\noh noes, deleted my branch!\n```\n\n在这时候你应该想起了`reflog`, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。\n\n```java\n(main)$ git reflog\n69204cd HEAD@{0}: checkout: moving from my-branch to main\n4e3cd85 HEAD@{1}: commit: foo.txt added\n69204cd HEAD@{2}: checkout: moving from main to my-branch\n```\n\n正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。\n\n```java\n(main)$ git checkout -b my-branch-help\nSwitched to a new branch 'my-branch-help'\n(my-branch-help)$ git reset --hard 4e3cd85\nHEAD is now at 4e3cd85 foo.txt added\n(my-branch-help)$ ls\nREADME.md foo.txt\n```\n\n看! 我们把删除的文件找回来了。Git的 `reflog` 在rebasing出错的时候也是同样有用的。\n\n### 我想删除一个分支 \n\n删除一个远程分支:\n\n```java\n(main)$ git push origin --delete my-branch\n```\n\n你也可以:\n\n```java\n(main)$ git push origin :my-branch\n```\n\n删除一个本地分支:\n\n```java\n(main)$ git branch -D my-branch\n```\n\n### 我想从别人正在工作的远程分支签出(checkout)一个分支 \n\n首先, 从远程拉取(fetch) 所有分支:\n\n```java\n(main)$ git fetch --all\n```\n\n假设你想要从远程的`daves`分支签出到本地的`daves`\n\n```java\n(main)$ git checkout --track origin/daves\nBranch daves set up to track remote branch daves from origin.\nSwitched to a new branch 'daves'\n```\n\n(`--track` 是 `git checkout -b [branch] [remotename]/[branch]` 的简写)\n\n这样就得到了一个`daves`分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.\n\n## Rebasing 和合并(Merging) \n\n### 我想撤销rebase/merge \n\n你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG\\_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。\n\n```java\n(my-branch)$ git reset --hard ORIG_HEAD\n```\n\n### 我已经rebase过, 但是我不想强推(force push) \n\n不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:\n\n```java\n(main)$ git checkout my-branch\n(my-branch)$ git rebase -i main\n(my-branch)$ git checkout main\n(main)$ git merge --ff-only my-branch\n```\n\n### 我需要组合(combine)几个提交(commit) \n\n假设你的工作分支将会做对于 `main` 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:\n\n```java\n(my-branch)$ git reset --soft main\n(my-branch)$ git commit -am \"New awesome feature\"\n```\n\n如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):\n\n```java\n(my-branch)$ git rebase -i main\n```\n\n如果没有相对的其它分支， 你将不得不相对自己的`HEAD` 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于`HEAD~2` 进行rebase， 组合最近3次提交(commit), 相对于`HEAD~3`, 等等。\n\n```java\n(main)$ git rebase -i HEAD~2\n```\n\n在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:\n\n```java\npick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\npick b729ad5 fixup\npick e3851e8 another fix\n\n# Rebase 8074d12..b729ad5 onto 8074d12\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n\n所有以 `#` 开头的行都是注释, 不会影响 rebase.\n\n然后，你可以用任何上面命令列表的命令替换 `pick`, 你也可以通过删除对应的行来删除一个提交(commit)。\n\n例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 `f`:\n\n```java\npick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\nf b729ad5 fixup\nf e3851e8 another fix\n```\n\n如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个`r`，或者更简单的用`s` 替代 `f`:\n\n```java\npick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\ns b729ad5 fixup\ns e3851e8 another fix\n```\n\n你可以在接下来弹出的文本提示框里重命名提交(commit)。\n\n```java\nNewer, awesomer features\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# rebase in progress; onto 8074d12\n# You are currently editing a commit while rebasing branch 'main' on '8074d12'.\n#\n# Changes to be committed:\n#\tmodified:   README.md\n#\n```\n\n如果成功了, 你应该看到类似下面的内容:\n\n```java\n(main)$ Successfully rebased and updated refs/heads/main.\n```\n\n#### 安全合并(merging)策略 \n\n`--no-commit` 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。`no-ff` 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多Git资料，参见[IDEA 中如何完成 Git 版本回退？][IDEA _ Git 1]）。\n\n```java\n(main)$ git merge --no-ff --no-commit my-branch\n```\n\n#### 我需要将一个分支合并成一个提交(commit) \n\n```java\n(main)$ git merge --squash my-branch\n```\n\n#### 我只想组合(combine)未推的提交(unpushed commit) \n\n有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。\n\n```java\n(main)$ git rebase -i @{u}\n```\n\n这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。\n\n### 检查是否分支上的所有提交(commit)都合并(merge)过了 \n\n检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:\n\n```java\n(main)$ git log --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll\n```\n\n这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:\n\n```java\n(main)$ git log main ^feature/120-on-scroll --no-merges\n```\n\n### 交互式rebase(interactive rebase)可能出现的问题 \n\n#### 这个rebase 编辑屏幕出现'noop' \n\n如果你看到的是这样:\n\n```java\nnoop\n```\n\n这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:\n\n *  检查确保主(main)分支没有问题\n *  rebase `HEAD~2` 或者更早\n\n#### 有冲突的情况 \n\n如果你不能成功的完成rebase, 你可能必须要解决冲突。\n\n首先执行 `git status` 找出哪些文件有冲突:\n\n```java\n(my-branch)$ git status\nOn branch my-branch\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n modified:   README.md\n```\n\n在这个例子里面, `README.md` 有冲突。打开这个文件找到类似下面的内容:\n\n```java\n<<<<<<< HEAD\n   some code\n   =========\n   some code\n   >>>>>>> new-commit\n```\n\n你需要解决新提交的代码(示例里, 从中间`==`线到`new-commit`的地方)与`HEAD` 之间不一样的地方.\n\n有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):\n\n```java\n(main*)$ git mergetool -t opendiff\n```\n\n在你解决完所有冲突和测试过后, `git add` 变化了的(changed)文件, 然后用`git rebase --continue` 继续rebase。\n\n```java\n(my-branch)$ git add README.md\n(my-branch)$ git rebase --continue\n```\n\n如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行`git rebase --skip`。\n\n任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:\n\n```java\n(my-branch)$ git rebase --abort\n```\n\n## Stash \n\n### 暂存所有改动 \n\n暂存你工作目录下的所有改动\n\n```java\n$ git stash\n```\n\n你可以使用`-u`来排除一些文件\n\n```java\n$ git stash -u\n```\n\n### 暂存指定文件 \n\n假设你只想暂存某一个文件\n\n```java\n$ git stash push working-directory-path/filename.ext\n```\n\n假设你想暂存多个文件\n\n```java\n$ git stash push working-directory-path/filename1.ext working-directory-path/filename2.ext\n```\n\n### 暂存时记录消息 \n\n这样你可以在`list`时看到它\n\n```java\n$ git stash save <message>\n```\n\n或\n\n```java\n$ git stash push -m <message>\n```\n\n### 使用某个指定暂存 \n\n首先你可以查看你的`stash`记录\n\n```java\n$ git stash list\n```\n\n然后你可以`apply`某个`stash`\n\n```java\n$ git stash apply \"stash@{n}\"\n```\n\n此处， 'n'是`stash`在栈中的位置，最上层的`stash`会是0\n\n除此之外，也可以使用时间标记(假如你能记得的话)。\n\n```java\n$ git stash apply \"stash@{2.hours.ago}\"\n```\n\n### 暂存时保留未暂存的内容 \n\n你需要手动create一个`stash commit`， 然后使用`git stash store`。\n\n```java\n$ git stash create\n$ git stash store -m \"commit-message\" CREATED_SHA1\n```\n\n## 杂项(Miscellaneous Objects) \n\n### 克隆所有子模块 \n\n```java\n$ git clone --recursive git://github.com/foo/bar.git\n```\n\n如果已经克隆了:\n\n```java\n$ git submodule update --init --recursive\n```\n\n### 删除标签(tag) \n\n```java\n$ git tag -d <tag_name>\n$ git push <remote> :refs/tags/<tag_name>\n```\n\n### 恢复已删除标签(tag) \n\n如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):\n\n```java\n$ git fsck --unreachable | grep tag\n```\n\n记下这个标签(tag)的hash，然后用Git的 update-ref\n\n```java\n$ git update-ref refs/tags/<tag_name> <hash>\n```\n\n这时你的标签(tag)应该已经恢复了。\n\n### 已删除补丁(patch) \n\n如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 `git am`。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。\n\n做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。\n\n## 跟踪文件(Tracking Files) \n\n### 我只想改变一个文件名字的大小写，而不修改内容 \n\n```java\n(main)$ git mv --force myfile MyFile\n```\n\n### 我想从Git删除一个文件，但保留该文件 \n\n```java\n(main)$ git rm --cached log.txt\n```\n\n## 配置(Configuration) \n\n### 我想给一些Git命令添加别名(alias) \n\n在 OS X 和 Linux 下, 你的 Git的配置文件储存在 `~/.gitconfig`。我在`[alias]` 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:\n\n```java\n[alias]\n    a = add\n    amend = commit --amend\n    c = commit\n    ca = commit --amend\n    ci = commit -a\n    co = checkout\n    d = diff\n    dc = diff --changed\n    ds = diff --staged\n    f = fetch\n    loll = log --graph --decorate --pretty=oneline --abbrev-commit\n    m = merge\n    one = log --pretty=oneline\n    outstanding = rebase -i @{u}\n    s = status\n    unpushed = log @{u}\n    wc = whatchanged\n    wip = rebase -i @{u}\n    zap = fetch -p\n```\n\n### 我想缓存一个仓库(repository)的用户名和密码 \n\n你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。\n\n```java\n$ git config --global credential.helper cache\n# Set git to use the credential memory cache\n```\n\n```java\n$ git config --global credential.helper 'cache --timeout=3600'\n# Set the cache to timeout after 1 hour (setting is in seconds)\n```\n\n### 我不知道我做错了些什么 \n\n你把事情搞砸了：你 `重置(reset)` 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。\n\n这就是 `git reflog` 的目的， `reflog` 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到`reflog`。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。\n\n```java\n(main)$ git reflog\n0a2e358 HEAD@{0}: reset: moving to HEAD~2\n0254ea7 HEAD@{1}: checkout: moving from 2.2 to main\nc10f740 HEAD@{2}: checkout: moving from main to 2.2\n```\n\n上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 `HEAD@{0}`标识.\n\n如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。\n\n```java\n$ git reset --hard 0254ea7\n```\n\n然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。","slug":"45个日常用git合代码的经典操作场景","published":1,"updated":"2022-11-04T02:50:07.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla1wfs1m0000hzld2zuj5k6i","content":"<p>git对于大家应该都不太陌生，熟练使用git已经成为程序员的一项基本技能，尽管在工作中有诸如 <code>Sourcetree</code>这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的git命令。  </p>\n<p>下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。  </p>\n<h3 id=\"我刚才提交了什么\"><a href=\"#我刚才提交了什么\" class=\"headerlink\" title=\"我刚才提交了什么?\"></a>我刚才提交了什么?</h3><p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git show<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git log <span class=\"token operator\">-</span>n1 <span class=\"token operator\">-</span>p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我的提交信息-commit-message-写错了\"><a href=\"#我的提交信息-commit-message-写错了\" class=\"headerlink\" title=\"我的提交信息(commit message)写错了\"></a>我的提交信息(commit message)写错了</h3><p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">--</span>amend <span class=\"token operator\">--</span>only<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">--</span>amend <span class=\"token operator\">--</span>only <span class=\"token operator\">-</span>m <span class=\"token string\">'xxxxxxx'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p>\n<h3 id=\"我提交-commit-里的用户名和邮箱不对\"><a href=\"#我提交-commit-里的用户名和邮箱不对\" class=\"headerlink\" title=\"我提交(commit)里的用户名和邮箱不对\"></a>我提交(commit)里的用户名和邮箱不对</h3><p>如果这只是单个提交(commit)，修改它：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">--</span>amend <span class=\"token operator\">--</span>author <span class=\"token string\">\"New Authorname &lt;authoremail@mydomain.com>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.</p>\n<h3 id=\"我想从一个提交-commit-里移除一个文件\"><a href=\"#我想从一个提交-commit-里移除一个文件\" class=\"headerlink\" title=\"我想从一个提交(commit)里移除一个文件\"></a>我想从一个提交(commit)里移除一个文件</h3><p>通过下面的方法，从一个提交(commit)里移除一个文件:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git checkout HEAD<span class=\"token operator\">^</span> myfile\n$ git add <span class=\"token operator\">-</span><span class=\"token class-name\">A</span>\n$ git commit <span class=\"token operator\">--</span>amend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</p>\n<h3 id=\"我想删除我的的最后一次提交-commit\"><a href=\"#我想删除我的的最后一次提交-commit\" class=\"headerlink\" title=\"我想删除我的的最后一次提交(commit)\"></a>我想删除我的的最后一次提交(commit)</h3><p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset HEAD<span class=\"token operator\">^</span> <span class=\"token operator\">--</span>hard\n$ git push <span class=\"token operator\">-</span>f <span class=\"token punctuation\">[</span>remote<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>soft HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>。</p>\n<h3 id=\"删除任意提交-commit\"><a href=\"#删除任意提交-commit\" class=\"headerlink\" title=\"删除任意提交(commit)\"></a>删除任意提交(commit)</h3><p>同样的警告：不到万不得已的时候不要这么做.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git rebase <span class=\"token operator\">--</span>onto SHA1_OF_BAD_COMMIT<span class=\"token operator\">^</span> SHA1_OF_BAD_COMMIT\n$ git push <span class=\"token operator\">-</span>f <span class=\"token punctuation\">[</span>remote<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。</p>\n<h3 id=\"我尝试推一个修正后的提交-amended-commit-到远程，但是报错：\"><a href=\"#我尝试推一个修正后的提交-amended-commit-到远程，但是报错：\" class=\"headerlink\" title=\"我尝试推一个修正后的提交(amended commit)到远程，但是报错：\"></a>我尝试推一个修正后的提交(amended commit)到远程，但是报错：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">To</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>yourusername<span class=\"token operator\">/</span>repo<span class=\"token punctuation\">.</span>git\n<span class=\"token operator\">!</span> <span class=\"token punctuation\">[</span>rejected<span class=\"token punctuation\">]</span>        mybranch <span class=\"token operator\">-></span> mybranch <span class=\"token punctuation\">(</span>non<span class=\"token operator\">-</span>fast<span class=\"token operator\">-</span>forward<span class=\"token punctuation\">)</span>\nerror<span class=\"token operator\">:</span> failed <span class=\"token keyword\">to</span> <span class=\"token namespace\">push</span> some refs <span class=\"token keyword\">to</span> <span class=\"token string\">'https://github.com/tanay1337/webmaker.org.git'</span>\nhint<span class=\"token operator\">:</span> <span class=\"token class-name\">Updates</span> were rejected because the tip of your current branch is behind\nhint<span class=\"token operator\">:</span> its remote <span class=\"token class-name\"><span class=\"token namespace\">counterpart<span class=\"token punctuation\">.</span></span> Integrate</span> the remote changes <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>\nhint<span class=\"token operator\">:</span> <span class=\"token string\">'git pull ...'</span><span class=\"token punctuation\">)</span> before pushing again<span class=\"token punctuation\">.</span>\nhint<span class=\"token operator\">:</span> <span class=\"token class-name\">See</span> the <span class=\"token string\">'Note about fast-forwards'</span> in <span class=\"token string\">'git push --help'</span> <span class=\"token keyword\">for</span> details<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。注意 – 总是 确保你指明一个分支!</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git push origin mybranch <span class=\"token operator\">-</span>f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p>\n<h3 id=\"我意外的做了一次硬重置-hard-reset-，我想找回我的内容\"><a href=\"#我意外的做了一次硬重置-hard-reset-，我想找回我的内容\" class=\"headerlink\" title=\"我意外的做了一次硬重置(hard reset)，我想找回我的内容\"></a>我意外的做了一次硬重置(hard reset)，我想找回我的内容</h3><p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard SHA1234<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样就完成了。</p>\n<h2 id=\"暂存-Staging\"><a href=\"#暂存-Staging\" class=\"headerlink\" title=\"暂存(Staging)\"></a>暂存(Staging)</h2><h3 id=\"我需要把暂存的内容添加到上一次的提交-commit\"><a href=\"#我需要把暂存的内容添加到上一次的提交-commit\" class=\"headerlink\" title=\"我需要把暂存的内容添加到上一次的提交(commit)\"></a>我需要把暂存的内容添加到上一次的提交(commit)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ git commit <span class=\"token operator\">--</span>amend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想要暂存一个新文件的一部分，而不是这个文件的全部\"><a href=\"#我想要暂存一个新文件的一部分，而不是这个文件的全部\" class=\"headerlink\" title=\"我想要暂存一个新文件的一部分，而不是这个文件的全部\"></a>我想要暂存一个新文件的一部分，而不是这个文件的全部</h3><p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git add <span class=\"token operator\">--</span>patch filename<span class=\"token punctuation\">.</span>x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git add <span class=\"token operator\">-</span><span class=\"token class-name\">N</span> filename<span class=\"token punctuation\">.</span>x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p>\n<h3 id=\"我想把在一个文件里的变化-changes-加到两个提交-commit-里\"><a href=\"#我想把在一个文件里的变化-changes-加到两个提交-commit-里\" class=\"headerlink\" title=\"我想把在一个文件里的变化(changes)加到两个提交(commit)里\"></a>我想把在一个文件里的变化(changes)加到两个提交(commit)里</h3><p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p>\n<h3 id=\"我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\"><a href=\"#我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\" class=\"headerlink\" title=\"我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\"></a>我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3><p>多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"WIP\"</span>\n$ git add <span class=\"token punctuation\">.</span>\n$ git stash\n$ git reset HEAD<span class=\"token operator\">^</span>\n$ git stash pop <span class=\"token operator\">--</span>index <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意1: 这里使用<code>pop</code>仅仅是因为想尽可能保持幂等。注意2: 假如你不加上<code>--index</code>你会把暂存的文件标记为为存储。</p>\n<h2 id=\"未暂存-Unstaged-的内容\"><a href=\"#未暂存-Unstaged-的内容\" class=\"headerlink\" title=\"未暂存(Unstaged)的内容\"></a>未暂存(Unstaged)的内容</h2><h3 id=\"我想把未暂存的内容移动到一个新分支\"><a href=\"#我想把未暂存的内容移动到一个新分支\" class=\"headerlink\" title=\"我想把未暂存的内容移动到一个新分支\"></a>我想把未暂存的内容移动到一个新分支</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git checkout <span class=\"token operator\">-</span>b my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想把未暂存的内容移动到另一个已存在的分支\"><a href=\"#我想把未暂存的内容移动到另一个已存在的分支\" class=\"headerlink\" title=\"我想把未暂存的内容移动到另一个已存在的分支\"></a>我想把未暂存的内容移动到另一个已存在的分支</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash\n$ git checkout my<span class=\"token operator\">-</span>branch\n$ git stash pop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"我想丢弃本地未提交的变化-uncommitted-changes\"><a href=\"#我想丢弃本地未提交的变化-uncommitted-changes\" class=\"headerlink\" title=\"我想丢弃本地未提交的变化(uncommitted changes)\"></a>我想丢弃本地未提交的变化(uncommitted changes)</h3><p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"># one commit\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">^</span>\n# two commits\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">^</span><span class=\"token operator\">^</span>\n# four commits\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">~</span><span class=\"token number\">4</span>\n# or\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重置某个特殊的文件, 你可以用文件名做为参数:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想丢弃某些未暂存的内容\"><a href=\"#我想丢弃某些未暂存的内容\" class=\"headerlink\" title=\"我想丢弃某些未暂存的内容\"></a>我想丢弃某些未暂存的内容</h3><p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p>\n<p>签出(checkout)不需要的内容，保留需要的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git checkout <span class=\"token operator\">-</span>p\n# <span class=\"token class-name\">Answer</span> y <span class=\"token keyword\">to</span> <span class=\"token namespace\">all</span> of the snippets you want <span class=\"token keyword\">to</span> <span class=\"token namespace\">drop</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>另外一个方法是使用 <code>stash</code>， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash <span class=\"token operator\">-</span>p\n# <span class=\"token class-name\">Select</span> all of the snippets you want <span class=\"token keyword\">to</span> <span class=\"token namespace\">save</span>\n$ git reset <span class=\"token operator\">--</span>hard\n$ git stash pop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>或者, stash 你不需要的部分, 然后stash drop。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash <span class=\"token operator\">-</span>p\n# <span class=\"token class-name\">Select</span> all of the snippets you don't want <span class=\"token keyword\">to</span> <span class=\"token namespace\">save</span>\n$ git stash drop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"分支-Branches\"><a href=\"#分支-Branches\" class=\"headerlink\" title=\"分支(Branches)\"></a>分支(Branches)</h2><h3 id=\"我从错误的分支拉取了内容，或把内容拉取到了错误的分支\"><a href=\"#我从错误的分支拉取了内容，或把内容拉取到了错误的分支\" class=\"headerlink\" title=\"我从错误的分支拉取了内容，或把内容拉取到了错误的分支\"></a>我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3><p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前HEAD的指向。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog\nab7555f HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> pull origin wrong<span class=\"token operator\">-</span>branch<span class=\"token operator\">:</span> <span class=\"token class-name\">Fast</span><span class=\"token operator\">-</span>forward\nc5bc55a HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> checkout message goes here<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>重置分支到你所需的提交(desired commit):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset <span class=\"token operator\">--</span>hard c5bc55a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>完成。</p>\n<h3 id=\"我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致\"><a href=\"#我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致\" class=\"headerlink\" title=\"我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致\"></a>我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3><p>先确认你没有推(push)你的内容到远程。</p>\n<p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git status\n# <span class=\"token class-name\">On</span> branch my<span class=\"token operator\">-</span>branch\n# <span class=\"token class-name\">Your</span> branch is ahead of <span class=\"token string\">'origin/my-branch'</span> by <span class=\"token number\">2</span> commits<span class=\"token punctuation\">.</span>\n#   <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git push\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">publish</span> your local commits<span class=\"token punctuation\">)</span>\n#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一种方法是:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard origin<span class=\"token operator\">/</span>my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我需要提交到一个新分支，但错误的提交到了main\"><a href=\"#我需要提交到一个新分支，但错误的提交到了main\" class=\"headerlink\" title=\"我需要提交到一个新分支，但错误的提交到了main\"></a>我需要提交到一个新分支，但错误的提交到了main</h3><p>在main下创建一个新分支，不切换到新分支,仍在main下:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git branch my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>把main分支重置到前一个提交:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">^</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p>\n<p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的hash(<code>git log</code> 能够完成)， 然后重置到这个hash。使用<code>git push</code> 同步内容到远程。</p>\n<p>例如, main分支想重置到的提交的hash为<code>a13b85e</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard a13b85e\nHEAD is now at a13b85e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>签出(checkout)刚才新建的分支继续工作:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想保留来自另外一个ref-ish的整个文件\"><a href=\"#我想保留来自另外一个ref-ish的整个文件\" class=\"headerlink\" title=\"我想保留来自另外一个ref-ish的整个文件\"></a>我想保留来自另外一个ref-ish的整个文件</h3><p>假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:微信搜索公众号：Java后端编程，回复：java 领取资料 。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>solution<span class=\"token punctuation\">)</span>$ git add <span class=\"token operator\">-</span><span class=\"token class-name\">A</span> <span class=\"token operator\">&amp;&amp;</span> git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"Adding all changes from this spike into one big commit.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p>\n<p>假设你有:</p>\n<ul>\n<li> 分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li>\n<li> 分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li>\n</ul>\n<p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>develop<span class=\"token punctuation\">)</span>$ git checkout solution <span class=\"token operator\">--</span> file1<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"># <span class=\"token class-name\">On</span> branch develop\n# <span class=\"token class-name\">Your</span> branch is up<span class=\"token operator\">-</span><span class=\"token keyword\">to</span><span class=\"token operator\">-</span>date <span class=\"token keyword\">with</span> <span class=\"token string\">'origin/develop'</span><span class=\"token punctuation\">.</span>\n# <span class=\"token class-name\">Changes</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">be</span> committed<span class=\"token operator\">:</span>\n#  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file>...\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">unstage</span><span class=\"token punctuation\">)</span>\n#\n#        modified<span class=\"token operator\">:</span>   file1<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后, 正常提交。</p>\n<p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.</p>\n<h3 id=\"我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里\"><a href=\"#我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里\" class=\"headerlink\" title=\"我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里\"></a>我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3><p>假设你有一个<code>main</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git log\n\ncommit e3851e817c451cc36f2e6f3049db528415e3c114\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Alex</span> <span class=\"token class-name\">Lee</span> <span class=\"token operator\">&lt;</span>alexlee<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">39</span><span class=\"token operator\">:</span><span class=\"token number\">27</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">Bug</span> #<span class=\"token number\">21</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Added</span> CSRF protection\n\ncommit <span class=\"token number\">5</span>ea51731d150f7ddc4a365437931cd8be3bf3131\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Alex</span> <span class=\"token class-name\">Lee</span> <span class=\"token operator\">&lt;</span>alexlee<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">39</span><span class=\"token operator\">:</span><span class=\"token number\">12</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">Bug</span> #<span class=\"token number\">14</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Fixed</span> spacing on title\n\ncommit a13b85e984171c6e2a1729bb061994525f626d14\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Aki</span> <span class=\"token class-name\">Rose</span> <span class=\"token operator\">&lt;</span>akirose<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">21</span> <span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token operator\">:</span><span class=\"token number\">48</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">First</span> commit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>让我们用提交hash(commit hash)标记bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p>\n<p>首先, 我们把<code>main</code>分支重置到正确的提交(<code>a13b85e</code>):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard a13b85e\nHEAD is now at a13b85e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>现在, 我们对 bug #21 创建一个新的分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b <span class=\"token number\">21</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>接着, 我们用 cherry-pick 把对bug #21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>$ git cherry<span class=\"token operator\">-</span>pick e3851e8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.</p>\n<p>再者， 我们为bug #14 创建一个新的分支, 也基于<code>main</code>分支</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>$ git checkout main\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b <span class=\"token number\">14</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>$ git cherry<span class=\"token operator\">-</span>pick <span class=\"token number\">5</span>ea5173<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想删除上游-upstream-分支被删除了的本地分支\"><a href=\"#我想删除上游-upstream-分支被删除了的本地分支\" class=\"headerlink\" title=\"我想删除上游(upstream)分支被删除了的本地分支\"></a>我想删除上游(upstream)分支被删除了的本地分支</h3><p>一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（[IDEA 中玩转 Git][IDEA _ Git]）。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git fetch <span class=\"token operator\">-</span>p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我不小心删除了我的分支\"><a href=\"#我不小心删除了我的分支\" class=\"headerlink\" title=\"我不小心删除了我的分支\"></a>我不小心删除了我的分支</h3><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b my<span class=\"token operator\">-</span>branch\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git branch\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ touch foo<span class=\"token punctuation\">.</span>txt\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ ls\nREADME<span class=\"token punctuation\">.</span>md foo<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加文件并做一次提交</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git add <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git commit <span class=\"token operator\">-</span>m <span class=\"token string\">'foo.txt added'</span>\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ foo<span class=\"token punctuation\">.</span>txt added\n <span class=\"token number\">1</span> files changed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token function\">insertions</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\n create mode <span class=\"token number\">100644</span> foo<span class=\"token punctuation\">.</span>txt\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git log\n\ncommit <span class=\"token number\">4e3</span>cd85a670ced7cc17a2b5d8d3d809ac88d5012\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> siemiatj <span class=\"token operator\">&lt;</span>siemiatj<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Wed</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">30</span> <span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">34</span><span class=\"token operator\">:</span><span class=\"token number\">10</span> <span class=\"token number\">2014</span> <span class=\"token operator\">+</span><span class=\"token number\">0200</span>\n\n    foo<span class=\"token punctuation\">.</span>txt added\n\ncommit <span class=\"token number\">69204</span>cdf0acbab201619d95ad8295928e7f411d5\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Kate</span> <span class=\"token class-name\">Hudson</span> <span class=\"token operator\">&lt;</span>katehudson<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">29</span> <span class=\"token number\">13</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">46</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">Fixes</span> #<span class=\"token number\">6</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Force</span> pushing after amending commits<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在我们切回到主(main)分支，‘不小心的’删除<code>my-branch</code>分支</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git checkout main\n<span class=\"token class-name\">Switched</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">branch</span> <span class=\"token string\">'main'</span>\n<span class=\"token class-name\">Your</span> branch is up<span class=\"token operator\">-</span><span class=\"token keyword\">to</span><span class=\"token operator\">-</span>date <span class=\"token keyword\">with</span> <span class=\"token string\">'origin/main'</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git branch <span class=\"token operator\">-</span><span class=\"token class-name\">D</span> my<span class=\"token operator\">-</span>branch\n<span class=\"token class-name\">Deleted</span> branch my<span class=\"token operator\">-</span>branch <span class=\"token punctuation\">(</span>was <span class=\"token number\">4e3</span>cd85<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ echo oh noes<span class=\"token punctuation\">,</span> deleted my branch<span class=\"token operator\">!</span>\noh noes<span class=\"token punctuation\">,</span> deleted my branch<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog\n<span class=\"token number\">69204</span>cd HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from my<span class=\"token operator\">-</span>branch <span class=\"token keyword\">to</span> <span class=\"token namespace\">main</span>\n<span class=\"token number\">4e3</span>cd85 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> commit<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">.</span>txt added\n<span class=\"token number\">69204</span>cd HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from main <span class=\"token keyword\">to</span> <span class=\"token namespace\">my</span><span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b my<span class=\"token operator\">-</span>branch<span class=\"token operator\">-</span>help\n<span class=\"token class-name\">Switched</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">a</span> <span class=\"token keyword\">new</span> branch <span class=\"token string\">'my-branch-help'</span>\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">-</span>help<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard <span class=\"token number\">4e3</span>cd85\nHEAD is now at <span class=\"token number\">4e3</span>cd85 foo<span class=\"token punctuation\">.</span>txt added\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">-</span>help<span class=\"token punctuation\">)</span>$ ls\nREADME<span class=\"token punctuation\">.</span>md foo<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看! 我们把删除的文件找回来了。Git的 <code>reflog</code> 在rebasing出错的时候也是同样有用的。</p>\n<h3 id=\"我想删除一个分支\"><a href=\"#我想删除一个分支\" class=\"headerlink\" title=\"我想删除一个分支\"></a>我想删除一个分支</h3><p>删除一个远程分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git push origin <span class=\"token operator\">--</span>delete my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你也可以:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git push origin <span class=\"token operator\">:</span>my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除一个本地分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git branch <span class=\"token operator\">-</span><span class=\"token class-name\">D</span> my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想从别人正在工作的远程分支签出-checkout-一个分支\"><a href=\"#我想从别人正在工作的远程分支签出-checkout-一个分支\" class=\"headerlink\" title=\"我想从别人正在工作的远程分支签出(checkout)一个分支\"></a>我想从别人正在工作的远程分支签出(checkout)一个分支</h3><p>首先, 从远程拉取(fetch) 所有分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git fetch <span class=\"token operator\">--</span>all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">--</span>track origin<span class=\"token operator\">/</span>daves\n<span class=\"token class-name\">Branch</span> daves set up <span class=\"token keyword\">to</span> <span class=\"token namespace\">track</span> remote branch daves from <span class=\"token class-name\"><span class=\"token namespace\">origin<span class=\"token punctuation\">.</span></span>\nSwitched</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">a</span> <span class=\"token keyword\">new</span> branch <span class=\"token string\">'daves'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p>\n<p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p>\n<h2 id=\"Rebasing-和合并-Merging\"><a href=\"#Rebasing-和合并-Merging\" class=\"headerlink\" title=\"Rebasing 和合并(Merging)\"></a>Rebasing 和合并(Merging)</h2><h3 id=\"我想撤销rebase-merge\"><a href=\"#我想撤销rebase-merge\" class=\"headerlink\" title=\"我想撤销rebase/merge\"></a>我想撤销rebase/merge</h3><p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard ORIG_HEAD<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我已经rebase过-但是我不想强推-force-push\"><a href=\"#我已经rebase过-但是我不想强推-force-push\" class=\"headerlink\" title=\"我已经rebase过, 但是我不想强推(force push)\"></a>我已经rebase过, 但是我不想强推(force push)</h3><p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout my<span class=\"token operator\">-</span>branch\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i main\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git checkout main\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git merge <span class=\"token operator\">--</span>ff<span class=\"token operator\">-</span>only my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"我需要组合-combine-几个提交-commit\"><a href=\"#我需要组合-combine-几个提交-commit\" class=\"headerlink\" title=\"我需要组合(combine)几个提交(commit)\"></a>我需要组合(combine)几个提交(commit)</h3><p>假设你的工作分支将会做对于 <code>main</code> 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>soft main\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git commit <span class=\"token operator\">-</span>am <span class=\"token string\">\"New awesome feature\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行rebase， 组合最近3次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i HEAD<span class=\"token operator\">~</span><span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pick a9c8a1d <span class=\"token class-name\">Some</span> refactoring\npick <span class=\"token number\">01</span>b2fd8 <span class=\"token class-name\">New</span> awesome feature\npick b729ad5 fixup\npick e3851e8 another fix\n\n# <span class=\"token class-name\">Rebase</span> <span class=\"token number\">8074d</span><span class=\"token number\">12.</span><span class=\"token punctuation\">.</span>b729ad5 onto <span class=\"token number\">8074d</span><span class=\"token number\">12</span>\n#\n# <span class=\"token class-name\">Commands</span><span class=\"token operator\">:</span>\n#  p<span class=\"token punctuation\">,</span> pick <span class=\"token operator\">=</span> use commit\n#  r<span class=\"token punctuation\">,</span> reword <span class=\"token operator\">=</span> use commit<span class=\"token punctuation\">,</span> but edit the commit message\n#  e<span class=\"token punctuation\">,</span> edit <span class=\"token operator\">=</span> use commit<span class=\"token punctuation\">,</span> but stop <span class=\"token keyword\">for</span> amending\n#  s<span class=\"token punctuation\">,</span> squash <span class=\"token operator\">=</span> use commit<span class=\"token punctuation\">,</span> but meld into previous commit\n#  f<span class=\"token punctuation\">,</span> fixup <span class=\"token operator\">=</span> like <span class=\"token string\">\"squash\"</span><span class=\"token punctuation\">,</span> but discard <span class=\"token keyword\">this</span> commit's log message\n#  x<span class=\"token punctuation\">,</span> exec <span class=\"token operator\">=</span> run command <span class=\"token punctuation\">(</span>the rest of the line<span class=\"token punctuation\">)</span> using shell\n#\n# <span class=\"token class-name\">These</span> lines can be re<span class=\"token operator\">-</span>ordered<span class=\"token punctuation\">;</span> they are executed from top <span class=\"token keyword\">to</span> <span class=\"token namespace\">bottom<span class=\"token punctuation\">.</span></span>\n#\n# <span class=\"token class-name\">If</span> you remove a line here THAT COMMIT WILL BE LOST<span class=\"token punctuation\">.</span>\n#\n# <span class=\"token class-name\">However</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span> you remove everything<span class=\"token punctuation\">,</span> the rebase will be aborted<span class=\"token punctuation\">.</span>\n#\n# <span class=\"token class-name\">Note</span> that empty commits are commented out<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p>\n<p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p>\n<p>例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pick a9c8a1d <span class=\"token class-name\">Some</span> refactoring\npick <span class=\"token number\">01</span>b2fd8 <span class=\"token class-name\">New</span> awesome feature\nf b729ad5 fixup\nf e3851e8 another fix<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pick a9c8a1d <span class=\"token class-name\">Some</span> refactoring\npick <span class=\"token number\">01</span>b2fd8 <span class=\"token class-name\">New</span> awesome feature\ns b729ad5 fixup\ns e3851e8 another fix<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Newer</span><span class=\"token punctuation\">,</span> awesomer features\n\n# <span class=\"token class-name\">Please</span> enter the commit message <span class=\"token keyword\">for</span> your <span class=\"token class-name\"><span class=\"token namespace\">changes<span class=\"token punctuation\">.</span></span> Lines</span> starting\n# <span class=\"token keyword\">with</span> <span class=\"token string\">'#'</span> will be ignored<span class=\"token punctuation\">,</span> and an empty message aborts the commit<span class=\"token punctuation\">.</span>\n# rebase in progress<span class=\"token punctuation\">;</span> onto <span class=\"token number\">8074d</span><span class=\"token number\">12</span>\n# <span class=\"token class-name\">You</span> are currently editing a commit <span class=\"token keyword\">while</span> rebasing branch <span class=\"token string\">'main'</span> on <span class=\"token string\">'8074d12'</span><span class=\"token punctuation\">.</span>\n#\n# <span class=\"token class-name\">Changes</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">be</span> committed<span class=\"token operator\">:</span>\n#\tmodified<span class=\"token operator\">:</span>   README<span class=\"token punctuation\">.</span>md\n#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果成功了, 你应该看到类似下面的内容:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ <span class=\"token class-name\">Successfully</span> rebased and updated refs<span class=\"token operator\">/</span>heads<span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"安全合并-merging-策略\"><a href=\"#安全合并-merging-策略\" class=\"headerlink\" title=\"安全合并(merging)策略\"></a>安全合并(merging)策略</h4><p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。<code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多Git资料，参见[IDEA 中如何完成 Git 版本回退？][IDEA _ Git 1]）。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git merge <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>ff <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>commit my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"我需要将一个分支合并成一个提交-commit\"><a href=\"#我需要将一个分支合并成一个提交-commit\" class=\"headerlink\" title=\"我需要将一个分支合并成一个提交(commit)\"></a>我需要将一个分支合并成一个提交(commit)</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git merge <span class=\"token operator\">--</span>squash my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"我只想组合-combine-未推的提交-unpushed-commit\"><a href=\"#我只想组合-combine-未推的提交-unpushed-commit\" class=\"headerlink\" title=\"我只想组合(combine)未推的提交(unpushed commit)\"></a>我只想组合(combine)未推的提交(unpushed commit)</h4><p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。</p>\n<h3 id=\"检查是否分支上的所有提交-commit-都合并-merge-过了\"><a href=\"#检查是否分支上的所有提交-commit-都合并-merge-过了\" class=\"headerlink\" title=\"检查是否分支上的所有提交(commit)都合并(merge)过了\"></a>检查是否分支上的所有提交(commit)都合并(merge)过了</h3><p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git log <span class=\"token operator\">--</span>graph <span class=\"token operator\">--</span>left<span class=\"token operator\">-</span>right <span class=\"token operator\">--</span>cherry<span class=\"token operator\">-</span>pick <span class=\"token operator\">--</span>oneline HEAD<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>feature<span class=\"token operator\">/</span><span class=\"token number\">120</span><span class=\"token operator\">-</span>on<span class=\"token operator\">-</span>scroll<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git log main <span class=\"token operator\">^</span>feature<span class=\"token operator\">/</span><span class=\"token number\">120</span><span class=\"token operator\">-</span>on<span class=\"token operator\">-</span>scroll <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>merges<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"交互式rebase-interactive-rebase-可能出现的问题\"><a href=\"#交互式rebase-interactive-rebase-可能出现的问题\" class=\"headerlink\" title=\"交互式rebase(interactive rebase)可能出现的问题\"></a>交互式rebase(interactive rebase)可能出现的问题</h3><h4 id=\"这个rebase-编辑屏幕出现’noop’\"><a href=\"#这个rebase-编辑屏幕出现’noop’\" class=\"headerlink\" title=\"这个rebase 编辑屏幕出现’noop’\"></a>这个rebase 编辑屏幕出现’noop’</h4><p>如果你看到的是这样:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">noop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:</p>\n<ul>\n<li> 检查确保主(main)分支没有问题</li>\n<li> rebase <code>HEAD~2</code> 或者更早</li>\n</ul>\n<h4 id=\"有冲突的情况\"><a href=\"#有冲突的情况\" class=\"headerlink\" title=\"有冲突的情况\"></a>有冲突的情况</h4><p>如果你不能成功的完成rebase, 你可能必须要解决冲突。</p>\n<p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git status\n<span class=\"token class-name\">On</span> branch my<span class=\"token operator\">-</span>branch\n<span class=\"token class-name\">Changes</span> not staged <span class=\"token keyword\">for</span> commit<span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">update</span> what will be committed<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout -- &lt;file>...\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">discard</span> changes in working directory<span class=\"token punctuation\">)</span>\n\n modified<span class=\"token operator\">:</span>   README<span class=\"token punctuation\">.</span>md<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这个例子里面, <code>README.md</code> 有冲突。打开这个文件找到类似下面的内容:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;</span> HEAD\n   some code\n   <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n   some code\n   <span class=\"token operator\">>>></span><span class=\"token operator\">>>></span><span class=\"token operator\">></span> <span class=\"token keyword\">new</span><span class=\"token operator\">-</span>commit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p>\n<p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ git mergetool <span class=\"token operator\">-</span>t opendiff<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续rebase。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git add README<span class=\"token punctuation\">.</span>md\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">--</span><span class=\"token keyword\">continue</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p>\n<p>任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">--</span>abort<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Stash\"><a href=\"#Stash\" class=\"headerlink\" title=\"Stash\"></a>Stash</h2><h3 id=\"暂存所有改动\"><a href=\"#暂存所有改动\" class=\"headerlink\" title=\"暂存所有改动\"></a>暂存所有改动</h3><p>暂存你工作目录下的所有改动</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你可以使用<code>-u</code>来排除一些文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash <span class=\"token operator\">-</span>u<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"暂存指定文件\"><a href=\"#暂存指定文件\" class=\"headerlink\" title=\"暂存指定文件\"></a>暂存指定文件</h3><p>假设你只想暂存某一个文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash push working<span class=\"token operator\">-</span>directory<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span>filename<span class=\"token punctuation\">.</span>ext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设你想暂存多个文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash push working<span class=\"token operator\">-</span>directory<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span>filename1<span class=\"token punctuation\">.</span>ext working<span class=\"token operator\">-</span>directory<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span>filename2<span class=\"token punctuation\">.</span>ext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"暂存时记录消息\"><a href=\"#暂存时记录消息\" class=\"headerlink\" title=\"暂存时记录消息\"></a>暂存时记录消息</h3><p>这样你可以在<code>list</code>时看到它</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash save <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>message<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash push <span class=\"token operator\">-</span>m <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>message<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"使用某个指定暂存\"><a href=\"#使用某个指定暂存\" class=\"headerlink\" title=\"使用某个指定暂存\"></a>使用某个指定暂存</h3><p>首先你可以查看你的<code>stash</code>记录</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后你可以<code>apply</code>某个<code>stash</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash apply <span class=\"token string\">\"stash@&#123;n&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此处， ‘n’是<code>stash</code>在栈中的位置，最上层的<code>stash</code>会是0</p>\n<p>除此之外，也可以使用时间标记(假如你能记得的话)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash apply <span class=\"token string\">\"stash@&#123;2.hours.ago&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"暂存时保留未暂存的内容\"><a href=\"#暂存时保留未暂存的内容\" class=\"headerlink\" title=\"暂存时保留未暂存的内容\"></a>暂存时保留未暂存的内容</h3><p>你需要手动create一个<code>stash commit</code>， 然后使用<code>git stash store</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash create\n$ git stash store <span class=\"token operator\">-</span>m <span class=\"token string\">\"commit-message\"</span> CREATED_SHA1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"杂项-Miscellaneous-Objects\"><a href=\"#杂项-Miscellaneous-Objects\" class=\"headerlink\" title=\"杂项(Miscellaneous Objects)\"></a>杂项(Miscellaneous Objects)</h2><h3 id=\"克隆所有子模块\"><a href=\"#克隆所有子模块\" class=\"headerlink\" title=\"克隆所有子模块\"></a>克隆所有子模块</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git clone <span class=\"token operator\">--</span>recursive git<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>foo<span class=\"token operator\">/</span>bar<span class=\"token punctuation\">.</span>git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果已经克隆了:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git submodule update <span class=\"token operator\">--</span>init <span class=\"token operator\">--</span>recursive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"删除标签-tag\"><a href=\"#删除标签-tag\" class=\"headerlink\" title=\"删除标签(tag)\"></a>删除标签(tag)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git tag <span class=\"token operator\">-</span>d <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>tag_name<span class=\"token punctuation\">></span></span>\n$ git push <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>remote<span class=\"token punctuation\">></span></span> <span class=\"token operator\">:</span>refs<span class=\"token operator\">/</span>tags<span class=\"token operator\">/</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>tag_name<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"恢复已删除标签-tag\"><a href=\"#恢复已删除标签-tag\" class=\"headerlink\" title=\"恢复已删除标签(tag)\"></a>恢复已删除标签(tag)</h3><p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git fsck <span class=\"token operator\">--</span>unreachable <span class=\"token operator\">|</span> grep tag<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>记下这个标签(tag)的hash，然后用Git的 update-ref</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git update<span class=\"token operator\">-</span>ref refs<span class=\"token operator\">/</span>tags<span class=\"token operator\">/</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>tag_name<span class=\"token punctuation\">></span></span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>hash<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这时你的标签(tag)应该已经恢复了。</p>\n<h3 id=\"已删除补丁-patch\"><a href=\"#已删除补丁-patch\" class=\"headerlink\" title=\"已删除补丁(patch)\"></a>已删除补丁(patch)</h3><p>如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p>\n<p>做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。</p>\n<h2 id=\"跟踪文件-Tracking-Files\"><a href=\"#跟踪文件-Tracking-Files\" class=\"headerlink\" title=\"跟踪文件(Tracking Files)\"></a>跟踪文件(Tracking Files)</h2><h3 id=\"我只想改变一个文件名字的大小写，而不修改内容\"><a href=\"#我只想改变一个文件名字的大小写，而不修改内容\" class=\"headerlink\" title=\"我只想改变一个文件名字的大小写，而不修改内容\"></a>我只想改变一个文件名字的大小写，而不修改内容</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git mv <span class=\"token operator\">--</span>force myfile <span class=\"token class-name\">MyFile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想从Git删除一个文件，但保留该文件\"><a href=\"#我想从Git删除一个文件，但保留该文件\" class=\"headerlink\" title=\"我想从Git删除一个文件，但保留该文件\"></a>我想从Git删除一个文件，但保留该文件</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git rm <span class=\"token operator\">--</span>cached log<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"配置-Configuration\"><a href=\"#配置-Configuration\" class=\"headerlink\" title=\"配置(Configuration)\"></a>配置(Configuration)</h2><h3 id=\"我想给一些Git命令添加别名-alias\"><a href=\"#我想给一些Git命令添加别名-alias\" class=\"headerlink\" title=\"我想给一些Git命令添加别名(alias)\"></a>我想给一些Git命令添加别名(alias)</h3><p>在 OS X 和 Linux 下, 你的 Git的配置文件储存在 <code>~/.gitconfig</code>。我在<code>[alias]</code> 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span>alias<span class=\"token punctuation\">]</span>\n    a <span class=\"token operator\">=</span> add\n    amend <span class=\"token operator\">=</span> commit <span class=\"token operator\">--</span>amend\n    c <span class=\"token operator\">=</span> commit\n    ca <span class=\"token operator\">=</span> commit <span class=\"token operator\">--</span>amend\n    ci <span class=\"token operator\">=</span> commit <span class=\"token operator\">-</span>a\n    co <span class=\"token operator\">=</span> checkout\n    d <span class=\"token operator\">=</span> diff\n    dc <span class=\"token operator\">=</span> diff <span class=\"token operator\">--</span>changed\n    ds <span class=\"token operator\">=</span> diff <span class=\"token operator\">--</span>staged\n    f <span class=\"token operator\">=</span> fetch\n    loll <span class=\"token operator\">=</span> log <span class=\"token operator\">--</span>graph <span class=\"token operator\">--</span>decorate <span class=\"token operator\">--</span>pretty<span class=\"token operator\">=</span>oneline <span class=\"token operator\">--</span>abbrev<span class=\"token operator\">-</span>commit\n    m <span class=\"token operator\">=</span> merge\n    one <span class=\"token operator\">=</span> log <span class=\"token operator\">--</span>pretty<span class=\"token operator\">=</span>oneline\n    outstanding <span class=\"token operator\">=</span> rebase <span class=\"token operator\">-</span>i @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span>\n    s <span class=\"token operator\">=</span> status\n    unpushed <span class=\"token operator\">=</span> log @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span>\n    wc <span class=\"token operator\">=</span> whatchanged\n    wip <span class=\"token operator\">=</span> rebase <span class=\"token operator\">-</span>i @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span>\n    zap <span class=\"token operator\">=</span> fetch <span class=\"token operator\">-</span>p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"我想缓存一个仓库-repository-的用户名和密码\"><a href=\"#我想缓存一个仓库-repository-的用户名和密码\" class=\"headerlink\" title=\"我想缓存一个仓库(repository)的用户名和密码\"></a>我想缓存一个仓库(repository)的用户名和密码</h3><p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git config <span class=\"token operator\">--</span>global credential<span class=\"token punctuation\">.</span>helper cache\n# <span class=\"token class-name\">Set</span> git <span class=\"token keyword\">to</span> <span class=\"token namespace\">use</span> the credential memory cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git config <span class=\"token operator\">--</span>global credential<span class=\"token punctuation\">.</span>helper <span class=\"token string\">'cache --timeout=3600'</span>\n# <span class=\"token class-name\">Set</span> the cache <span class=\"token keyword\">to</span> <span class=\"token namespace\">timeout</span> after <span class=\"token number\">1</span> hour <span class=\"token punctuation\">(</span>setting is in seconds<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"我不知道我做错了些什么\"><a href=\"#我不知道我做错了些什么\" class=\"headerlink\" title=\"我不知道我做错了些什么\"></a>我不知道我做错了些什么</h3><p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p>\n<p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog\n<span class=\"token number\">0</span>a2e358 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> reset<span class=\"token operator\">:</span> moving <span class=\"token keyword\">to</span> HEAD<span class=\"token operator\">~</span><span class=\"token number\">2</span>\n<span class=\"token number\">0254</span>ea7 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from <span class=\"token number\">2.2</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">main</span>\nc10f740 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from main <span class=\"token keyword\">to</span> <span class=\"token number\">2.2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@&#123;0&#125;</code>标识.</p>\n<p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset <span class=\"token operator\">--</span>hard <span class=\"token number\">0254</span>ea7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>git对于大家应该都不太陌生，熟练使用git已经成为程序员的一项基本技能，尽管在工作中有诸如 <code>Sourcetree</code>这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的git命令。  </p>\n<p>下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。  </p>\n<h3 id=\"我刚才提交了什么\"><a href=\"#我刚才提交了什么\" class=\"headerlink\" title=\"我刚才提交了什么?\"></a>我刚才提交了什么?</h3><p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git show<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git log <span class=\"token operator\">-</span>n1 <span class=\"token operator\">-</span>p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我的提交信息-commit-message-写错了\"><a href=\"#我的提交信息-commit-message-写错了\" class=\"headerlink\" title=\"我的提交信息(commit message)写错了\"></a>我的提交信息(commit message)写错了</h3><p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">--</span>amend <span class=\"token operator\">--</span>only<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">--</span>amend <span class=\"token operator\">--</span>only <span class=\"token operator\">-</span>m <span class=\"token string\">'xxxxxxx'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p>\n<h3 id=\"我提交-commit-里的用户名和邮箱不对\"><a href=\"#我提交-commit-里的用户名和邮箱不对\" class=\"headerlink\" title=\"我提交(commit)里的用户名和邮箱不对\"></a>我提交(commit)里的用户名和邮箱不对</h3><p>如果这只是单个提交(commit)，修改它：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">--</span>amend <span class=\"token operator\">--</span>author <span class=\"token string\">\"New Authorname &lt;authoremail@mydomain.com>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.</p>\n<h3 id=\"我想从一个提交-commit-里移除一个文件\"><a href=\"#我想从一个提交-commit-里移除一个文件\" class=\"headerlink\" title=\"我想从一个提交(commit)里移除一个文件\"></a>我想从一个提交(commit)里移除一个文件</h3><p>通过下面的方法，从一个提交(commit)里移除一个文件:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git checkout HEAD<span class=\"token operator\">^</span> myfile\n$ git add <span class=\"token operator\">-</span><span class=\"token class-name\">A</span>\n$ git commit <span class=\"token operator\">--</span>amend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</p>\n<h3 id=\"我想删除我的的最后一次提交-commit\"><a href=\"#我想删除我的的最后一次提交-commit\" class=\"headerlink\" title=\"我想删除我的的最后一次提交(commit)\"></a>我想删除我的的最后一次提交(commit)</h3><p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset HEAD<span class=\"token operator\">^</span> <span class=\"token operator\">--</span>hard\n$ git push <span class=\"token operator\">-</span>f <span class=\"token punctuation\">[</span>remote<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>soft HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>。</p>\n<h3 id=\"删除任意提交-commit\"><a href=\"#删除任意提交-commit\" class=\"headerlink\" title=\"删除任意提交(commit)\"></a>删除任意提交(commit)</h3><p>同样的警告：不到万不得已的时候不要这么做.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git rebase <span class=\"token operator\">--</span>onto SHA1_OF_BAD_COMMIT<span class=\"token operator\">^</span> SHA1_OF_BAD_COMMIT\n$ git push <span class=\"token operator\">-</span>f <span class=\"token punctuation\">[</span>remote<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。</p>\n<h3 id=\"我尝试推一个修正后的提交-amended-commit-到远程，但是报错：\"><a href=\"#我尝试推一个修正后的提交-amended-commit-到远程，但是报错：\" class=\"headerlink\" title=\"我尝试推一个修正后的提交(amended commit)到远程，但是报错：\"></a>我尝试推一个修正后的提交(amended commit)到远程，但是报错：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">To</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>yourusername<span class=\"token operator\">/</span>repo<span class=\"token punctuation\">.</span>git\n<span class=\"token operator\">!</span> <span class=\"token punctuation\">[</span>rejected<span class=\"token punctuation\">]</span>        mybranch <span class=\"token operator\">-></span> mybranch <span class=\"token punctuation\">(</span>non<span class=\"token operator\">-</span>fast<span class=\"token operator\">-</span>forward<span class=\"token punctuation\">)</span>\nerror<span class=\"token operator\">:</span> failed <span class=\"token keyword\">to</span> <span class=\"token namespace\">push</span> some refs <span class=\"token keyword\">to</span> <span class=\"token string\">'https://github.com/tanay1337/webmaker.org.git'</span>\nhint<span class=\"token operator\">:</span> <span class=\"token class-name\">Updates</span> were rejected because the tip of your current branch is behind\nhint<span class=\"token operator\">:</span> its remote <span class=\"token class-name\"><span class=\"token namespace\">counterpart<span class=\"token punctuation\">.</span></span> Integrate</span> the remote changes <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>\nhint<span class=\"token operator\">:</span> <span class=\"token string\">'git pull ...'</span><span class=\"token punctuation\">)</span> before pushing again<span class=\"token punctuation\">.</span>\nhint<span class=\"token operator\">:</span> <span class=\"token class-name\">See</span> the <span class=\"token string\">'Note about fast-forwards'</span> in <span class=\"token string\">'git push --help'</span> <span class=\"token keyword\">for</span> details<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。注意 – 总是 确保你指明一个分支!</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git push origin mybranch <span class=\"token operator\">-</span>f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p>\n<h3 id=\"我意外的做了一次硬重置-hard-reset-，我想找回我的内容\"><a href=\"#我意外的做了一次硬重置-hard-reset-，我想找回我的内容\" class=\"headerlink\" title=\"我意外的做了一次硬重置(hard reset)，我想找回我的内容\"></a>我意外的做了一次硬重置(hard reset)，我想找回我的内容</h3><p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard SHA1234<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样就完成了。</p>\n<h2 id=\"暂存-Staging\"><a href=\"#暂存-Staging\" class=\"headerlink\" title=\"暂存(Staging)\"></a>暂存(Staging)</h2><h3 id=\"我需要把暂存的内容添加到上一次的提交-commit\"><a href=\"#我需要把暂存的内容添加到上一次的提交-commit\" class=\"headerlink\" title=\"我需要把暂存的内容添加到上一次的提交(commit)\"></a>我需要把暂存的内容添加到上一次的提交(commit)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ git commit <span class=\"token operator\">--</span>amend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想要暂存一个新文件的一部分，而不是这个文件的全部\"><a href=\"#我想要暂存一个新文件的一部分，而不是这个文件的全部\" class=\"headerlink\" title=\"我想要暂存一个新文件的一部分，而不是这个文件的全部\"></a>我想要暂存一个新文件的一部分，而不是这个文件的全部</h3><p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git add <span class=\"token operator\">--</span>patch filename<span class=\"token punctuation\">.</span>x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git add <span class=\"token operator\">-</span><span class=\"token class-name\">N</span> filename<span class=\"token punctuation\">.</span>x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p>\n<h3 id=\"我想把在一个文件里的变化-changes-加到两个提交-commit-里\"><a href=\"#我想把在一个文件里的变化-changes-加到两个提交-commit-里\" class=\"headerlink\" title=\"我想把在一个文件里的变化(changes)加到两个提交(commit)里\"></a>我想把在一个文件里的变化(changes)加到两个提交(commit)里</h3><p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p>\n<h3 id=\"我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\"><a href=\"#我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\" class=\"headerlink\" title=\"我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\"></a>我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3><p>多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"WIP\"</span>\n$ git add <span class=\"token punctuation\">.</span>\n$ git stash\n$ git reset HEAD<span class=\"token operator\">^</span>\n$ git stash pop <span class=\"token operator\">--</span>index <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意1: 这里使用<code>pop</code>仅仅是因为想尽可能保持幂等。注意2: 假如你不加上<code>--index</code>你会把暂存的文件标记为为存储。</p>\n<h2 id=\"未暂存-Unstaged-的内容\"><a href=\"#未暂存-Unstaged-的内容\" class=\"headerlink\" title=\"未暂存(Unstaged)的内容\"></a>未暂存(Unstaged)的内容</h2><h3 id=\"我想把未暂存的内容移动到一个新分支\"><a href=\"#我想把未暂存的内容移动到一个新分支\" class=\"headerlink\" title=\"我想把未暂存的内容移动到一个新分支\"></a>我想把未暂存的内容移动到一个新分支</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git checkout <span class=\"token operator\">-</span>b my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想把未暂存的内容移动到另一个已存在的分支\"><a href=\"#我想把未暂存的内容移动到另一个已存在的分支\" class=\"headerlink\" title=\"我想把未暂存的内容移动到另一个已存在的分支\"></a>我想把未暂存的内容移动到另一个已存在的分支</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash\n$ git checkout my<span class=\"token operator\">-</span>branch\n$ git stash pop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"我想丢弃本地未提交的变化-uncommitted-changes\"><a href=\"#我想丢弃本地未提交的变化-uncommitted-changes\" class=\"headerlink\" title=\"我想丢弃本地未提交的变化(uncommitted changes)\"></a>我想丢弃本地未提交的变化(uncommitted changes)</h3><p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"># one commit\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">^</span>\n# two commits\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">^</span><span class=\"token operator\">^</span>\n# four commits\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">~</span><span class=\"token number\">4</span>\n# or\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重置某个特殊的文件, 你可以用文件名做为参数:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想丢弃某些未暂存的内容\"><a href=\"#我想丢弃某些未暂存的内容\" class=\"headerlink\" title=\"我想丢弃某些未暂存的内容\"></a>我想丢弃某些未暂存的内容</h3><p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p>\n<p>签出(checkout)不需要的内容，保留需要的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git checkout <span class=\"token operator\">-</span>p\n# <span class=\"token class-name\">Answer</span> y <span class=\"token keyword\">to</span> <span class=\"token namespace\">all</span> of the snippets you want <span class=\"token keyword\">to</span> <span class=\"token namespace\">drop</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>另外一个方法是使用 <code>stash</code>， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash <span class=\"token operator\">-</span>p\n# <span class=\"token class-name\">Select</span> all of the snippets you want <span class=\"token keyword\">to</span> <span class=\"token namespace\">save</span>\n$ git reset <span class=\"token operator\">--</span>hard\n$ git stash pop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>或者, stash 你不需要的部分, 然后stash drop。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash <span class=\"token operator\">-</span>p\n# <span class=\"token class-name\">Select</span> all of the snippets you don't want <span class=\"token keyword\">to</span> <span class=\"token namespace\">save</span>\n$ git stash drop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"分支-Branches\"><a href=\"#分支-Branches\" class=\"headerlink\" title=\"分支(Branches)\"></a>分支(Branches)</h2><h3 id=\"我从错误的分支拉取了内容，或把内容拉取到了错误的分支\"><a href=\"#我从错误的分支拉取了内容，或把内容拉取到了错误的分支\" class=\"headerlink\" title=\"我从错误的分支拉取了内容，或把内容拉取到了错误的分支\"></a>我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3><p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前HEAD的指向。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog\nab7555f HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> pull origin wrong<span class=\"token operator\">-</span>branch<span class=\"token operator\">:</span> <span class=\"token class-name\">Fast</span><span class=\"token operator\">-</span>forward\nc5bc55a HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> checkout message goes here<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>重置分支到你所需的提交(desired commit):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset <span class=\"token operator\">--</span>hard c5bc55a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>完成。</p>\n<h3 id=\"我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致\"><a href=\"#我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致\" class=\"headerlink\" title=\"我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致\"></a>我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3><p>先确认你没有推(push)你的内容到远程。</p>\n<p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git status\n# <span class=\"token class-name\">On</span> branch my<span class=\"token operator\">-</span>branch\n# <span class=\"token class-name\">Your</span> branch is ahead of <span class=\"token string\">'origin/my-branch'</span> by <span class=\"token number\">2</span> commits<span class=\"token punctuation\">.</span>\n#   <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git push\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">publish</span> your local commits<span class=\"token punctuation\">)</span>\n#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一种方法是:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard origin<span class=\"token operator\">/</span>my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我需要提交到一个新分支，但错误的提交到了main\"><a href=\"#我需要提交到一个新分支，但错误的提交到了main\" class=\"headerlink\" title=\"我需要提交到一个新分支，但错误的提交到了main\"></a>我需要提交到一个新分支，但错误的提交到了main</h3><p>在main下创建一个新分支，不切换到新分支,仍在main下:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git branch my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>把main分支重置到前一个提交:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">^</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p>\n<p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的hash(<code>git log</code> 能够完成)， 然后重置到这个hash。使用<code>git push</code> 同步内容到远程。</p>\n<p>例如, main分支想重置到的提交的hash为<code>a13b85e</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard a13b85e\nHEAD is now at a13b85e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>签出(checkout)刚才新建的分支继续工作:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想保留来自另外一个ref-ish的整个文件\"><a href=\"#我想保留来自另外一个ref-ish的整个文件\" class=\"headerlink\" title=\"我想保留来自另外一个ref-ish的整个文件\"></a>我想保留来自另外一个ref-ish的整个文件</h3><p>假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:微信搜索公众号：Java后端编程，回复：java 领取资料 。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>solution<span class=\"token punctuation\">)</span>$ git add <span class=\"token operator\">-</span><span class=\"token class-name\">A</span> <span class=\"token operator\">&amp;&amp;</span> git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"Adding all changes from this spike into one big commit.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p>\n<p>假设你有:</p>\n<ul>\n<li> 分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li>\n<li> 分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li>\n</ul>\n<p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>develop<span class=\"token punctuation\">)</span>$ git checkout solution <span class=\"token operator\">--</span> file1<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"># <span class=\"token class-name\">On</span> branch develop\n# <span class=\"token class-name\">Your</span> branch is up<span class=\"token operator\">-</span><span class=\"token keyword\">to</span><span class=\"token operator\">-</span>date <span class=\"token keyword\">with</span> <span class=\"token string\">'origin/develop'</span><span class=\"token punctuation\">.</span>\n# <span class=\"token class-name\">Changes</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">be</span> committed<span class=\"token operator\">:</span>\n#  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file>...\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">unstage</span><span class=\"token punctuation\">)</span>\n#\n#        modified<span class=\"token operator\">:</span>   file1<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后, 正常提交。</p>\n<p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.</p>\n<h3 id=\"我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里\"><a href=\"#我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里\" class=\"headerlink\" title=\"我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里\"></a>我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3><p>假设你有一个<code>main</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git log\n\ncommit e3851e817c451cc36f2e6f3049db528415e3c114\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Alex</span> <span class=\"token class-name\">Lee</span> <span class=\"token operator\">&lt;</span>alexlee<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">39</span><span class=\"token operator\">:</span><span class=\"token number\">27</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">Bug</span> #<span class=\"token number\">21</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Added</span> CSRF protection\n\ncommit <span class=\"token number\">5</span>ea51731d150f7ddc4a365437931cd8be3bf3131\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Alex</span> <span class=\"token class-name\">Lee</span> <span class=\"token operator\">&lt;</span>alexlee<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">39</span><span class=\"token operator\">:</span><span class=\"token number\">12</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">Bug</span> #<span class=\"token number\">14</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Fixed</span> spacing on title\n\ncommit a13b85e984171c6e2a1729bb061994525f626d14\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Aki</span> <span class=\"token class-name\">Rose</span> <span class=\"token operator\">&lt;</span>akirose<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">21</span> <span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token operator\">:</span><span class=\"token number\">48</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">First</span> commit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>让我们用提交hash(commit hash)标记bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p>\n<p>首先, 我们把<code>main</code>分支重置到正确的提交(<code>a13b85e</code>):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard a13b85e\nHEAD is now at a13b85e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>现在, 我们对 bug #21 创建一个新的分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b <span class=\"token number\">21</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>接着, 我们用 cherry-pick 把对bug #21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>$ git cherry<span class=\"token operator\">-</span>pick e3851e8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.</p>\n<p>再者， 我们为bug #14 创建一个新的分支, 也基于<code>main</code>分支</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>$ git checkout main\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b <span class=\"token number\">14</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>$ git cherry<span class=\"token operator\">-</span>pick <span class=\"token number\">5</span>ea5173<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想删除上游-upstream-分支被删除了的本地分支\"><a href=\"#我想删除上游-upstream-分支被删除了的本地分支\" class=\"headerlink\" title=\"我想删除上游(upstream)分支被删除了的本地分支\"></a>我想删除上游(upstream)分支被删除了的本地分支</h3><p>一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（[IDEA 中玩转 Git][IDEA _ Git]）。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git fetch <span class=\"token operator\">-</span>p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我不小心删除了我的分支\"><a href=\"#我不小心删除了我的分支\" class=\"headerlink\" title=\"我不小心删除了我的分支\"></a>我不小心删除了我的分支</h3><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b my<span class=\"token operator\">-</span>branch\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git branch\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ touch foo<span class=\"token punctuation\">.</span>txt\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ ls\nREADME<span class=\"token punctuation\">.</span>md foo<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加文件并做一次提交</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git add <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git commit <span class=\"token operator\">-</span>m <span class=\"token string\">'foo.txt added'</span>\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ foo<span class=\"token punctuation\">.</span>txt added\n <span class=\"token number\">1</span> files changed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token function\">insertions</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\n create mode <span class=\"token number\">100644</span> foo<span class=\"token punctuation\">.</span>txt\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git log\n\ncommit <span class=\"token number\">4e3</span>cd85a670ced7cc17a2b5d8d3d809ac88d5012\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> siemiatj <span class=\"token operator\">&lt;</span>siemiatj<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Wed</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">30</span> <span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">34</span><span class=\"token operator\">:</span><span class=\"token number\">10</span> <span class=\"token number\">2014</span> <span class=\"token operator\">+</span><span class=\"token number\">0200</span>\n\n    foo<span class=\"token punctuation\">.</span>txt added\n\ncommit <span class=\"token number\">69204</span>cdf0acbab201619d95ad8295928e7f411d5\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Kate</span> <span class=\"token class-name\">Hudson</span> <span class=\"token operator\">&lt;</span>katehudson<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">29</span> <span class=\"token number\">13</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">46</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">Fixes</span> #<span class=\"token number\">6</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Force</span> pushing after amending commits<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在我们切回到主(main)分支，‘不小心的’删除<code>my-branch</code>分支</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git checkout main\n<span class=\"token class-name\">Switched</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">branch</span> <span class=\"token string\">'main'</span>\n<span class=\"token class-name\">Your</span> branch is up<span class=\"token operator\">-</span><span class=\"token keyword\">to</span><span class=\"token operator\">-</span>date <span class=\"token keyword\">with</span> <span class=\"token string\">'origin/main'</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git branch <span class=\"token operator\">-</span><span class=\"token class-name\">D</span> my<span class=\"token operator\">-</span>branch\n<span class=\"token class-name\">Deleted</span> branch my<span class=\"token operator\">-</span>branch <span class=\"token punctuation\">(</span>was <span class=\"token number\">4e3</span>cd85<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ echo oh noes<span class=\"token punctuation\">,</span> deleted my branch<span class=\"token operator\">!</span>\noh noes<span class=\"token punctuation\">,</span> deleted my branch<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog\n<span class=\"token number\">69204</span>cd HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from my<span class=\"token operator\">-</span>branch <span class=\"token keyword\">to</span> <span class=\"token namespace\">main</span>\n<span class=\"token number\">4e3</span>cd85 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> commit<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">.</span>txt added\n<span class=\"token number\">69204</span>cd HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from main <span class=\"token keyword\">to</span> <span class=\"token namespace\">my</span><span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b my<span class=\"token operator\">-</span>branch<span class=\"token operator\">-</span>help\n<span class=\"token class-name\">Switched</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">a</span> <span class=\"token keyword\">new</span> branch <span class=\"token string\">'my-branch-help'</span>\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">-</span>help<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard <span class=\"token number\">4e3</span>cd85\nHEAD is now at <span class=\"token number\">4e3</span>cd85 foo<span class=\"token punctuation\">.</span>txt added\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">-</span>help<span class=\"token punctuation\">)</span>$ ls\nREADME<span class=\"token punctuation\">.</span>md foo<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看! 我们把删除的文件找回来了。Git的 <code>reflog</code> 在rebasing出错的时候也是同样有用的。</p>\n<h3 id=\"我想删除一个分支\"><a href=\"#我想删除一个分支\" class=\"headerlink\" title=\"我想删除一个分支\"></a>我想删除一个分支</h3><p>删除一个远程分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git push origin <span class=\"token operator\">--</span>delete my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你也可以:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git push origin <span class=\"token operator\">:</span>my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除一个本地分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git branch <span class=\"token operator\">-</span><span class=\"token class-name\">D</span> my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想从别人正在工作的远程分支签出-checkout-一个分支\"><a href=\"#我想从别人正在工作的远程分支签出-checkout-一个分支\" class=\"headerlink\" title=\"我想从别人正在工作的远程分支签出(checkout)一个分支\"></a>我想从别人正在工作的远程分支签出(checkout)一个分支</h3><p>首先, 从远程拉取(fetch) 所有分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git fetch <span class=\"token operator\">--</span>all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">--</span>track origin<span class=\"token operator\">/</span>daves\n<span class=\"token class-name\">Branch</span> daves set up <span class=\"token keyword\">to</span> <span class=\"token namespace\">track</span> remote branch daves from <span class=\"token class-name\"><span class=\"token namespace\">origin<span class=\"token punctuation\">.</span></span>\nSwitched</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">a</span> <span class=\"token keyword\">new</span> branch <span class=\"token string\">'daves'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p>\n<p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p>\n<h2 id=\"Rebasing-和合并-Merging\"><a href=\"#Rebasing-和合并-Merging\" class=\"headerlink\" title=\"Rebasing 和合并(Merging)\"></a>Rebasing 和合并(Merging)</h2><h3 id=\"我想撤销rebase-merge\"><a href=\"#我想撤销rebase-merge\" class=\"headerlink\" title=\"我想撤销rebase/merge\"></a>我想撤销rebase/merge</h3><p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard ORIG_HEAD<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我已经rebase过-但是我不想强推-force-push\"><a href=\"#我已经rebase过-但是我不想强推-force-push\" class=\"headerlink\" title=\"我已经rebase过, 但是我不想强推(force push)\"></a>我已经rebase过, 但是我不想强推(force push)</h3><p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout my<span class=\"token operator\">-</span>branch\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i main\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git checkout main\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git merge <span class=\"token operator\">--</span>ff<span class=\"token operator\">-</span>only my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"我需要组合-combine-几个提交-commit\"><a href=\"#我需要组合-combine-几个提交-commit\" class=\"headerlink\" title=\"我需要组合(combine)几个提交(commit)\"></a>我需要组合(combine)几个提交(commit)</h3><p>假设你的工作分支将会做对于 <code>main</code> 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>soft main\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git commit <span class=\"token operator\">-</span>am <span class=\"token string\">\"New awesome feature\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行rebase， 组合最近3次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i HEAD<span class=\"token operator\">~</span><span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pick a9c8a1d <span class=\"token class-name\">Some</span> refactoring\npick <span class=\"token number\">01</span>b2fd8 <span class=\"token class-name\">New</span> awesome feature\npick b729ad5 fixup\npick e3851e8 another fix\n\n# <span class=\"token class-name\">Rebase</span> <span class=\"token number\">8074d</span><span class=\"token number\">12.</span><span class=\"token punctuation\">.</span>b729ad5 onto <span class=\"token number\">8074d</span><span class=\"token number\">12</span>\n#\n# <span class=\"token class-name\">Commands</span><span class=\"token operator\">:</span>\n#  p<span class=\"token punctuation\">,</span> pick <span class=\"token operator\">=</span> use commit\n#  r<span class=\"token punctuation\">,</span> reword <span class=\"token operator\">=</span> use commit<span class=\"token punctuation\">,</span> but edit the commit message\n#  e<span class=\"token punctuation\">,</span> edit <span class=\"token operator\">=</span> use commit<span class=\"token punctuation\">,</span> but stop <span class=\"token keyword\">for</span> amending\n#  s<span class=\"token punctuation\">,</span> squash <span class=\"token operator\">=</span> use commit<span class=\"token punctuation\">,</span> but meld into previous commit\n#  f<span class=\"token punctuation\">,</span> fixup <span class=\"token operator\">=</span> like <span class=\"token string\">\"squash\"</span><span class=\"token punctuation\">,</span> but discard <span class=\"token keyword\">this</span> commit's log message\n#  x<span class=\"token punctuation\">,</span> exec <span class=\"token operator\">=</span> run command <span class=\"token punctuation\">(</span>the rest of the line<span class=\"token punctuation\">)</span> using shell\n#\n# <span class=\"token class-name\">These</span> lines can be re<span class=\"token operator\">-</span>ordered<span class=\"token punctuation\">;</span> they are executed from top <span class=\"token keyword\">to</span> <span class=\"token namespace\">bottom<span class=\"token punctuation\">.</span></span>\n#\n# <span class=\"token class-name\">If</span> you remove a line here THAT COMMIT WILL BE LOST<span class=\"token punctuation\">.</span>\n#\n# <span class=\"token class-name\">However</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span> you remove everything<span class=\"token punctuation\">,</span> the rebase will be aborted<span class=\"token punctuation\">.</span>\n#\n# <span class=\"token class-name\">Note</span> that empty commits are commented out<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p>\n<p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p>\n<p>例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pick a9c8a1d <span class=\"token class-name\">Some</span> refactoring\npick <span class=\"token number\">01</span>b2fd8 <span class=\"token class-name\">New</span> awesome feature\nf b729ad5 fixup\nf e3851e8 another fix<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pick a9c8a1d <span class=\"token class-name\">Some</span> refactoring\npick <span class=\"token number\">01</span>b2fd8 <span class=\"token class-name\">New</span> awesome feature\ns b729ad5 fixup\ns e3851e8 another fix<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Newer</span><span class=\"token punctuation\">,</span> awesomer features\n\n# <span class=\"token class-name\">Please</span> enter the commit message <span class=\"token keyword\">for</span> your <span class=\"token class-name\"><span class=\"token namespace\">changes<span class=\"token punctuation\">.</span></span> Lines</span> starting\n# <span class=\"token keyword\">with</span> <span class=\"token string\">'#'</span> will be ignored<span class=\"token punctuation\">,</span> and an empty message aborts the commit<span class=\"token punctuation\">.</span>\n# rebase in progress<span class=\"token punctuation\">;</span> onto <span class=\"token number\">8074d</span><span class=\"token number\">12</span>\n# <span class=\"token class-name\">You</span> are currently editing a commit <span class=\"token keyword\">while</span> rebasing branch <span class=\"token string\">'main'</span> on <span class=\"token string\">'8074d12'</span><span class=\"token punctuation\">.</span>\n#\n# <span class=\"token class-name\">Changes</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">be</span> committed<span class=\"token operator\">:</span>\n#\tmodified<span class=\"token operator\">:</span>   README<span class=\"token punctuation\">.</span>md\n#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果成功了, 你应该看到类似下面的内容:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ <span class=\"token class-name\">Successfully</span> rebased and updated refs<span class=\"token operator\">/</span>heads<span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"安全合并-merging-策略\"><a href=\"#安全合并-merging-策略\" class=\"headerlink\" title=\"安全合并(merging)策略\"></a>安全合并(merging)策略</h4><p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。<code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多Git资料，参见[IDEA 中如何完成 Git 版本回退？][IDEA _ Git 1]）。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git merge <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>ff <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>commit my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"我需要将一个分支合并成一个提交-commit\"><a href=\"#我需要将一个分支合并成一个提交-commit\" class=\"headerlink\" title=\"我需要将一个分支合并成一个提交(commit)\"></a>我需要将一个分支合并成一个提交(commit)</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git merge <span class=\"token operator\">--</span>squash my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"我只想组合-combine-未推的提交-unpushed-commit\"><a href=\"#我只想组合-combine-未推的提交-unpushed-commit\" class=\"headerlink\" title=\"我只想组合(combine)未推的提交(unpushed commit)\"></a>我只想组合(combine)未推的提交(unpushed commit)</h4><p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。</p>\n<h3 id=\"检查是否分支上的所有提交-commit-都合并-merge-过了\"><a href=\"#检查是否分支上的所有提交-commit-都合并-merge-过了\" class=\"headerlink\" title=\"检查是否分支上的所有提交(commit)都合并(merge)过了\"></a>检查是否分支上的所有提交(commit)都合并(merge)过了</h3><p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git log <span class=\"token operator\">--</span>graph <span class=\"token operator\">--</span>left<span class=\"token operator\">-</span>right <span class=\"token operator\">--</span>cherry<span class=\"token operator\">-</span>pick <span class=\"token operator\">--</span>oneline HEAD<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>feature<span class=\"token operator\">/</span><span class=\"token number\">120</span><span class=\"token operator\">-</span>on<span class=\"token operator\">-</span>scroll<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git log main <span class=\"token operator\">^</span>feature<span class=\"token operator\">/</span><span class=\"token number\">120</span><span class=\"token operator\">-</span>on<span class=\"token operator\">-</span>scroll <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>merges<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"交互式rebase-interactive-rebase-可能出现的问题\"><a href=\"#交互式rebase-interactive-rebase-可能出现的问题\" class=\"headerlink\" title=\"交互式rebase(interactive rebase)可能出现的问题\"></a>交互式rebase(interactive rebase)可能出现的问题</h3><h4 id=\"这个rebase-编辑屏幕出现’noop’\"><a href=\"#这个rebase-编辑屏幕出现’noop’\" class=\"headerlink\" title=\"这个rebase 编辑屏幕出现’noop’\"></a>这个rebase 编辑屏幕出现’noop’</h4><p>如果你看到的是这样:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">noop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:</p>\n<ul>\n<li> 检查确保主(main)分支没有问题</li>\n<li> rebase <code>HEAD~2</code> 或者更早</li>\n</ul>\n<h4 id=\"有冲突的情况\"><a href=\"#有冲突的情况\" class=\"headerlink\" title=\"有冲突的情况\"></a>有冲突的情况</h4><p>如果你不能成功的完成rebase, 你可能必须要解决冲突。</p>\n<p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git status\n<span class=\"token class-name\">On</span> branch my<span class=\"token operator\">-</span>branch\n<span class=\"token class-name\">Changes</span> not staged <span class=\"token keyword\">for</span> commit<span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">update</span> what will be committed<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout -- &lt;file>...\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">discard</span> changes in working directory<span class=\"token punctuation\">)</span>\n\n modified<span class=\"token operator\">:</span>   README<span class=\"token punctuation\">.</span>md<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这个例子里面, <code>README.md</code> 有冲突。打开这个文件找到类似下面的内容:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;</span> HEAD\n   some code\n   <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n   some code\n   <span class=\"token operator\">>>></span><span class=\"token operator\">>>></span><span class=\"token operator\">></span> <span class=\"token keyword\">new</span><span class=\"token operator\">-</span>commit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p>\n<p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ git mergetool <span class=\"token operator\">-</span>t opendiff<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续rebase。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git add README<span class=\"token punctuation\">.</span>md\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">--</span><span class=\"token keyword\">continue</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p>\n<p>任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">--</span>abort<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Stash\"><a href=\"#Stash\" class=\"headerlink\" title=\"Stash\"></a>Stash</h2><h3 id=\"暂存所有改动\"><a href=\"#暂存所有改动\" class=\"headerlink\" title=\"暂存所有改动\"></a>暂存所有改动</h3><p>暂存你工作目录下的所有改动</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你可以使用<code>-u</code>来排除一些文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash <span class=\"token operator\">-</span>u<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"暂存指定文件\"><a href=\"#暂存指定文件\" class=\"headerlink\" title=\"暂存指定文件\"></a>暂存指定文件</h3><p>假设你只想暂存某一个文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash push working<span class=\"token operator\">-</span>directory<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span>filename<span class=\"token punctuation\">.</span>ext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设你想暂存多个文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash push working<span class=\"token operator\">-</span>directory<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span>filename1<span class=\"token punctuation\">.</span>ext working<span class=\"token operator\">-</span>directory<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span>filename2<span class=\"token punctuation\">.</span>ext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"暂存时记录消息\"><a href=\"#暂存时记录消息\" class=\"headerlink\" title=\"暂存时记录消息\"></a>暂存时记录消息</h3><p>这样你可以在<code>list</code>时看到它</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash save <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>message<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash push <span class=\"token operator\">-</span>m <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>message<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"使用某个指定暂存\"><a href=\"#使用某个指定暂存\" class=\"headerlink\" title=\"使用某个指定暂存\"></a>使用某个指定暂存</h3><p>首先你可以查看你的<code>stash</code>记录</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后你可以<code>apply</code>某个<code>stash</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash apply <span class=\"token string\">\"stash@&#123;n&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此处， ‘n’是<code>stash</code>在栈中的位置，最上层的<code>stash</code>会是0</p>\n<p>除此之外，也可以使用时间标记(假如你能记得的话)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash apply <span class=\"token string\">\"stash@&#123;2.hours.ago&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"暂存时保留未暂存的内容\"><a href=\"#暂存时保留未暂存的内容\" class=\"headerlink\" title=\"暂存时保留未暂存的内容\"></a>暂存时保留未暂存的内容</h3><p>你需要手动create一个<code>stash commit</code>， 然后使用<code>git stash store</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash create\n$ git stash store <span class=\"token operator\">-</span>m <span class=\"token string\">\"commit-message\"</span> CREATED_SHA1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"杂项-Miscellaneous-Objects\"><a href=\"#杂项-Miscellaneous-Objects\" class=\"headerlink\" title=\"杂项(Miscellaneous Objects)\"></a>杂项(Miscellaneous Objects)</h2><h3 id=\"克隆所有子模块\"><a href=\"#克隆所有子模块\" class=\"headerlink\" title=\"克隆所有子模块\"></a>克隆所有子模块</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git clone <span class=\"token operator\">--</span>recursive git<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>foo<span class=\"token operator\">/</span>bar<span class=\"token punctuation\">.</span>git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果已经克隆了:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git submodule update <span class=\"token operator\">--</span>init <span class=\"token operator\">--</span>recursive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"删除标签-tag\"><a href=\"#删除标签-tag\" class=\"headerlink\" title=\"删除标签(tag)\"></a>删除标签(tag)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git tag <span class=\"token operator\">-</span>d <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>tag_name<span class=\"token punctuation\">></span></span>\n$ git push <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>remote<span class=\"token punctuation\">></span></span> <span class=\"token operator\">:</span>refs<span class=\"token operator\">/</span>tags<span class=\"token operator\">/</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>tag_name<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"恢复已删除标签-tag\"><a href=\"#恢复已删除标签-tag\" class=\"headerlink\" title=\"恢复已删除标签(tag)\"></a>恢复已删除标签(tag)</h3><p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git fsck <span class=\"token operator\">--</span>unreachable <span class=\"token operator\">|</span> grep tag<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>记下这个标签(tag)的hash，然后用Git的 update-ref</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git update<span class=\"token operator\">-</span>ref refs<span class=\"token operator\">/</span>tags<span class=\"token operator\">/</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>tag_name<span class=\"token punctuation\">></span></span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>hash<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这时你的标签(tag)应该已经恢复了。</p>\n<h3 id=\"已删除补丁-patch\"><a href=\"#已删除补丁-patch\" class=\"headerlink\" title=\"已删除补丁(patch)\"></a>已删除补丁(patch)</h3><p>如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p>\n<p>做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。</p>\n<h2 id=\"跟踪文件-Tracking-Files\"><a href=\"#跟踪文件-Tracking-Files\" class=\"headerlink\" title=\"跟踪文件(Tracking Files)\"></a>跟踪文件(Tracking Files)</h2><h3 id=\"我只想改变一个文件名字的大小写，而不修改内容\"><a href=\"#我只想改变一个文件名字的大小写，而不修改内容\" class=\"headerlink\" title=\"我只想改变一个文件名字的大小写，而不修改内容\"></a>我只想改变一个文件名字的大小写，而不修改内容</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git mv <span class=\"token operator\">--</span>force myfile <span class=\"token class-name\">MyFile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想从Git删除一个文件，但保留该文件\"><a href=\"#我想从Git删除一个文件，但保留该文件\" class=\"headerlink\" title=\"我想从Git删除一个文件，但保留该文件\"></a>我想从Git删除一个文件，但保留该文件</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git rm <span class=\"token operator\">--</span>cached log<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"配置-Configuration\"><a href=\"#配置-Configuration\" class=\"headerlink\" title=\"配置(Configuration)\"></a>配置(Configuration)</h2><h3 id=\"我想给一些Git命令添加别名-alias\"><a href=\"#我想给一些Git命令添加别名-alias\" class=\"headerlink\" title=\"我想给一些Git命令添加别名(alias)\"></a>我想给一些Git命令添加别名(alias)</h3><p>在 OS X 和 Linux 下, 你的 Git的配置文件储存在 <code>~/.gitconfig</code>。我在<code>[alias]</code> 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span>alias<span class=\"token punctuation\">]</span>\n    a <span class=\"token operator\">=</span> add\n    amend <span class=\"token operator\">=</span> commit <span class=\"token operator\">--</span>amend\n    c <span class=\"token operator\">=</span> commit\n    ca <span class=\"token operator\">=</span> commit <span class=\"token operator\">--</span>amend\n    ci <span class=\"token operator\">=</span> commit <span class=\"token operator\">-</span>a\n    co <span class=\"token operator\">=</span> checkout\n    d <span class=\"token operator\">=</span> diff\n    dc <span class=\"token operator\">=</span> diff <span class=\"token operator\">--</span>changed\n    ds <span class=\"token operator\">=</span> diff <span class=\"token operator\">--</span>staged\n    f <span class=\"token operator\">=</span> fetch\n    loll <span class=\"token operator\">=</span> log <span class=\"token operator\">--</span>graph <span class=\"token operator\">--</span>decorate <span class=\"token operator\">--</span>pretty<span class=\"token operator\">=</span>oneline <span class=\"token operator\">--</span>abbrev<span class=\"token operator\">-</span>commit\n    m <span class=\"token operator\">=</span> merge\n    one <span class=\"token operator\">=</span> log <span class=\"token operator\">--</span>pretty<span class=\"token operator\">=</span>oneline\n    outstanding <span class=\"token operator\">=</span> rebase <span class=\"token operator\">-</span>i @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span>\n    s <span class=\"token operator\">=</span> status\n    unpushed <span class=\"token operator\">=</span> log @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span>\n    wc <span class=\"token operator\">=</span> whatchanged\n    wip <span class=\"token operator\">=</span> rebase <span class=\"token operator\">-</span>i @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span>\n    zap <span class=\"token operator\">=</span> fetch <span class=\"token operator\">-</span>p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"我想缓存一个仓库-repository-的用户名和密码\"><a href=\"#我想缓存一个仓库-repository-的用户名和密码\" class=\"headerlink\" title=\"我想缓存一个仓库(repository)的用户名和密码\"></a>我想缓存一个仓库(repository)的用户名和密码</h3><p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git config <span class=\"token operator\">--</span>global credential<span class=\"token punctuation\">.</span>helper cache\n# <span class=\"token class-name\">Set</span> git <span class=\"token keyword\">to</span> <span class=\"token namespace\">use</span> the credential memory cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git config <span class=\"token operator\">--</span>global credential<span class=\"token punctuation\">.</span>helper <span class=\"token string\">'cache --timeout=3600'</span>\n# <span class=\"token class-name\">Set</span> the cache <span class=\"token keyword\">to</span> <span class=\"token namespace\">timeout</span> after <span class=\"token number\">1</span> hour <span class=\"token punctuation\">(</span>setting is in seconds<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"我不知道我做错了些什么\"><a href=\"#我不知道我做错了些什么\" class=\"headerlink\" title=\"我不知道我做错了些什么\"></a>我不知道我做错了些什么</h3><p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p>\n<p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog\n<span class=\"token number\">0</span>a2e358 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> reset<span class=\"token operator\">:</span> moving <span class=\"token keyword\">to</span> HEAD<span class=\"token operator\">~</span><span class=\"token number\">2</span>\n<span class=\"token number\">0254</span>ea7 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from <span class=\"token number\">2.2</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">main</span>\nc10f740 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from main <span class=\"token keyword\">to</span> <span class=\"token number\">2.2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@&#123;0&#125;</code>标识.</p>\n<p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset <span class=\"token operator\">--</span>hard <span class=\"token number\">0254</span>ea7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。</p>\n"},{"title":"Java基础篇的八股文","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-04T05:16:06.000Z","password":null,"summary":"java 语言具有哪些特点？","_content":"### Java 语言具有哪些特点？ \n\n *  Java 为纯面向对象的语言。它能够直接反应现实生活中的对象。\n *  具有平台无关性。Java 利用 Java 虚拟机运行字节码，无论是在 Windows、Linux 还是 MacOS 等其它平台对 Java 程序进行编译，编译后的程序可在其它平台运行。\n *  Java 为解释型语言，编译器把 Java 代码编译成平台无关的中间代码，然后在 JVM 上解释运行，具有很好的可移植性。\n *  Java 提供了很多内置类库。如对多线程支持，对网络通信支持，最重要的一点是提供了垃圾回收器。\n *  Java 具有较好的安全性和健壮性。Java 提供了异常处理和垃圾回收机制，去除了 C++中难以理解的指针特性。\n\n### JDK 与 JRE 有什么区别？ \n\n *  JDK：Java 开发工具包（Java Development Kit），提供了 Java 的开发环境和运行环境。\n *  JRE：Java 运行环境(Java Runtime Environment)，提供了 Java 运行所需的环境。\n *  JDK 包含了 JRE。如果只运行 Java 程序，安装 JRE 即可。要编写 Java 程序需安装 JDK.\n\n### 简述 Java 基本数据类型 \n\n *  byte: 占用 1 个字节，取值范围-128 ~ 127\n *  short: 占用 2 个字节，取值范围-2^15^ ~ 2^15^-1\n *  int：占用 4 个字节，取值范围-2^31^ ~ 2^31^-1\n *  long：占用 8 个字节\n *  float：占用 4 个字节\n *  double：占用 8 个字节\n *  char: 占用 2 个字节\n *  boolean：占用大小根据实现虚拟机不同有所差异\n\n### 简述自动装箱拆箱 \n\n对于 Java 基本数据类型，均对应一个包装类。\n\n装箱就是自动将基本数据类型转换为包装器类型，如 int->Integer\n\n拆箱就是自动将包装器类型转换为基本数据类型，如 Integer->int\n\n### 简述 Java 访问修饰符 \n\n *  default: 默认访问修饰符，在同一包内可见\n *  private: 在同一类内可见，不能修饰类\n *  protected : 对同一包内的类和所有子类可见，不能修饰类\n *  public: 对所有类可见\n\n### 构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？ \n\n先后顺序：静态成员变量、成员变量、构造方法。\n\n详细的先后顺序：父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数。\n\n### Java 代码块执行顺序 \n\n *  父类静态代码块（只执行一次）\n *  子类静态代码块（只执行一次）\n *  父类构造代码块\n *  父类构造函数\n *  子类构造代码块\n *  子类构造函数\n *  普通代码块\n\n### 面向对象的三大特性？ \n\n继承：对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且派生类可以修改或新增新的方法使之更适合特殊的需求。\n\n封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏。\n\n多态：允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现行为是不一样的。\n\n### 为什么 Java 语言不支持多重继承？ \n\n为了程序的结构能够更加清晰从而便于维护。假设 Java 语言支持多重继承，类 C 继承自类 A 和类 B，如果类 A 和 B 都有自定义的成员方法 `f()`，那么当代码中调用类 C 的 `f()` 会产生二义性。\n\nJava 语言通过实现多个接口间接支持多重继承，接口由于只包含方法定义，不能有方法的实现，类 C 继承接口 A 与接口 B 时即使它们都有方法`f()`，也不能直接调用方法，需实现具体的`f()`方法才能调用，不会产生二义性。\n\n多重继承会使类型转换、构造方法的调用顺序变得复杂，会影响到性能。\n\n### 简述 Java 的多态 \n\nJava 多态可以分为编译时多态和运行时多态。\n\n编译时多态主要指方法的重载，即通过参数列表的不同来区分不同的方法。\n\n运行时多态主要指继承父类和实现接口时，可使用父类引用指向子类对象。\n\n运行时多态的实现：主要依靠方法表，方法表中最先存放的是 Object 类的方法，接下来是该类的父类的方法，最后是该类本身的方法。如果子类改写了父类的方法，那么子类和父类的那些同名方法共享一个方法表项，都被认作是父类的方法。因此可以实现运行时多态。\n\n### Java 提供的多态机制？ \n\nJava 提供了两种用于多态的机制，分别是重载与覆盖。\n\n重载：重载是指同一个类中有多个同名的方法，但这些方法有不同的参数，在编译期间就可以确定调用哪个方法。\n\n覆盖：覆盖是指派生类重写基类的方法，使用基类指向其子类的实例对象，或接口的引用变量指向其实现类的实例对象，在程序调用的运行期根据引用变量所指的具体实例对象调用正在运行的那个对象的方法，即需要到运行期才能确定调用哪个方法。\n\n### 重载与覆盖的区别？ \n\n *  覆盖是父类与子类之间的关系，是垂直关系；重载是同一类中方法之间的关系，是水平关系。\n *  覆盖只能由一个方法或一对方法产生关系；重载是多个方法之间的关系。\n *  覆盖要求参数列表相同；重载要求参数列表不同。\n *  覆盖中，调用方法体是根据对象的类型来决定的，而重载是根据调用时实参表与形参表来对应选择方法体。\n *  重载方法可以改变返回值的类型，覆盖方法不能改变返回值的类型。\n\n### 接口和抽象类的相同点和不同点？ \n\n相同点:\n\n *  都不能被实例化。\n *  接口的实现类或抽象类的子类需实现接口或抽象类中相应的方法才能被实例化。\n\n不同点：\n\n *  接口只能有方法定义，不能有方法的实现，而抽象类可以有方法的定义与实现。\n *  实现接口的关键字为 implements，继承抽象类的关键字为 extends。一个类可以实现多个接口，只能继承一个抽象类。\n *  当子类和父类之间存在逻辑上的层次结构，推荐使用抽象类，有利于功能的累积。当功能不需要，希望支持差别较大的两个或更多对象间的特定交互行为，推荐使用接口。使用接口能降低软件系统的耦合度，便于日后维护或添加删除方法。\n\n### 简述抽象类与接口的区别 \n\n抽象类：体现的是 is-a 的关系，如对于 man is a person，就可以将 person 定义为抽象类。\n\n接口：体现的是 can 的关系。是作为模板实现的。如设置接口 fly，plane 类和 bird 类均可实现该接口。\n\n一个类只能继承一个抽象类，但可以实现多个接口。\n\n### 简述内部类及其作用 \n\n *  成员内部类：作为成员对象的内部类。可以访问 private 及以上外部类的属性和方法。外部类想要访问内部类属性或方法时，必须要创建一个内部类对象，然后通过该对象访问内部类的属性或方法。外部类也可访问 private 修饰的内部类属性。\n *  局部内部类：存在于方法中的内部类。访问权限类似局部变量，只能访问外部类的 final 变量。\n *  匿名内部类：只能使用一次，没有类名，只能访问外部类的 final 变量。\n *  静态内部类：类似类的静态成员变量。\n\n### Java 语言中关键字 static 的作用是什么？ \n\nstatic 的主要作用有两个：\n\n *  为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间。\n *  使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法或使用类的属性。\n\n具体而言 static 又可分为 4 种使用方式：\n\n *  修饰成员变量。用 static 关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加载，这个静态变量就会被分配空间，可以使用“类.静态变量”和“对象.静态变量”的方法使用。\n *  修饰成员方法。static 修饰的方法无需创建对象就可以被调用。static 方法中不能使用 this 和 super 关键字，不能调用非 static 方法，只能访问所属类的静态成员变量和静态成员方法。\n *  修饰代码块。JVM 在加载类的时候会执行 static 代码块。static 代码块常用于初始化静态变量。static 代码块只会被执行一次。\n *  修饰内部类。static 内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法。\n\n### 为什么要把 String 设计为不可变？ \n\n *  节省空间：字符串常量存储在 JVM 的字符串池中可以被用户共享。\n *  提高效率：String 可以被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作。\n *  安全：String 常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修改。\n\n### 简述 String/StringBuffer 与 StringBuilder \n\nString 类采用利用 final 修饰的字符数组进行字符串保存，因此不可变。如果对 String 类型对象修改，需要新建对象，将老字符和新增加的字符一并存进去。\n\nStringBuilder，采用无 final 修饰的字符数组进行保存，因此可变。但线程不安全。\n\nStringBuffer，采用无 final 修饰的字符数组进行保存，可理解为实现线程安全的 StringBuilder。\n\n### 判等运算符==与 equals 的区别？ \n\n== 比较的是引用，equals 比较的是内容。\n\n如果变量是基础数据类型，== 用于比较其对应值是否相等。如果变量指向的是对象，== 用于比较两个对象是否指向同一块存储空间。\n\nequals 是 Object 类提供的方法之一，每个 Java 类都继承自 Object 类，所以每个对象都具有 equals 这个方法。Object 类中定义的 equals 方法内部是直接调用 == 比较对象的。但通过覆盖的方法可以让它不是比较引用而是比较数据内容。\n\n### 简述 Object 类常用方法 \n\n *  hashCode：通过对象计算出的散列码。用于 map 型或 equals 方法。需要保证同一个对象多次调用该方法，总返回相同的整型值。\n *  equals：判断两个对象是否一致。需保证 equals 方法相同对应的对象 hashCode 也相同。\n *  toString: 用字符串表示该对象\n *  clone:深拷贝一个对象\n\n### Java 中一维数组和二维数组的声明方式？ \n\n一维数组的声明方式：\n\n```java\ntype arrayName[]\ntype[] arrayName\n```\n\n二维数组的声明方式：\n\n```java\ntype arrayName[][]\ntype[][] arrayName\ntype[] arrayName[]\n```\n\n其中 type 为基本数据类型或类，arrayName 为数组名字\n\n### 简述 Java 异常的分类 \n\nJava 异常分为 Error（程序无法处理的错误），和 Exception（程序本身可以处理的异常）。这两个类均继承 Throwable。\n\nError 常见的有 StackOverFlowError、OutOfMemoryError 等等。\n\nException 可分为运行时异常和非运行时异常。对于运行时异常，可以利用 try catch 的方式进行处理，也可以不处理。对于非运行时异常，必须处理，不处理的话程序无法通过编译。\n\n### 简述 throw 与 throws 的区别 \n\nthrow 一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常。\n\nthrows 一般用于方法声明上，代表该方法可能会抛出的异常列表。\n\n### 出现在 Java 程序中的 finally 代码块是否一定会执行？ \n\n当遇到下面情况不会执行。\n\n *  当程序在进入 try 语句块之前就出现异常时会直接结束。\n *  当程序在 try 块中强制退出时，如使用 System.exit(0)，也不会执行 finally 块中的代码。\n\n其它情况下，在 try/catch/finally 语句执行的时候，try 块先执行，当有异常发生，catch 和 finally 进行处理后程序就结束了，当没有异常发生，在执行完 finally 中的代码后，后面代码会继续执行。值得注意的是，当 try/catch 语句块中有 return 时，finally 语句块中的代码会在 return 之前执行。如果 try/catch/finally 块中都有 return 语句，finally 块中的 return 语句会覆盖 try/catch 模块中的 return 语句。\n\n### final、finally 和 finalize 的区别是什么？ \n\n *  final 用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。\n *  finally 作为异常处理的一部分，只能在 try/catch 语句中使用，finally 附带一个语句块用来表示这个语句最终一定被执行，经常被用在需要释放资源的情况下。\n *  finalize 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的 finalize()方法。当垃圾回收器准备好释放对象占用空间时，首先会调用 finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存。\n\n### 简述泛型 \n\n泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型在类中称为泛型类、接口中称为泛型接口和方法中称为泛型方法。\n\n### 简述泛型擦除 \n\nJava 编译器生成的字节码是不包涵泛型信息的，泛型类型信息将在编译处理是被擦除，这个过程被称为泛型擦除。\n\n### 简述注解 \n\nJava 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。\n\n其可以用于提供信息给编译器，在编译阶段时给软件提供信息进行相关的处理，在运行时处理写相应代码，做对应操作。\n\n### 简述元注解 \n\n元注解可以理解为注解的注解，即在注解中使用，实现想要的功能。其具体分为：\n\n *  @Retention: 表示注解存在阶段是保留在源码，还是在字节码（类加载）或者运行期（JVM 中运行）。\n *  @Target：表示注解作用的范围。\n *  @Documented：将注解中的元素包含到 Javadoc 中去。\n *  @Inherited：一个被@Inherited 注解了的注解修饰了一个父类，如果他的子类没有被其他注解修饰，则它的子类也继承了父类的注解。\n *  @Repeatable：被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义。\n\n### 简述 Java 中 Class 对象 \n\njava 中对象可以分为实例对象和 Class 对象，每一个类都有一个 Class 对象，其包含了与该类有关的信息。\n\n获取 Class 对象的方法：\n\n```java\nClass.forName(“类的全限定名”)\n实例对象.getClass()\n类名.class\n```\n\n### Java 反射机制是什么？ \n\nJava 反射机制是指在程序的运行过程中可以构造任意一个类的对象、获取任意一个类的成员变量和成员方法、获取任意一个对象所属的类信息、调用任意一个对象的属性和方法。反射机制使得 Java 具有动态获取程序信息和动态调用对象方法的能力。可以通过以下类调用反射 API。\n\n *  Class 类：可获得类属性方法\n *  Field 类：获得类的成员变量\n *  Method 类：获取类的方法信息\n *  Construct 类：获取类的构造方法等信息\n\n### 序列化是什么？ \n\n序列化是一种将对象转换成字节序列的过程，用于解决在对对象流进行读写操作时所引发的问题。序列化可以将对象的状态写在流里进行网络传输，或者保存到文件、数据库等系统里，并在需要的时候把该流读取出来重新构造成一个相同的对象。\n\n### 简述 Java 序列化与反序列化的实现 \n\n序列化：将 java 对象转化为字节序列，由此可以通过网络对象进行传输。\n\n反序列化：将字节序列转化为 java 对象。\n\n具体实现：实现 Serializable 接口，或实现 Externalizable 接口中的 writeExternal()与 readExternal()方法。\n\n### 简述 Java 的 List \n\nList 是一个有序队列，在 Java 中有两种实现方式:\n\nArrayList 使用数组实现，是容量可变的非线程安全列表，随机访问快，集合扩容时会创建更大的数组，把原有数组复制到新数组。\n\nLinkedList 本质是双向链表，与 ArrayList 相比插入和删除速度更快，但随机访问元素很慢。\n\n### Java 中线程安全的基本数据结构有哪些 \n\n *  HashTable: 哈希表的线程安全版，效率低\n *  ConcurrentHashMap：哈希表的线程安全版，效率高，用于替代 HashTable\n *  Vector：线程安全版 Arraylist\n *  Stack：线程安全版栈\n *  BlockingQueue 及其子类：线程安全版队列\n\n### 简述 Java 的 Set \n\nSet 即集合，该数据结构不允许元素重复且无序。Java 对 Set 有三种实现方式：\n\nHashSet 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，Value 系统自定义一个名为 PRESENT 的 Object 类型常量。判断元素是否相同时，先比较 hashCode，相同后再利用 equals 比较，查询 O(1)\n\nLinkedHashSet 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。\n\nTreeSet 通过 TreeMap 实现的，底层数据结构是红黑树，添加元素到集合时按照比较规则将其插入合适的位置，保证插入后的集合仍然有序。查询 O(logn)\n\n### 简述 Java 的 HashMap \n\nJDK8 之前底层实现是数组 + 链表，JDK8 改为数组 + 链表/红黑树。主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个链表上。\n\ntable 数组记录 HashMap 的数据，每个下标对应一条链表，所有哈希冲突的数据都会被存放到同一条链表，Node/Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。在 JDK8 后链表超过 8 会转化为红黑树。\n\n若当前数据/总数据容量>负载因子，Hashmap 将执行扩容操作。默认初始化容量为 16，扩容容量必须是 2 的幂次方、最大容量为 1<< 30 、默认加载因子为 0.75。\n\n### 为何 HashMap 线程不安全 \n\n在 JDK1.7 中，HashMap 采用头插法插入元素，因此并发情况下会导致环形链表，产生死循环。\n\n虽然 JDK1.8 采用了尾插法解决了这个问题，但是并发下的 put 操作也会使前一个 key 被后一个 key 覆盖。\n\n由于 HashMap 有扩容机制存在，也存在 A 线程进行扩容后，B 线程执行 get 方法出现失误的情况。\n\n### 简述 Java 的 TreeMap \n\nTreeMap 是底层利用红黑树实现的 Map 结构，底层实现是一棵平衡的排序二叉树，由于红黑树的插入、删除、遍历时间复杂度都为 O(logN)，所以性能上低于哈希表。但是哈希表无法提供键值对的有序输出，红黑树可以按照键的值的大小有序输出。\n\n### ArrayList、Vector 和 LinkedList 有什么共同点与区别？ \n\n *  ArrayList、Vector 和 LinkedList 都是可伸缩的数组，即可以动态改变长度的数组。\n *  ArrayList 和 Vector 都是基于存储元素的 Object\\[\\] array 来实现的，它们会在内存中开辟一块连续的空间来存储，支持下标、索引访问。但在涉及插入元素时可能需要移动容器中的元素，插入效率较低。当存储元素超过容器的初始化容量大小，ArrayList 与 Vector 均会进行扩容。\n *  Vector 是线程安全的，其大部分方法是直接或间接同步的。ArrayList 不是线程安全的，其方法不具有同步性质。LinkedList 也不是线程安全的。\n *  LinkedList 采用双向列表实现，对数据索引需要从头开始遍历，因此随机访问效率较低，但在插入元素的时候不需要对数据进行移动，插入效率较高。\n\n### HashMap 和 Hashtable 有什么区别？ \n\n *  HashMap 是 Hashtable 的轻量级实现，HashMap 允许 key 和 value 为 null，但最多允许一条记录的 key 为 null.而 HashTable 不允许。\n *  HashTable 中的方法是线程安全的，而 HashMap 不是。在多线程访问 HashMap 需要提供额外的同步机制。\n *  Hashtable 使用 Enumeration 进行遍历，HashMap 使用 Iterator 进行遍历。\n\n### 如何决定使用 HashMap 还是 TreeMap? \n\n如果对 Map 进行插入、删除或定位一个元素的操作更频繁，HashMap 是更好的选择。如果需要对 key 集合进行有序的遍历，TreeMap 是更好的选择。\n\n### HashSet 中，equals 与 hashCode 之间的关系？ \n\nequals 和 hashCode 这两个方法都是从 object 类中继承过来的，equals 主要用于判断对象的内存地址引用是否是同一个地址；hashCode 根据定义的哈希规则将对象的内存地址转换为一个哈希码。HashSet 中存储的元素是不能重复的，主要通过 hashCode 与 equals 两个方法来判断存储的对象是否相同：\n\n *  如果两个对象的 hashCode 值不同，说明两个对象不相同。\n *  如果两个对象的 hashCode 值相同，接着会调用对象的 equals 方法，如果 equlas 方法的返回结果为 true，那么说明两个对象相同，否则不相同。\n\n### fail-fast 和 fail-safe 迭代器的区别是什么？ \n\n *  fail-fast 直接在容器上进行，在遍历过程中，一旦发现容器中的数据被修改，就会立刻抛出 ConcurrentModificationException 异常从而导致遍历失败。常见的使用 fail-fast 方式的容器有 HashMap 和 ArrayList 等。\n *  fail-safe 这种遍历基于容器的一个克隆。因此对容器中的内容修改不影响遍历。常见的使用 fail-safe 方式遍历的容器有 ConcurrentHashMap 和 CopyOnWriteArrayList。\n\n### Collection 和 Collections 有什么区别？ \n\n *  Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如 List、Set 等。\n *  Collections 是一个包装类，包含了很多静态方法、不能被实例化，而是作为工具类使用，比如提供的排序方法：Collections.sort(list);提供的反转方法：Collections.reverse(list)。\n\n","source":"_posts/Java基础篇的八股文.md","raw":"---\ntitle: Java基础篇的八股文\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-04 13:16:06\npassword:\nsummary: java 语言具有哪些特点？ \ntags:\n    - java基础\n    - 八股文\ncategories:\n    - java\n---\n### Java 语言具有哪些特点？ \n\n *  Java 为纯面向对象的语言。它能够直接反应现实生活中的对象。\n *  具有平台无关性。Java 利用 Java 虚拟机运行字节码，无论是在 Windows、Linux 还是 MacOS 等其它平台对 Java 程序进行编译，编译后的程序可在其它平台运行。\n *  Java 为解释型语言，编译器把 Java 代码编译成平台无关的中间代码，然后在 JVM 上解释运行，具有很好的可移植性。\n *  Java 提供了很多内置类库。如对多线程支持，对网络通信支持，最重要的一点是提供了垃圾回收器。\n *  Java 具有较好的安全性和健壮性。Java 提供了异常处理和垃圾回收机制，去除了 C++中难以理解的指针特性。\n\n### JDK 与 JRE 有什么区别？ \n\n *  JDK：Java 开发工具包（Java Development Kit），提供了 Java 的开发环境和运行环境。\n *  JRE：Java 运行环境(Java Runtime Environment)，提供了 Java 运行所需的环境。\n *  JDK 包含了 JRE。如果只运行 Java 程序，安装 JRE 即可。要编写 Java 程序需安装 JDK.\n\n### 简述 Java 基本数据类型 \n\n *  byte: 占用 1 个字节，取值范围-128 ~ 127\n *  short: 占用 2 个字节，取值范围-2^15^ ~ 2^15^-1\n *  int：占用 4 个字节，取值范围-2^31^ ~ 2^31^-1\n *  long：占用 8 个字节\n *  float：占用 4 个字节\n *  double：占用 8 个字节\n *  char: 占用 2 个字节\n *  boolean：占用大小根据实现虚拟机不同有所差异\n\n### 简述自动装箱拆箱 \n\n对于 Java 基本数据类型，均对应一个包装类。\n\n装箱就是自动将基本数据类型转换为包装器类型，如 int->Integer\n\n拆箱就是自动将包装器类型转换为基本数据类型，如 Integer->int\n\n### 简述 Java 访问修饰符 \n\n *  default: 默认访问修饰符，在同一包内可见\n *  private: 在同一类内可见，不能修饰类\n *  protected : 对同一包内的类和所有子类可见，不能修饰类\n *  public: 对所有类可见\n\n### 构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？ \n\n先后顺序：静态成员变量、成员变量、构造方法。\n\n详细的先后顺序：父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数。\n\n### Java 代码块执行顺序 \n\n *  父类静态代码块（只执行一次）\n *  子类静态代码块（只执行一次）\n *  父类构造代码块\n *  父类构造函数\n *  子类构造代码块\n *  子类构造函数\n *  普通代码块\n\n### 面向对象的三大特性？ \n\n继承：对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且派生类可以修改或新增新的方法使之更适合特殊的需求。\n\n封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏。\n\n多态：允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现行为是不一样的。\n\n### 为什么 Java 语言不支持多重继承？ \n\n为了程序的结构能够更加清晰从而便于维护。假设 Java 语言支持多重继承，类 C 继承自类 A 和类 B，如果类 A 和 B 都有自定义的成员方法 `f()`，那么当代码中调用类 C 的 `f()` 会产生二义性。\n\nJava 语言通过实现多个接口间接支持多重继承，接口由于只包含方法定义，不能有方法的实现，类 C 继承接口 A 与接口 B 时即使它们都有方法`f()`，也不能直接调用方法，需实现具体的`f()`方法才能调用，不会产生二义性。\n\n多重继承会使类型转换、构造方法的调用顺序变得复杂，会影响到性能。\n\n### 简述 Java 的多态 \n\nJava 多态可以分为编译时多态和运行时多态。\n\n编译时多态主要指方法的重载，即通过参数列表的不同来区分不同的方法。\n\n运行时多态主要指继承父类和实现接口时，可使用父类引用指向子类对象。\n\n运行时多态的实现：主要依靠方法表，方法表中最先存放的是 Object 类的方法，接下来是该类的父类的方法，最后是该类本身的方法。如果子类改写了父类的方法，那么子类和父类的那些同名方法共享一个方法表项，都被认作是父类的方法。因此可以实现运行时多态。\n\n### Java 提供的多态机制？ \n\nJava 提供了两种用于多态的机制，分别是重载与覆盖。\n\n重载：重载是指同一个类中有多个同名的方法，但这些方法有不同的参数，在编译期间就可以确定调用哪个方法。\n\n覆盖：覆盖是指派生类重写基类的方法，使用基类指向其子类的实例对象，或接口的引用变量指向其实现类的实例对象，在程序调用的运行期根据引用变量所指的具体实例对象调用正在运行的那个对象的方法，即需要到运行期才能确定调用哪个方法。\n\n### 重载与覆盖的区别？ \n\n *  覆盖是父类与子类之间的关系，是垂直关系；重载是同一类中方法之间的关系，是水平关系。\n *  覆盖只能由一个方法或一对方法产生关系；重载是多个方法之间的关系。\n *  覆盖要求参数列表相同；重载要求参数列表不同。\n *  覆盖中，调用方法体是根据对象的类型来决定的，而重载是根据调用时实参表与形参表来对应选择方法体。\n *  重载方法可以改变返回值的类型，覆盖方法不能改变返回值的类型。\n\n### 接口和抽象类的相同点和不同点？ \n\n相同点:\n\n *  都不能被实例化。\n *  接口的实现类或抽象类的子类需实现接口或抽象类中相应的方法才能被实例化。\n\n不同点：\n\n *  接口只能有方法定义，不能有方法的实现，而抽象类可以有方法的定义与实现。\n *  实现接口的关键字为 implements，继承抽象类的关键字为 extends。一个类可以实现多个接口，只能继承一个抽象类。\n *  当子类和父类之间存在逻辑上的层次结构，推荐使用抽象类，有利于功能的累积。当功能不需要，希望支持差别较大的两个或更多对象间的特定交互行为，推荐使用接口。使用接口能降低软件系统的耦合度，便于日后维护或添加删除方法。\n\n### 简述抽象类与接口的区别 \n\n抽象类：体现的是 is-a 的关系，如对于 man is a person，就可以将 person 定义为抽象类。\n\n接口：体现的是 can 的关系。是作为模板实现的。如设置接口 fly，plane 类和 bird 类均可实现该接口。\n\n一个类只能继承一个抽象类，但可以实现多个接口。\n\n### 简述内部类及其作用 \n\n *  成员内部类：作为成员对象的内部类。可以访问 private 及以上外部类的属性和方法。外部类想要访问内部类属性或方法时，必须要创建一个内部类对象，然后通过该对象访问内部类的属性或方法。外部类也可访问 private 修饰的内部类属性。\n *  局部内部类：存在于方法中的内部类。访问权限类似局部变量，只能访问外部类的 final 变量。\n *  匿名内部类：只能使用一次，没有类名，只能访问外部类的 final 变量。\n *  静态内部类：类似类的静态成员变量。\n\n### Java 语言中关键字 static 的作用是什么？ \n\nstatic 的主要作用有两个：\n\n *  为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间。\n *  使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法或使用类的属性。\n\n具体而言 static 又可分为 4 种使用方式：\n\n *  修饰成员变量。用 static 关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加载，这个静态变量就会被分配空间，可以使用“类.静态变量”和“对象.静态变量”的方法使用。\n *  修饰成员方法。static 修饰的方法无需创建对象就可以被调用。static 方法中不能使用 this 和 super 关键字，不能调用非 static 方法，只能访问所属类的静态成员变量和静态成员方法。\n *  修饰代码块。JVM 在加载类的时候会执行 static 代码块。static 代码块常用于初始化静态变量。static 代码块只会被执行一次。\n *  修饰内部类。static 内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法。\n\n### 为什么要把 String 设计为不可变？ \n\n *  节省空间：字符串常量存储在 JVM 的字符串池中可以被用户共享。\n *  提高效率：String 可以被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作。\n *  安全：String 常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修改。\n\n### 简述 String/StringBuffer 与 StringBuilder \n\nString 类采用利用 final 修饰的字符数组进行字符串保存，因此不可变。如果对 String 类型对象修改，需要新建对象，将老字符和新增加的字符一并存进去。\n\nStringBuilder，采用无 final 修饰的字符数组进行保存，因此可变。但线程不安全。\n\nStringBuffer，采用无 final 修饰的字符数组进行保存，可理解为实现线程安全的 StringBuilder。\n\n### 判等运算符==与 equals 的区别？ \n\n== 比较的是引用，equals 比较的是内容。\n\n如果变量是基础数据类型，== 用于比较其对应值是否相等。如果变量指向的是对象，== 用于比较两个对象是否指向同一块存储空间。\n\nequals 是 Object 类提供的方法之一，每个 Java 类都继承自 Object 类，所以每个对象都具有 equals 这个方法。Object 类中定义的 equals 方法内部是直接调用 == 比较对象的。但通过覆盖的方法可以让它不是比较引用而是比较数据内容。\n\n### 简述 Object 类常用方法 \n\n *  hashCode：通过对象计算出的散列码。用于 map 型或 equals 方法。需要保证同一个对象多次调用该方法，总返回相同的整型值。\n *  equals：判断两个对象是否一致。需保证 equals 方法相同对应的对象 hashCode 也相同。\n *  toString: 用字符串表示该对象\n *  clone:深拷贝一个对象\n\n### Java 中一维数组和二维数组的声明方式？ \n\n一维数组的声明方式：\n\n```java\ntype arrayName[]\ntype[] arrayName\n```\n\n二维数组的声明方式：\n\n```java\ntype arrayName[][]\ntype[][] arrayName\ntype[] arrayName[]\n```\n\n其中 type 为基本数据类型或类，arrayName 为数组名字\n\n### 简述 Java 异常的分类 \n\nJava 异常分为 Error（程序无法处理的错误），和 Exception（程序本身可以处理的异常）。这两个类均继承 Throwable。\n\nError 常见的有 StackOverFlowError、OutOfMemoryError 等等。\n\nException 可分为运行时异常和非运行时异常。对于运行时异常，可以利用 try catch 的方式进行处理，也可以不处理。对于非运行时异常，必须处理，不处理的话程序无法通过编译。\n\n### 简述 throw 与 throws 的区别 \n\nthrow 一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常。\n\nthrows 一般用于方法声明上，代表该方法可能会抛出的异常列表。\n\n### 出现在 Java 程序中的 finally 代码块是否一定会执行？ \n\n当遇到下面情况不会执行。\n\n *  当程序在进入 try 语句块之前就出现异常时会直接结束。\n *  当程序在 try 块中强制退出时，如使用 System.exit(0)，也不会执行 finally 块中的代码。\n\n其它情况下，在 try/catch/finally 语句执行的时候，try 块先执行，当有异常发生，catch 和 finally 进行处理后程序就结束了，当没有异常发生，在执行完 finally 中的代码后，后面代码会继续执行。值得注意的是，当 try/catch 语句块中有 return 时，finally 语句块中的代码会在 return 之前执行。如果 try/catch/finally 块中都有 return 语句，finally 块中的 return 语句会覆盖 try/catch 模块中的 return 语句。\n\n### final、finally 和 finalize 的区别是什么？ \n\n *  final 用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。\n *  finally 作为异常处理的一部分，只能在 try/catch 语句中使用，finally 附带一个语句块用来表示这个语句最终一定被执行，经常被用在需要释放资源的情况下。\n *  finalize 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的 finalize()方法。当垃圾回收器准备好释放对象占用空间时，首先会调用 finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存。\n\n### 简述泛型 \n\n泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型在类中称为泛型类、接口中称为泛型接口和方法中称为泛型方法。\n\n### 简述泛型擦除 \n\nJava 编译器生成的字节码是不包涵泛型信息的，泛型类型信息将在编译处理是被擦除，这个过程被称为泛型擦除。\n\n### 简述注解 \n\nJava 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。\n\n其可以用于提供信息给编译器，在编译阶段时给软件提供信息进行相关的处理，在运行时处理写相应代码，做对应操作。\n\n### 简述元注解 \n\n元注解可以理解为注解的注解，即在注解中使用，实现想要的功能。其具体分为：\n\n *  @Retention: 表示注解存在阶段是保留在源码，还是在字节码（类加载）或者运行期（JVM 中运行）。\n *  @Target：表示注解作用的范围。\n *  @Documented：将注解中的元素包含到 Javadoc 中去。\n *  @Inherited：一个被@Inherited 注解了的注解修饰了一个父类，如果他的子类没有被其他注解修饰，则它的子类也继承了父类的注解。\n *  @Repeatable：被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义。\n\n### 简述 Java 中 Class 对象 \n\njava 中对象可以分为实例对象和 Class 对象，每一个类都有一个 Class 对象，其包含了与该类有关的信息。\n\n获取 Class 对象的方法：\n\n```java\nClass.forName(“类的全限定名”)\n实例对象.getClass()\n类名.class\n```\n\n### Java 反射机制是什么？ \n\nJava 反射机制是指在程序的运行过程中可以构造任意一个类的对象、获取任意一个类的成员变量和成员方法、获取任意一个对象所属的类信息、调用任意一个对象的属性和方法。反射机制使得 Java 具有动态获取程序信息和动态调用对象方法的能力。可以通过以下类调用反射 API。\n\n *  Class 类：可获得类属性方法\n *  Field 类：获得类的成员变量\n *  Method 类：获取类的方法信息\n *  Construct 类：获取类的构造方法等信息\n\n### 序列化是什么？ \n\n序列化是一种将对象转换成字节序列的过程，用于解决在对对象流进行读写操作时所引发的问题。序列化可以将对象的状态写在流里进行网络传输，或者保存到文件、数据库等系统里，并在需要的时候把该流读取出来重新构造成一个相同的对象。\n\n### 简述 Java 序列化与反序列化的实现 \n\n序列化：将 java 对象转化为字节序列，由此可以通过网络对象进行传输。\n\n反序列化：将字节序列转化为 java 对象。\n\n具体实现：实现 Serializable 接口，或实现 Externalizable 接口中的 writeExternal()与 readExternal()方法。\n\n### 简述 Java 的 List \n\nList 是一个有序队列，在 Java 中有两种实现方式:\n\nArrayList 使用数组实现，是容量可变的非线程安全列表，随机访问快，集合扩容时会创建更大的数组，把原有数组复制到新数组。\n\nLinkedList 本质是双向链表，与 ArrayList 相比插入和删除速度更快，但随机访问元素很慢。\n\n### Java 中线程安全的基本数据结构有哪些 \n\n *  HashTable: 哈希表的线程安全版，效率低\n *  ConcurrentHashMap：哈希表的线程安全版，效率高，用于替代 HashTable\n *  Vector：线程安全版 Arraylist\n *  Stack：线程安全版栈\n *  BlockingQueue 及其子类：线程安全版队列\n\n### 简述 Java 的 Set \n\nSet 即集合，该数据结构不允许元素重复且无序。Java 对 Set 有三种实现方式：\n\nHashSet 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，Value 系统自定义一个名为 PRESENT 的 Object 类型常量。判断元素是否相同时，先比较 hashCode，相同后再利用 equals 比较，查询 O(1)\n\nLinkedHashSet 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。\n\nTreeSet 通过 TreeMap 实现的，底层数据结构是红黑树，添加元素到集合时按照比较规则将其插入合适的位置，保证插入后的集合仍然有序。查询 O(logn)\n\n### 简述 Java 的 HashMap \n\nJDK8 之前底层实现是数组 + 链表，JDK8 改为数组 + 链表/红黑树。主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个链表上。\n\ntable 数组记录 HashMap 的数据，每个下标对应一条链表，所有哈希冲突的数据都会被存放到同一条链表，Node/Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。在 JDK8 后链表超过 8 会转化为红黑树。\n\n若当前数据/总数据容量>负载因子，Hashmap 将执行扩容操作。默认初始化容量为 16，扩容容量必须是 2 的幂次方、最大容量为 1<< 30 、默认加载因子为 0.75。\n\n### 为何 HashMap 线程不安全 \n\n在 JDK1.7 中，HashMap 采用头插法插入元素，因此并发情况下会导致环形链表，产生死循环。\n\n虽然 JDK1.8 采用了尾插法解决了这个问题，但是并发下的 put 操作也会使前一个 key 被后一个 key 覆盖。\n\n由于 HashMap 有扩容机制存在，也存在 A 线程进行扩容后，B 线程执行 get 方法出现失误的情况。\n\n### 简述 Java 的 TreeMap \n\nTreeMap 是底层利用红黑树实现的 Map 结构，底层实现是一棵平衡的排序二叉树，由于红黑树的插入、删除、遍历时间复杂度都为 O(logN)，所以性能上低于哈希表。但是哈希表无法提供键值对的有序输出，红黑树可以按照键的值的大小有序输出。\n\n### ArrayList、Vector 和 LinkedList 有什么共同点与区别？ \n\n *  ArrayList、Vector 和 LinkedList 都是可伸缩的数组，即可以动态改变长度的数组。\n *  ArrayList 和 Vector 都是基于存储元素的 Object\\[\\] array 来实现的，它们会在内存中开辟一块连续的空间来存储，支持下标、索引访问。但在涉及插入元素时可能需要移动容器中的元素，插入效率较低。当存储元素超过容器的初始化容量大小，ArrayList 与 Vector 均会进行扩容。\n *  Vector 是线程安全的，其大部分方法是直接或间接同步的。ArrayList 不是线程安全的，其方法不具有同步性质。LinkedList 也不是线程安全的。\n *  LinkedList 采用双向列表实现，对数据索引需要从头开始遍历，因此随机访问效率较低，但在插入元素的时候不需要对数据进行移动，插入效率较高。\n\n### HashMap 和 Hashtable 有什么区别？ \n\n *  HashMap 是 Hashtable 的轻量级实现，HashMap 允许 key 和 value 为 null，但最多允许一条记录的 key 为 null.而 HashTable 不允许。\n *  HashTable 中的方法是线程安全的，而 HashMap 不是。在多线程访问 HashMap 需要提供额外的同步机制。\n *  Hashtable 使用 Enumeration 进行遍历，HashMap 使用 Iterator 进行遍历。\n\n### 如何决定使用 HashMap 还是 TreeMap? \n\n如果对 Map 进行插入、删除或定位一个元素的操作更频繁，HashMap 是更好的选择。如果需要对 key 集合进行有序的遍历，TreeMap 是更好的选择。\n\n### HashSet 中，equals 与 hashCode 之间的关系？ \n\nequals 和 hashCode 这两个方法都是从 object 类中继承过来的，equals 主要用于判断对象的内存地址引用是否是同一个地址；hashCode 根据定义的哈希规则将对象的内存地址转换为一个哈希码。HashSet 中存储的元素是不能重复的，主要通过 hashCode 与 equals 两个方法来判断存储的对象是否相同：\n\n *  如果两个对象的 hashCode 值不同，说明两个对象不相同。\n *  如果两个对象的 hashCode 值相同，接着会调用对象的 equals 方法，如果 equlas 方法的返回结果为 true，那么说明两个对象相同，否则不相同。\n\n### fail-fast 和 fail-safe 迭代器的区别是什么？ \n\n *  fail-fast 直接在容器上进行，在遍历过程中，一旦发现容器中的数据被修改，就会立刻抛出 ConcurrentModificationException 异常从而导致遍历失败。常见的使用 fail-fast 方式的容器有 HashMap 和 ArrayList 等。\n *  fail-safe 这种遍历基于容器的一个克隆。因此对容器中的内容修改不影响遍历。常见的使用 fail-safe 方式遍历的容器有 ConcurrentHashMap 和 CopyOnWriteArrayList。\n\n### Collection 和 Collections 有什么区别？ \n\n *  Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如 List、Set 等。\n *  Collections 是一个包装类，包含了很多静态方法、不能被实例化，而是作为工具类使用，比如提供的排序方法：Collections.sort(list);提供的反转方法：Collections.reverse(list)。\n\n","slug":"Java基础篇的八股文","published":1,"updated":"2022-11-04T05:18:25.832Z","_id":"cla21kmyu000001ldd8hx7phc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Java-语言具有哪些特点？\"><a href=\"#Java-语言具有哪些特点？\" class=\"headerlink\" title=\"Java 语言具有哪些特点？\"></a>Java 语言具有哪些特点？</h3><ul>\n<li> Java 为纯面向对象的语言。它能够直接反应现实生活中的对象。</li>\n<li> 具有平台无关性。Java 利用 Java 虚拟机运行字节码，无论是在 Windows、Linux 还是 MacOS 等其它平台对 Java 程序进行编译，编译后的程序可在其它平台运行。</li>\n<li> Java 为解释型语言，编译器把 Java 代码编译成平台无关的中间代码，然后在 JVM 上解释运行，具有很好的可移植性。</li>\n<li> Java 提供了很多内置类库。如对多线程支持，对网络通信支持，最重要的一点是提供了垃圾回收器。</li>\n<li> Java 具有较好的安全性和健壮性。Java 提供了异常处理和垃圾回收机制，去除了 C++中难以理解的指针特性。</li>\n</ul>\n<h3 id=\"JDK-与-JRE-有什么区别？\"><a href=\"#JDK-与-JRE-有什么区别？\" class=\"headerlink\" title=\"JDK 与 JRE 有什么区别？\"></a>JDK 与 JRE 有什么区别？</h3><ul>\n<li> JDK：Java 开发工具包（Java Development Kit），提供了 Java 的开发环境和运行环境。</li>\n<li> JRE：Java 运行环境(Java Runtime Environment)，提供了 Java 运行所需的环境。</li>\n<li> JDK 包含了 JRE。如果只运行 Java 程序，安装 JRE 即可。要编写 Java 程序需安装 JDK.</li>\n</ul>\n<h3 id=\"简述-Java-基本数据类型\"><a href=\"#简述-Java-基本数据类型\" class=\"headerlink\" title=\"简述 Java 基本数据类型\"></a>简述 Java 基本数据类型</h3><ul>\n<li> byte: 占用 1 个字节，取值范围-128 ~ 127</li>\n<li> short: 占用 2 个字节，取值范围-2^15^ ~ 2^15^-1</li>\n<li> int：占用 4 个字节，取值范围-2^31^ ~ 2^31^-1</li>\n<li> long：占用 8 个字节</li>\n<li> float：占用 4 个字节</li>\n<li> double：占用 8 个字节</li>\n<li> char: 占用 2 个字节</li>\n<li> boolean：占用大小根据实现虚拟机不同有所差异</li>\n</ul>\n<h3 id=\"简述自动装箱拆箱\"><a href=\"#简述自动装箱拆箱\" class=\"headerlink\" title=\"简述自动装箱拆箱\"></a>简述自动装箱拆箱</h3><p>对于 Java 基本数据类型，均对应一个包装类。</p>\n<p>装箱就是自动将基本数据类型转换为包装器类型，如 int-&gt;Integer</p>\n<p>拆箱就是自动将包装器类型转换为基本数据类型，如 Integer-&gt;int</p>\n<h3 id=\"简述-Java-访问修饰符\"><a href=\"#简述-Java-访问修饰符\" class=\"headerlink\" title=\"简述 Java 访问修饰符\"></a>简述 Java 访问修饰符</h3><ul>\n<li> default: 默认访问修饰符，在同一包内可见</li>\n<li> private: 在同一类内可见，不能修饰类</li>\n<li> protected : 对同一包内的类和所有子类可见，不能修饰类</li>\n<li> public: 对所有类可见</li>\n</ul>\n<h3 id=\"构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？\"><a href=\"#构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？\" class=\"headerlink\" title=\"构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？\"></a>构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？</h3><p>先后顺序：静态成员变量、成员变量、构造方法。</p>\n<p>详细的先后顺序：父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数。</p>\n<h3 id=\"Java-代码块执行顺序\"><a href=\"#Java-代码块执行顺序\" class=\"headerlink\" title=\"Java 代码块执行顺序\"></a>Java 代码块执行顺序</h3><ul>\n<li> 父类静态代码块（只执行一次）</li>\n<li> 子类静态代码块（只执行一次）</li>\n<li> 父类构造代码块</li>\n<li> 父类构造函数</li>\n<li> 子类构造代码块</li>\n<li> 子类构造函数</li>\n<li> 普通代码块</li>\n</ul>\n<h3 id=\"面向对象的三大特性？\"><a href=\"#面向对象的三大特性？\" class=\"headerlink\" title=\"面向对象的三大特性？\"></a>面向对象的三大特性？</h3><p>继承：对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且派生类可以修改或新增新的方法使之更适合特殊的需求。</p>\n<p>封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏。</p>\n<p>多态：允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现行为是不一样的。</p>\n<h3 id=\"为什么-Java-语言不支持多重继承？\"><a href=\"#为什么-Java-语言不支持多重继承？\" class=\"headerlink\" title=\"为什么 Java 语言不支持多重继承？\"></a>为什么 Java 语言不支持多重继承？</h3><p>为了程序的结构能够更加清晰从而便于维护。假设 Java 语言支持多重继承，类 C 继承自类 A 和类 B，如果类 A 和 B 都有自定义的成员方法 <code>f()</code>，那么当代码中调用类 C 的 <code>f()</code> 会产生二义性。</p>\n<p>Java 语言通过实现多个接口间接支持多重继承，接口由于只包含方法定义，不能有方法的实现，类 C 继承接口 A 与接口 B 时即使它们都有方法<code>f()</code>，也不能直接调用方法，需实现具体的<code>f()</code>方法才能调用，不会产生二义性。</p>\n<p>多重继承会使类型转换、构造方法的调用顺序变得复杂，会影响到性能。</p>\n<h3 id=\"简述-Java-的多态\"><a href=\"#简述-Java-的多态\" class=\"headerlink\" title=\"简述 Java 的多态\"></a>简述 Java 的多态</h3><p>Java 多态可以分为编译时多态和运行时多态。</p>\n<p>编译时多态主要指方法的重载，即通过参数列表的不同来区分不同的方法。</p>\n<p>运行时多态主要指继承父类和实现接口时，可使用父类引用指向子类对象。</p>\n<p>运行时多态的实现：主要依靠方法表，方法表中最先存放的是 Object 类的方法，接下来是该类的父类的方法，最后是该类本身的方法。如果子类改写了父类的方法，那么子类和父类的那些同名方法共享一个方法表项，都被认作是父类的方法。因此可以实现运行时多态。</p>\n<h3 id=\"Java-提供的多态机制？\"><a href=\"#Java-提供的多态机制？\" class=\"headerlink\" title=\"Java 提供的多态机制？\"></a>Java 提供的多态机制？</h3><p>Java 提供了两种用于多态的机制，分别是重载与覆盖。</p>\n<p>重载：重载是指同一个类中有多个同名的方法，但这些方法有不同的参数，在编译期间就可以确定调用哪个方法。</p>\n<p>覆盖：覆盖是指派生类重写基类的方法，使用基类指向其子类的实例对象，或接口的引用变量指向其实现类的实例对象，在程序调用的运行期根据引用变量所指的具体实例对象调用正在运行的那个对象的方法，即需要到运行期才能确定调用哪个方法。</p>\n<h3 id=\"重载与覆盖的区别？\"><a href=\"#重载与覆盖的区别？\" class=\"headerlink\" title=\"重载与覆盖的区别？\"></a>重载与覆盖的区别？</h3><ul>\n<li> 覆盖是父类与子类之间的关系，是垂直关系；重载是同一类中方法之间的关系，是水平关系。</li>\n<li> 覆盖只能由一个方法或一对方法产生关系；重载是多个方法之间的关系。</li>\n<li> 覆盖要求参数列表相同；重载要求参数列表不同。</li>\n<li> 覆盖中，调用方法体是根据对象的类型来决定的，而重载是根据调用时实参表与形参表来对应选择方法体。</li>\n<li> 重载方法可以改变返回值的类型，覆盖方法不能改变返回值的类型。</li>\n</ul>\n<h3 id=\"接口和抽象类的相同点和不同点？\"><a href=\"#接口和抽象类的相同点和不同点？\" class=\"headerlink\" title=\"接口和抽象类的相同点和不同点？\"></a>接口和抽象类的相同点和不同点？</h3><p>相同点:</p>\n<ul>\n<li> 都不能被实例化。</li>\n<li> 接口的实现类或抽象类的子类需实现接口或抽象类中相应的方法才能被实例化。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li> 接口只能有方法定义，不能有方法的实现，而抽象类可以有方法的定义与实现。</li>\n<li> 实现接口的关键字为 implements，继承抽象类的关键字为 extends。一个类可以实现多个接口，只能继承一个抽象类。</li>\n<li> 当子类和父类之间存在逻辑上的层次结构，推荐使用抽象类，有利于功能的累积。当功能不需要，希望支持差别较大的两个或更多对象间的特定交互行为，推荐使用接口。使用接口能降低软件系统的耦合度，便于日后维护或添加删除方法。</li>\n</ul>\n<h3 id=\"简述抽象类与接口的区别\"><a href=\"#简述抽象类与接口的区别\" class=\"headerlink\" title=\"简述抽象类与接口的区别\"></a>简述抽象类与接口的区别</h3><p>抽象类：体现的是 is-a 的关系，如对于 man is a person，就可以将 person 定义为抽象类。</p>\n<p>接口：体现的是 can 的关系。是作为模板实现的。如设置接口 fly，plane 类和 bird 类均可实现该接口。</p>\n<p>一个类只能继承一个抽象类，但可以实现多个接口。</p>\n<h3 id=\"简述内部类及其作用\"><a href=\"#简述内部类及其作用\" class=\"headerlink\" title=\"简述内部类及其作用\"></a>简述内部类及其作用</h3><ul>\n<li> 成员内部类：作为成员对象的内部类。可以访问 private 及以上外部类的属性和方法。外部类想要访问内部类属性或方法时，必须要创建一个内部类对象，然后通过该对象访问内部类的属性或方法。外部类也可访问 private 修饰的内部类属性。</li>\n<li> 局部内部类：存在于方法中的内部类。访问权限类似局部变量，只能访问外部类的 final 变量。</li>\n<li> 匿名内部类：只能使用一次，没有类名，只能访问外部类的 final 变量。</li>\n<li> 静态内部类：类似类的静态成员变量。</li>\n</ul>\n<h3 id=\"Java-语言中关键字-static-的作用是什么？\"><a href=\"#Java-语言中关键字-static-的作用是什么？\" class=\"headerlink\" title=\"Java 语言中关键字 static 的作用是什么？\"></a>Java 语言中关键字 static 的作用是什么？</h3><p>static 的主要作用有两个：</p>\n<ul>\n<li> 为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间。</li>\n<li> 使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法或使用类的属性。</li>\n</ul>\n<p>具体而言 static 又可分为 4 种使用方式：</p>\n<ul>\n<li> 修饰成员变量。用 static 关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加载，这个静态变量就会被分配空间，可以使用“类.静态变量”和“对象.静态变量”的方法使用。</li>\n<li> 修饰成员方法。static 修饰的方法无需创建对象就可以被调用。static 方法中不能使用 this 和 super 关键字，不能调用非 static 方法，只能访问所属类的静态成员变量和静态成员方法。</li>\n<li> 修饰代码块。JVM 在加载类的时候会执行 static 代码块。static 代码块常用于初始化静态变量。static 代码块只会被执行一次。</li>\n<li> 修饰内部类。static 内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法。</li>\n</ul>\n<h3 id=\"为什么要把-String-设计为不可变？\"><a href=\"#为什么要把-String-设计为不可变？\" class=\"headerlink\" title=\"为什么要把 String 设计为不可变？\"></a>为什么要把 String 设计为不可变？</h3><ul>\n<li> 节省空间：字符串常量存储在 JVM 的字符串池中可以被用户共享。</li>\n<li> 提高效率：String 可以被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作。</li>\n<li> 安全：String 常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修改。</li>\n</ul>\n<h3 id=\"简述-String-StringBuffer-与-StringBuilder\"><a href=\"#简述-String-StringBuffer-与-StringBuilder\" class=\"headerlink\" title=\"简述 String/StringBuffer 与 StringBuilder\"></a>简述 String/StringBuffer 与 StringBuilder</h3><p>String 类采用利用 final 修饰的字符数组进行字符串保存，因此不可变。如果对 String 类型对象修改，需要新建对象，将老字符和新增加的字符一并存进去。</p>\n<p>StringBuilder，采用无 final 修饰的字符数组进行保存，因此可变。但线程不安全。</p>\n<p>StringBuffer，采用无 final 修饰的字符数组进行保存，可理解为实现线程安全的 StringBuilder。</p>\n<h3 id=\"判等运算符-与-equals-的区别？\"><a href=\"#判等运算符-与-equals-的区别？\" class=\"headerlink\" title=\"判等运算符==与 equals 的区别？\"></a>判等运算符==与 equals 的区别？</h3><p>== 比较的是引用，equals 比较的是内容。</p>\n<p>如果变量是基础数据类型，== 用于比较其对应值是否相等。如果变量指向的是对象，== 用于比较两个对象是否指向同一块存储空间。</p>\n<p>equals 是 Object 类提供的方法之一，每个 Java 类都继承自 Object 类，所以每个对象都具有 equals 这个方法。Object 类中定义的 equals 方法内部是直接调用 == 比较对象的。但通过覆盖的方法可以让它不是比较引用而是比较数据内容。</p>\n<h3 id=\"简述-Object-类常用方法\"><a href=\"#简述-Object-类常用方法\" class=\"headerlink\" title=\"简述 Object 类常用方法\"></a>简述 Object 类常用方法</h3><ul>\n<li> hashCode：通过对象计算出的散列码。用于 map 型或 equals 方法。需要保证同一个对象多次调用该方法，总返回相同的整型值。</li>\n<li> equals：判断两个对象是否一致。需保证 equals 方法相同对应的对象 hashCode 也相同。</li>\n<li> toString: 用字符串表示该对象</li>\n<li> clone:深拷贝一个对象</li>\n</ul>\n<h3 id=\"Java-中一维数组和二维数组的声明方式？\"><a href=\"#Java-中一维数组和二维数组的声明方式？\" class=\"headerlink\" title=\"Java 中一维数组和二维数组的声明方式？\"></a>Java 中一维数组和二维数组的声明方式？</h3><p>一维数组的声明方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">type arrayName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntype<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>二维数组的声明方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">type arrayName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntype<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayName\ntype<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>其中 type 为基本数据类型或类，arrayName 为数组名字</p>\n<h3 id=\"简述-Java-异常的分类\"><a href=\"#简述-Java-异常的分类\" class=\"headerlink\" title=\"简述 Java 异常的分类\"></a>简述 Java 异常的分类</h3><p>Java 异常分为 Error（程序无法处理的错误），和 Exception（程序本身可以处理的异常）。这两个类均继承 Throwable。</p>\n<p>Error 常见的有 StackOverFlowError、OutOfMemoryError 等等。</p>\n<p>Exception 可分为运行时异常和非运行时异常。对于运行时异常，可以利用 try catch 的方式进行处理，也可以不处理。对于非运行时异常，必须处理，不处理的话程序无法通过编译。</p>\n<h3 id=\"简述-throw-与-throws-的区别\"><a href=\"#简述-throw-与-throws-的区别\" class=\"headerlink\" title=\"简述 throw 与 throws 的区别\"></a>简述 throw 与 throws 的区别</h3><p>throw 一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常。</p>\n<p>throws 一般用于方法声明上，代表该方法可能会抛出的异常列表。</p>\n<h3 id=\"出现在-Java-程序中的-finally-代码块是否一定会执行？\"><a href=\"#出现在-Java-程序中的-finally-代码块是否一定会执行？\" class=\"headerlink\" title=\"出现在 Java 程序中的 finally 代码块是否一定会执行？\"></a>出现在 Java 程序中的 finally 代码块是否一定会执行？</h3><p>当遇到下面情况不会执行。</p>\n<ul>\n<li> 当程序在进入 try 语句块之前就出现异常时会直接结束。</li>\n<li> 当程序在 try 块中强制退出时，如使用 System.exit(0)，也不会执行 finally 块中的代码。</li>\n</ul>\n<p>其它情况下，在 try/catch/finally 语句执行的时候，try 块先执行，当有异常发生，catch 和 finally 进行处理后程序就结束了，当没有异常发生，在执行完 finally 中的代码后，后面代码会继续执行。值得注意的是，当 try/catch 语句块中有 return 时，finally 语句块中的代码会在 return 之前执行。如果 try/catch/finally 块中都有 return 语句，finally 块中的 return 语句会覆盖 try/catch 模块中的 return 语句。</p>\n<h3 id=\"final、finally-和-finalize-的区别是什么？\"><a href=\"#final、finally-和-finalize-的区别是什么？\" class=\"headerlink\" title=\"final、finally 和 finalize 的区别是什么？\"></a>final、finally 和 finalize 的区别是什么？</h3><ul>\n<li> final 用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。</li>\n<li> finally 作为异常处理的一部分，只能在 try/catch 语句中使用，finally 附带一个语句块用来表示这个语句最终一定被执行，经常被用在需要释放资源的情况下。</li>\n<li> finalize 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的 finalize()方法。当垃圾回收器准备好释放对象占用空间时，首先会调用 finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存。</li>\n</ul>\n<h3 id=\"简述泛型\"><a href=\"#简述泛型\" class=\"headerlink\" title=\"简述泛型\"></a>简述泛型</h3><p>泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型在类中称为泛型类、接口中称为泛型接口和方法中称为泛型方法。</p>\n<h3 id=\"简述泛型擦除\"><a href=\"#简述泛型擦除\" class=\"headerlink\" title=\"简述泛型擦除\"></a>简述泛型擦除</h3><p>Java 编译器生成的字节码是不包涵泛型信息的，泛型类型信息将在编译处理是被擦除，这个过程被称为泛型擦除。</p>\n<h3 id=\"简述注解\"><a href=\"#简述注解\" class=\"headerlink\" title=\"简述注解\"></a>简述注解</h3><p>Java 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。</p>\n<p>其可以用于提供信息给编译器，在编译阶段时给软件提供信息进行相关的处理，在运行时处理写相应代码，做对应操作。</p>\n<h3 id=\"简述元注解\"><a href=\"#简述元注解\" class=\"headerlink\" title=\"简述元注解\"></a>简述元注解</h3><p>元注解可以理解为注解的注解，即在注解中使用，实现想要的功能。其具体分为：</p>\n<ul>\n<li> @Retention: 表示注解存在阶段是保留在源码，还是在字节码（类加载）或者运行期（JVM 中运行）。</li>\n<li> @Target：表示注解作用的范围。</li>\n<li> @Documented：将注解中的元素包含到 Javadoc 中去。</li>\n<li> @Inherited：一个被@Inherited 注解了的注解修饰了一个父类，如果他的子类没有被其他注解修饰，则它的子类也继承了父类的注解。</li>\n<li> @Repeatable：被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义。</li>\n</ul>\n<h3 id=\"简述-Java-中-Class-对象\"><a href=\"#简述-Java-中-Class-对象\" class=\"headerlink\" title=\"简述 Java 中 Class 对象\"></a>简述 Java 中 Class 对象</h3><p>java 中对象可以分为实例对象和 Class 对象，每一个类都有一个 Class 对象，其包含了与该类有关的信息。</p>\n<p>获取 Class 对象的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>“类的全限定名”<span class=\"token punctuation\">)</span>\n实例对象<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n类名<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Java-反射机制是什么？\"><a href=\"#Java-反射机制是什么？\" class=\"headerlink\" title=\"Java 反射机制是什么？\"></a>Java 反射机制是什么？</h3><p>Java 反射机制是指在程序的运行过程中可以构造任意一个类的对象、获取任意一个类的成员变量和成员方法、获取任意一个对象所属的类信息、调用任意一个对象的属性和方法。反射机制使得 Java 具有动态获取程序信息和动态调用对象方法的能力。可以通过以下类调用反射 API。</p>\n<ul>\n<li> Class 类：可获得类属性方法</li>\n<li> Field 类：获得类的成员变量</li>\n<li> Method 类：获取类的方法信息</li>\n<li> Construct 类：获取类的构造方法等信息</li>\n</ul>\n<h3 id=\"序列化是什么？\"><a href=\"#序列化是什么？\" class=\"headerlink\" title=\"序列化是什么？\"></a>序列化是什么？</h3><p>序列化是一种将对象转换成字节序列的过程，用于解决在对对象流进行读写操作时所引发的问题。序列化可以将对象的状态写在流里进行网络传输，或者保存到文件、数据库等系统里，并在需要的时候把该流读取出来重新构造成一个相同的对象。</p>\n<h3 id=\"简述-Java-序列化与反序列化的实现\"><a href=\"#简述-Java-序列化与反序列化的实现\" class=\"headerlink\" title=\"简述 Java 序列化与反序列化的实现\"></a>简述 Java 序列化与反序列化的实现</h3><p>序列化：将 java 对象转化为字节序列，由此可以通过网络对象进行传输。</p>\n<p>反序列化：将字节序列转化为 java 对象。</p>\n<p>具体实现：实现 Serializable 接口，或实现 Externalizable 接口中的 writeExternal()与 readExternal()方法。</p>\n<h3 id=\"简述-Java-的-List\"><a href=\"#简述-Java-的-List\" class=\"headerlink\" title=\"简述 Java 的 List\"></a>简述 Java 的 List</h3><p>List 是一个有序队列，在 Java 中有两种实现方式:</p>\n<p>ArrayList 使用数组实现，是容量可变的非线程安全列表，随机访问快，集合扩容时会创建更大的数组，把原有数组复制到新数组。</p>\n<p>LinkedList 本质是双向链表，与 ArrayList 相比插入和删除速度更快，但随机访问元素很慢。</p>\n<h3 id=\"Java-中线程安全的基本数据结构有哪些\"><a href=\"#Java-中线程安全的基本数据结构有哪些\" class=\"headerlink\" title=\"Java 中线程安全的基本数据结构有哪些\"></a>Java 中线程安全的基本数据结构有哪些</h3><ul>\n<li> HashTable: 哈希表的线程安全版，效率低</li>\n<li> ConcurrentHashMap：哈希表的线程安全版，效率高，用于替代 HashTable</li>\n<li> Vector：线程安全版 Arraylist</li>\n<li> Stack：线程安全版栈</li>\n<li> BlockingQueue 及其子类：线程安全版队列</li>\n</ul>\n<h3 id=\"简述-Java-的-Set\"><a href=\"#简述-Java-的-Set\" class=\"headerlink\" title=\"简述 Java 的 Set\"></a>简述 Java 的 Set</h3><p>Set 即集合，该数据结构不允许元素重复且无序。Java 对 Set 有三种实现方式：</p>\n<p>HashSet 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，Value 系统自定义一个名为 PRESENT 的 Object 类型常量。判断元素是否相同时，先比较 hashCode，相同后再利用 equals 比较，查询 O(1)</p>\n<p>LinkedHashSet 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。</p>\n<p>TreeSet 通过 TreeMap 实现的，底层数据结构是红黑树，添加元素到集合时按照比较规则将其插入合适的位置，保证插入后的集合仍然有序。查询 O(logn)</p>\n<h3 id=\"简述-Java-的-HashMap\"><a href=\"#简述-Java-的-HashMap\" class=\"headerlink\" title=\"简述 Java 的 HashMap\"></a>简述 Java 的 HashMap</h3><p>JDK8 之前底层实现是数组 + 链表，JDK8 改为数组 + 链表/红黑树。主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个链表上。</p>\n<p>table 数组记录 HashMap 的数据，每个下标对应一条链表，所有哈希冲突的数据都会被存放到同一条链表，Node/Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。在 JDK8 后链表超过 8 会转化为红黑树。</p>\n<p>若当前数据/总数据容量&gt;负载因子，Hashmap 将执行扩容操作。默认初始化容量为 16，扩容容量必须是 2 的幂次方、最大容量为 1&lt;&lt; 30 、默认加载因子为 0.75。</p>\n<h3 id=\"为何-HashMap-线程不安全\"><a href=\"#为何-HashMap-线程不安全\" class=\"headerlink\" title=\"为何 HashMap 线程不安全\"></a>为何 HashMap 线程不安全</h3><p>在 JDK1.7 中，HashMap 采用头插法插入元素，因此并发情况下会导致环形链表，产生死循环。</p>\n<p>虽然 JDK1.8 采用了尾插法解决了这个问题，但是并发下的 put 操作也会使前一个 key 被后一个 key 覆盖。</p>\n<p>由于 HashMap 有扩容机制存在，也存在 A 线程进行扩容后，B 线程执行 get 方法出现失误的情况。</p>\n<h3 id=\"简述-Java-的-TreeMap\"><a href=\"#简述-Java-的-TreeMap\" class=\"headerlink\" title=\"简述 Java 的 TreeMap\"></a>简述 Java 的 TreeMap</h3><p>TreeMap 是底层利用红黑树实现的 Map 结构，底层实现是一棵平衡的排序二叉树，由于红黑树的插入、删除、遍历时间复杂度都为 O(logN)，所以性能上低于哈希表。但是哈希表无法提供键值对的有序输出，红黑树可以按照键的值的大小有序输出。</p>\n<h3 id=\"ArrayList、Vector-和-LinkedList-有什么共同点与区别？\"><a href=\"#ArrayList、Vector-和-LinkedList-有什么共同点与区别？\" class=\"headerlink\" title=\"ArrayList、Vector 和 LinkedList 有什么共同点与区别？\"></a>ArrayList、Vector 和 LinkedList 有什么共同点与区别？</h3><ul>\n<li> ArrayList、Vector 和 LinkedList 都是可伸缩的数组，即可以动态改变长度的数组。</li>\n<li> ArrayList 和 Vector 都是基于存储元素的 Object[] array 来实现的，它们会在内存中开辟一块连续的空间来存储，支持下标、索引访问。但在涉及插入元素时可能需要移动容器中的元素，插入效率较低。当存储元素超过容器的初始化容量大小，ArrayList 与 Vector 均会进行扩容。</li>\n<li> Vector 是线程安全的，其大部分方法是直接或间接同步的。ArrayList 不是线程安全的，其方法不具有同步性质。LinkedList 也不是线程安全的。</li>\n<li> LinkedList 采用双向列表实现，对数据索引需要从头开始遍历，因此随机访问效率较低，但在插入元素的时候不需要对数据进行移动，插入效率较高。</li>\n</ul>\n<h3 id=\"HashMap-和-Hashtable-有什么区别？\"><a href=\"#HashMap-和-Hashtable-有什么区别？\" class=\"headerlink\" title=\"HashMap 和 Hashtable 有什么区别？\"></a>HashMap 和 Hashtable 有什么区别？</h3><ul>\n<li> HashMap 是 Hashtable 的轻量级实现，HashMap 允许 key 和 value 为 null，但最多允许一条记录的 key 为 null.而 HashTable 不允许。</li>\n<li> HashTable 中的方法是线程安全的，而 HashMap 不是。在多线程访问 HashMap 需要提供额外的同步机制。</li>\n<li> Hashtable 使用 Enumeration 进行遍历，HashMap 使用 Iterator 进行遍历。</li>\n</ul>\n<h3 id=\"如何决定使用-HashMap-还是-TreeMap\"><a href=\"#如何决定使用-HashMap-还是-TreeMap\" class=\"headerlink\" title=\"如何决定使用 HashMap 还是 TreeMap?\"></a>如何决定使用 HashMap 还是 TreeMap?</h3><p>如果对 Map 进行插入、删除或定位一个元素的操作更频繁，HashMap 是更好的选择。如果需要对 key 集合进行有序的遍历，TreeMap 是更好的选择。</p>\n<h3 id=\"HashSet-中，equals-与-hashCode-之间的关系？\"><a href=\"#HashSet-中，equals-与-hashCode-之间的关系？\" class=\"headerlink\" title=\"HashSet 中，equals 与 hashCode 之间的关系？\"></a>HashSet 中，equals 与 hashCode 之间的关系？</h3><p>equals 和 hashCode 这两个方法都是从 object 类中继承过来的，equals 主要用于判断对象的内存地址引用是否是同一个地址；hashCode 根据定义的哈希规则将对象的内存地址转换为一个哈希码。HashSet 中存储的元素是不能重复的，主要通过 hashCode 与 equals 两个方法来判断存储的对象是否相同：</p>\n<ul>\n<li> 如果两个对象的 hashCode 值不同，说明两个对象不相同。</li>\n<li> 如果两个对象的 hashCode 值相同，接着会调用对象的 equals 方法，如果 equlas 方法的返回结果为 true，那么说明两个对象相同，否则不相同。</li>\n</ul>\n<h3 id=\"fail-fast-和-fail-safe-迭代器的区别是什么？\"><a href=\"#fail-fast-和-fail-safe-迭代器的区别是什么？\" class=\"headerlink\" title=\"fail-fast 和 fail-safe 迭代器的区别是什么？\"></a>fail-fast 和 fail-safe 迭代器的区别是什么？</h3><ul>\n<li> fail-fast 直接在容器上进行，在遍历过程中，一旦发现容器中的数据被修改，就会立刻抛出 ConcurrentModificationException 异常从而导致遍历失败。常见的使用 fail-fast 方式的容器有 HashMap 和 ArrayList 等。</li>\n<li> fail-safe 这种遍历基于容器的一个克隆。因此对容器中的内容修改不影响遍历。常见的使用 fail-safe 方式遍历的容器有 ConcurrentHashMap 和 CopyOnWriteArrayList。</li>\n</ul>\n<h3 id=\"Collection-和-Collections-有什么区别？\"><a href=\"#Collection-和-Collections-有什么区别？\" class=\"headerlink\" title=\"Collection 和 Collections 有什么区别？\"></a>Collection 和 Collections 有什么区别？</h3><ul>\n<li> Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如 List、Set 等。</li>\n<li> Collections 是一个包装类，包含了很多静态方法、不能被实例化，而是作为工具类使用，比如提供的排序方法：Collections.sort(list);提供的反转方法：Collections.reverse(list)。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h3 id=\"Java-语言具有哪些特点？\"><a href=\"#Java-语言具有哪些特点？\" class=\"headerlink\" title=\"Java 语言具有哪些特点？\"></a>Java 语言具有哪些特点？</h3><ul>\n<li> Java 为纯面向对象的语言。它能够直接反应现实生活中的对象。</li>\n<li> 具有平台无关性。Java 利用 Java 虚拟机运行字节码，无论是在 Windows、Linux 还是 MacOS 等其它平台对 Java 程序进行编译，编译后的程序可在其它平台运行。</li>\n<li> Java 为解释型语言，编译器把 Java 代码编译成平台无关的中间代码，然后在 JVM 上解释运行，具有很好的可移植性。</li>\n<li> Java 提供了很多内置类库。如对多线程支持，对网络通信支持，最重要的一点是提供了垃圾回收器。</li>\n<li> Java 具有较好的安全性和健壮性。Java 提供了异常处理和垃圾回收机制，去除了 C++中难以理解的指针特性。</li>\n</ul>\n<h3 id=\"JDK-与-JRE-有什么区别？\"><a href=\"#JDK-与-JRE-有什么区别？\" class=\"headerlink\" title=\"JDK 与 JRE 有什么区别？\"></a>JDK 与 JRE 有什么区别？</h3><ul>\n<li> JDK：Java 开发工具包（Java Development Kit），提供了 Java 的开发环境和运行环境。</li>\n<li> JRE：Java 运行环境(Java Runtime Environment)，提供了 Java 运行所需的环境。</li>\n<li> JDK 包含了 JRE。如果只运行 Java 程序，安装 JRE 即可。要编写 Java 程序需安装 JDK.</li>\n</ul>\n<h3 id=\"简述-Java-基本数据类型\"><a href=\"#简述-Java-基本数据类型\" class=\"headerlink\" title=\"简述 Java 基本数据类型\"></a>简述 Java 基本数据类型</h3><ul>\n<li> byte: 占用 1 个字节，取值范围-128 ~ 127</li>\n<li> short: 占用 2 个字节，取值范围-2^15^ ~ 2^15^-1</li>\n<li> int：占用 4 个字节，取值范围-2^31^ ~ 2^31^-1</li>\n<li> long：占用 8 个字节</li>\n<li> float：占用 4 个字节</li>\n<li> double：占用 8 个字节</li>\n<li> char: 占用 2 个字节</li>\n<li> boolean：占用大小根据实现虚拟机不同有所差异</li>\n</ul>\n<h3 id=\"简述自动装箱拆箱\"><a href=\"#简述自动装箱拆箱\" class=\"headerlink\" title=\"简述自动装箱拆箱\"></a>简述自动装箱拆箱</h3><p>对于 Java 基本数据类型，均对应一个包装类。</p>\n<p>装箱就是自动将基本数据类型转换为包装器类型，如 int-&gt;Integer</p>\n<p>拆箱就是自动将包装器类型转换为基本数据类型，如 Integer-&gt;int</p>\n<h3 id=\"简述-Java-访问修饰符\"><a href=\"#简述-Java-访问修饰符\" class=\"headerlink\" title=\"简述 Java 访问修饰符\"></a>简述 Java 访问修饰符</h3><ul>\n<li> default: 默认访问修饰符，在同一包内可见</li>\n<li> private: 在同一类内可见，不能修饰类</li>\n<li> protected : 对同一包内的类和所有子类可见，不能修饰类</li>\n<li> public: 对所有类可见</li>\n</ul>\n<h3 id=\"构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？\"><a href=\"#构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？\" class=\"headerlink\" title=\"构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？\"></a>构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？</h3><p>先后顺序：静态成员变量、成员变量、构造方法。</p>\n<p>详细的先后顺序：父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数。</p>\n<h3 id=\"Java-代码块执行顺序\"><a href=\"#Java-代码块执行顺序\" class=\"headerlink\" title=\"Java 代码块执行顺序\"></a>Java 代码块执行顺序</h3><ul>\n<li> 父类静态代码块（只执行一次）</li>\n<li> 子类静态代码块（只执行一次）</li>\n<li> 父类构造代码块</li>\n<li> 父类构造函数</li>\n<li> 子类构造代码块</li>\n<li> 子类构造函数</li>\n<li> 普通代码块</li>\n</ul>\n<h3 id=\"面向对象的三大特性？\"><a href=\"#面向对象的三大特性？\" class=\"headerlink\" title=\"面向对象的三大特性？\"></a>面向对象的三大特性？</h3><p>继承：对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且派生类可以修改或新增新的方法使之更适合特殊的需求。</p>\n<p>封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏。</p>\n<p>多态：允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现行为是不一样的。</p>\n<h3 id=\"为什么-Java-语言不支持多重继承？\"><a href=\"#为什么-Java-语言不支持多重继承？\" class=\"headerlink\" title=\"为什么 Java 语言不支持多重继承？\"></a>为什么 Java 语言不支持多重继承？</h3><p>为了程序的结构能够更加清晰从而便于维护。假设 Java 语言支持多重继承，类 C 继承自类 A 和类 B，如果类 A 和 B 都有自定义的成员方法 <code>f()</code>，那么当代码中调用类 C 的 <code>f()</code> 会产生二义性。</p>\n<p>Java 语言通过实现多个接口间接支持多重继承，接口由于只包含方法定义，不能有方法的实现，类 C 继承接口 A 与接口 B 时即使它们都有方法<code>f()</code>，也不能直接调用方法，需实现具体的<code>f()</code>方法才能调用，不会产生二义性。</p>\n<p>多重继承会使类型转换、构造方法的调用顺序变得复杂，会影响到性能。</p>\n<h3 id=\"简述-Java-的多态\"><a href=\"#简述-Java-的多态\" class=\"headerlink\" title=\"简述 Java 的多态\"></a>简述 Java 的多态</h3><p>Java 多态可以分为编译时多态和运行时多态。</p>\n<p>编译时多态主要指方法的重载，即通过参数列表的不同来区分不同的方法。</p>\n<p>运行时多态主要指继承父类和实现接口时，可使用父类引用指向子类对象。</p>\n<p>运行时多态的实现：主要依靠方法表，方法表中最先存放的是 Object 类的方法，接下来是该类的父类的方法，最后是该类本身的方法。如果子类改写了父类的方法，那么子类和父类的那些同名方法共享一个方法表项，都被认作是父类的方法。因此可以实现运行时多态。</p>\n<h3 id=\"Java-提供的多态机制？\"><a href=\"#Java-提供的多态机制？\" class=\"headerlink\" title=\"Java 提供的多态机制？\"></a>Java 提供的多态机制？</h3><p>Java 提供了两种用于多态的机制，分别是重载与覆盖。</p>\n<p>重载：重载是指同一个类中有多个同名的方法，但这些方法有不同的参数，在编译期间就可以确定调用哪个方法。</p>\n<p>覆盖：覆盖是指派生类重写基类的方法，使用基类指向其子类的实例对象，或接口的引用变量指向其实现类的实例对象，在程序调用的运行期根据引用变量所指的具体实例对象调用正在运行的那个对象的方法，即需要到运行期才能确定调用哪个方法。</p>\n<h3 id=\"重载与覆盖的区别？\"><a href=\"#重载与覆盖的区别？\" class=\"headerlink\" title=\"重载与覆盖的区别？\"></a>重载与覆盖的区别？</h3><ul>\n<li> 覆盖是父类与子类之间的关系，是垂直关系；重载是同一类中方法之间的关系，是水平关系。</li>\n<li> 覆盖只能由一个方法或一对方法产生关系；重载是多个方法之间的关系。</li>\n<li> 覆盖要求参数列表相同；重载要求参数列表不同。</li>\n<li> 覆盖中，调用方法体是根据对象的类型来决定的，而重载是根据调用时实参表与形参表来对应选择方法体。</li>\n<li> 重载方法可以改变返回值的类型，覆盖方法不能改变返回值的类型。</li>\n</ul>\n<h3 id=\"接口和抽象类的相同点和不同点？\"><a href=\"#接口和抽象类的相同点和不同点？\" class=\"headerlink\" title=\"接口和抽象类的相同点和不同点？\"></a>接口和抽象类的相同点和不同点？</h3><p>相同点:</p>\n<ul>\n<li> 都不能被实例化。</li>\n<li> 接口的实现类或抽象类的子类需实现接口或抽象类中相应的方法才能被实例化。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li> 接口只能有方法定义，不能有方法的实现，而抽象类可以有方法的定义与实现。</li>\n<li> 实现接口的关键字为 implements，继承抽象类的关键字为 extends。一个类可以实现多个接口，只能继承一个抽象类。</li>\n<li> 当子类和父类之间存在逻辑上的层次结构，推荐使用抽象类，有利于功能的累积。当功能不需要，希望支持差别较大的两个或更多对象间的特定交互行为，推荐使用接口。使用接口能降低软件系统的耦合度，便于日后维护或添加删除方法。</li>\n</ul>\n<h3 id=\"简述抽象类与接口的区别\"><a href=\"#简述抽象类与接口的区别\" class=\"headerlink\" title=\"简述抽象类与接口的区别\"></a>简述抽象类与接口的区别</h3><p>抽象类：体现的是 is-a 的关系，如对于 man is a person，就可以将 person 定义为抽象类。</p>\n<p>接口：体现的是 can 的关系。是作为模板实现的。如设置接口 fly，plane 类和 bird 类均可实现该接口。</p>\n<p>一个类只能继承一个抽象类，但可以实现多个接口。</p>\n<h3 id=\"简述内部类及其作用\"><a href=\"#简述内部类及其作用\" class=\"headerlink\" title=\"简述内部类及其作用\"></a>简述内部类及其作用</h3><ul>\n<li> 成员内部类：作为成员对象的内部类。可以访问 private 及以上外部类的属性和方法。外部类想要访问内部类属性或方法时，必须要创建一个内部类对象，然后通过该对象访问内部类的属性或方法。外部类也可访问 private 修饰的内部类属性。</li>\n<li> 局部内部类：存在于方法中的内部类。访问权限类似局部变量，只能访问外部类的 final 变量。</li>\n<li> 匿名内部类：只能使用一次，没有类名，只能访问外部类的 final 变量。</li>\n<li> 静态内部类：类似类的静态成员变量。</li>\n</ul>\n<h3 id=\"Java-语言中关键字-static-的作用是什么？\"><a href=\"#Java-语言中关键字-static-的作用是什么？\" class=\"headerlink\" title=\"Java 语言中关键字 static 的作用是什么？\"></a>Java 语言中关键字 static 的作用是什么？</h3><p>static 的主要作用有两个：</p>\n<ul>\n<li> 为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间。</li>\n<li> 使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法或使用类的属性。</li>\n</ul>\n<p>具体而言 static 又可分为 4 种使用方式：</p>\n<ul>\n<li> 修饰成员变量。用 static 关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加载，这个静态变量就会被分配空间，可以使用“类.静态变量”和“对象.静态变量”的方法使用。</li>\n<li> 修饰成员方法。static 修饰的方法无需创建对象就可以被调用。static 方法中不能使用 this 和 super 关键字，不能调用非 static 方法，只能访问所属类的静态成员变量和静态成员方法。</li>\n<li> 修饰代码块。JVM 在加载类的时候会执行 static 代码块。static 代码块常用于初始化静态变量。static 代码块只会被执行一次。</li>\n<li> 修饰内部类。static 内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法。</li>\n</ul>\n<h3 id=\"为什么要把-String-设计为不可变？\"><a href=\"#为什么要把-String-设计为不可变？\" class=\"headerlink\" title=\"为什么要把 String 设计为不可变？\"></a>为什么要把 String 设计为不可变？</h3><ul>\n<li> 节省空间：字符串常量存储在 JVM 的字符串池中可以被用户共享。</li>\n<li> 提高效率：String 可以被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作。</li>\n<li> 安全：String 常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修改。</li>\n</ul>\n<h3 id=\"简述-String-StringBuffer-与-StringBuilder\"><a href=\"#简述-String-StringBuffer-与-StringBuilder\" class=\"headerlink\" title=\"简述 String/StringBuffer 与 StringBuilder\"></a>简述 String/StringBuffer 与 StringBuilder</h3><p>String 类采用利用 final 修饰的字符数组进行字符串保存，因此不可变。如果对 String 类型对象修改，需要新建对象，将老字符和新增加的字符一并存进去。</p>\n<p>StringBuilder，采用无 final 修饰的字符数组进行保存，因此可变。但线程不安全。</p>\n<p>StringBuffer，采用无 final 修饰的字符数组进行保存，可理解为实现线程安全的 StringBuilder。</p>\n<h3 id=\"判等运算符-与-equals-的区别？\"><a href=\"#判等运算符-与-equals-的区别？\" class=\"headerlink\" title=\"判等运算符==与 equals 的区别？\"></a>判等运算符==与 equals 的区别？</h3><p>== 比较的是引用，equals 比较的是内容。</p>\n<p>如果变量是基础数据类型，== 用于比较其对应值是否相等。如果变量指向的是对象，== 用于比较两个对象是否指向同一块存储空间。</p>\n<p>equals 是 Object 类提供的方法之一，每个 Java 类都继承自 Object 类，所以每个对象都具有 equals 这个方法。Object 类中定义的 equals 方法内部是直接调用 == 比较对象的。但通过覆盖的方法可以让它不是比较引用而是比较数据内容。</p>\n<h3 id=\"简述-Object-类常用方法\"><a href=\"#简述-Object-类常用方法\" class=\"headerlink\" title=\"简述 Object 类常用方法\"></a>简述 Object 类常用方法</h3><ul>\n<li> hashCode：通过对象计算出的散列码。用于 map 型或 equals 方法。需要保证同一个对象多次调用该方法，总返回相同的整型值。</li>\n<li> equals：判断两个对象是否一致。需保证 equals 方法相同对应的对象 hashCode 也相同。</li>\n<li> toString: 用字符串表示该对象</li>\n<li> clone:深拷贝一个对象</li>\n</ul>\n<h3 id=\"Java-中一维数组和二维数组的声明方式？\"><a href=\"#Java-中一维数组和二维数组的声明方式？\" class=\"headerlink\" title=\"Java 中一维数组和二维数组的声明方式？\"></a>Java 中一维数组和二维数组的声明方式？</h3><p>一维数组的声明方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">type arrayName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntype<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>二维数组的声明方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">type arrayName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntype<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayName\ntype<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>其中 type 为基本数据类型或类，arrayName 为数组名字</p>\n<h3 id=\"简述-Java-异常的分类\"><a href=\"#简述-Java-异常的分类\" class=\"headerlink\" title=\"简述 Java 异常的分类\"></a>简述 Java 异常的分类</h3><p>Java 异常分为 Error（程序无法处理的错误），和 Exception（程序本身可以处理的异常）。这两个类均继承 Throwable。</p>\n<p>Error 常见的有 StackOverFlowError、OutOfMemoryError 等等。</p>\n<p>Exception 可分为运行时异常和非运行时异常。对于运行时异常，可以利用 try catch 的方式进行处理，也可以不处理。对于非运行时异常，必须处理，不处理的话程序无法通过编译。</p>\n<h3 id=\"简述-throw-与-throws-的区别\"><a href=\"#简述-throw-与-throws-的区别\" class=\"headerlink\" title=\"简述 throw 与 throws 的区别\"></a>简述 throw 与 throws 的区别</h3><p>throw 一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常。</p>\n<p>throws 一般用于方法声明上，代表该方法可能会抛出的异常列表。</p>\n<h3 id=\"出现在-Java-程序中的-finally-代码块是否一定会执行？\"><a href=\"#出现在-Java-程序中的-finally-代码块是否一定会执行？\" class=\"headerlink\" title=\"出现在 Java 程序中的 finally 代码块是否一定会执行？\"></a>出现在 Java 程序中的 finally 代码块是否一定会执行？</h3><p>当遇到下面情况不会执行。</p>\n<ul>\n<li> 当程序在进入 try 语句块之前就出现异常时会直接结束。</li>\n<li> 当程序在 try 块中强制退出时，如使用 System.exit(0)，也不会执行 finally 块中的代码。</li>\n</ul>\n<p>其它情况下，在 try/catch/finally 语句执行的时候，try 块先执行，当有异常发生，catch 和 finally 进行处理后程序就结束了，当没有异常发生，在执行完 finally 中的代码后，后面代码会继续执行。值得注意的是，当 try/catch 语句块中有 return 时，finally 语句块中的代码会在 return 之前执行。如果 try/catch/finally 块中都有 return 语句，finally 块中的 return 语句会覆盖 try/catch 模块中的 return 语句。</p>\n<h3 id=\"final、finally-和-finalize-的区别是什么？\"><a href=\"#final、finally-和-finalize-的区别是什么？\" class=\"headerlink\" title=\"final、finally 和 finalize 的区别是什么？\"></a>final、finally 和 finalize 的区别是什么？</h3><ul>\n<li> final 用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。</li>\n<li> finally 作为异常处理的一部分，只能在 try/catch 语句中使用，finally 附带一个语句块用来表示这个语句最终一定被执行，经常被用在需要释放资源的情况下。</li>\n<li> finalize 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的 finalize()方法。当垃圾回收器准备好释放对象占用空间时，首先会调用 finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存。</li>\n</ul>\n<h3 id=\"简述泛型\"><a href=\"#简述泛型\" class=\"headerlink\" title=\"简述泛型\"></a>简述泛型</h3><p>泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型在类中称为泛型类、接口中称为泛型接口和方法中称为泛型方法。</p>\n<h3 id=\"简述泛型擦除\"><a href=\"#简述泛型擦除\" class=\"headerlink\" title=\"简述泛型擦除\"></a>简述泛型擦除</h3><p>Java 编译器生成的字节码是不包涵泛型信息的，泛型类型信息将在编译处理是被擦除，这个过程被称为泛型擦除。</p>\n<h3 id=\"简述注解\"><a href=\"#简述注解\" class=\"headerlink\" title=\"简述注解\"></a>简述注解</h3><p>Java 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。</p>\n<p>其可以用于提供信息给编译器，在编译阶段时给软件提供信息进行相关的处理，在运行时处理写相应代码，做对应操作。</p>\n<h3 id=\"简述元注解\"><a href=\"#简述元注解\" class=\"headerlink\" title=\"简述元注解\"></a>简述元注解</h3><p>元注解可以理解为注解的注解，即在注解中使用，实现想要的功能。其具体分为：</p>\n<ul>\n<li> @Retention: 表示注解存在阶段是保留在源码，还是在字节码（类加载）或者运行期（JVM 中运行）。</li>\n<li> @Target：表示注解作用的范围。</li>\n<li> @Documented：将注解中的元素包含到 Javadoc 中去。</li>\n<li> @Inherited：一个被@Inherited 注解了的注解修饰了一个父类，如果他的子类没有被其他注解修饰，则它的子类也继承了父类的注解。</li>\n<li> @Repeatable：被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义。</li>\n</ul>\n<h3 id=\"简述-Java-中-Class-对象\"><a href=\"#简述-Java-中-Class-对象\" class=\"headerlink\" title=\"简述 Java 中 Class 对象\"></a>简述 Java 中 Class 对象</h3><p>java 中对象可以分为实例对象和 Class 对象，每一个类都有一个 Class 对象，其包含了与该类有关的信息。</p>\n<p>获取 Class 对象的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>“类的全限定名”<span class=\"token punctuation\">)</span>\n实例对象<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n类名<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Java-反射机制是什么？\"><a href=\"#Java-反射机制是什么？\" class=\"headerlink\" title=\"Java 反射机制是什么？\"></a>Java 反射机制是什么？</h3><p>Java 反射机制是指在程序的运行过程中可以构造任意一个类的对象、获取任意一个类的成员变量和成员方法、获取任意一个对象所属的类信息、调用任意一个对象的属性和方法。反射机制使得 Java 具有动态获取程序信息和动态调用对象方法的能力。可以通过以下类调用反射 API。</p>\n<ul>\n<li> Class 类：可获得类属性方法</li>\n<li> Field 类：获得类的成员变量</li>\n<li> Method 类：获取类的方法信息</li>\n<li> Construct 类：获取类的构造方法等信息</li>\n</ul>\n<h3 id=\"序列化是什么？\"><a href=\"#序列化是什么？\" class=\"headerlink\" title=\"序列化是什么？\"></a>序列化是什么？</h3><p>序列化是一种将对象转换成字节序列的过程，用于解决在对对象流进行读写操作时所引发的问题。序列化可以将对象的状态写在流里进行网络传输，或者保存到文件、数据库等系统里，并在需要的时候把该流读取出来重新构造成一个相同的对象。</p>\n<h3 id=\"简述-Java-序列化与反序列化的实现\"><a href=\"#简述-Java-序列化与反序列化的实现\" class=\"headerlink\" title=\"简述 Java 序列化与反序列化的实现\"></a>简述 Java 序列化与反序列化的实现</h3><p>序列化：将 java 对象转化为字节序列，由此可以通过网络对象进行传输。</p>\n<p>反序列化：将字节序列转化为 java 对象。</p>\n<p>具体实现：实现 Serializable 接口，或实现 Externalizable 接口中的 writeExternal()与 readExternal()方法。</p>\n<h3 id=\"简述-Java-的-List\"><a href=\"#简述-Java-的-List\" class=\"headerlink\" title=\"简述 Java 的 List\"></a>简述 Java 的 List</h3><p>List 是一个有序队列，在 Java 中有两种实现方式:</p>\n<p>ArrayList 使用数组实现，是容量可变的非线程安全列表，随机访问快，集合扩容时会创建更大的数组，把原有数组复制到新数组。</p>\n<p>LinkedList 本质是双向链表，与 ArrayList 相比插入和删除速度更快，但随机访问元素很慢。</p>\n<h3 id=\"Java-中线程安全的基本数据结构有哪些\"><a href=\"#Java-中线程安全的基本数据结构有哪些\" class=\"headerlink\" title=\"Java 中线程安全的基本数据结构有哪些\"></a>Java 中线程安全的基本数据结构有哪些</h3><ul>\n<li> HashTable: 哈希表的线程安全版，效率低</li>\n<li> ConcurrentHashMap：哈希表的线程安全版，效率高，用于替代 HashTable</li>\n<li> Vector：线程安全版 Arraylist</li>\n<li> Stack：线程安全版栈</li>\n<li> BlockingQueue 及其子类：线程安全版队列</li>\n</ul>\n<h3 id=\"简述-Java-的-Set\"><a href=\"#简述-Java-的-Set\" class=\"headerlink\" title=\"简述 Java 的 Set\"></a>简述 Java 的 Set</h3><p>Set 即集合，该数据结构不允许元素重复且无序。Java 对 Set 有三种实现方式：</p>\n<p>HashSet 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，Value 系统自定义一个名为 PRESENT 的 Object 类型常量。判断元素是否相同时，先比较 hashCode，相同后再利用 equals 比较，查询 O(1)</p>\n<p>LinkedHashSet 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。</p>\n<p>TreeSet 通过 TreeMap 实现的，底层数据结构是红黑树，添加元素到集合时按照比较规则将其插入合适的位置，保证插入后的集合仍然有序。查询 O(logn)</p>\n<h3 id=\"简述-Java-的-HashMap\"><a href=\"#简述-Java-的-HashMap\" class=\"headerlink\" title=\"简述 Java 的 HashMap\"></a>简述 Java 的 HashMap</h3><p>JDK8 之前底层实现是数组 + 链表，JDK8 改为数组 + 链表/红黑树。主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个链表上。</p>\n<p>table 数组记录 HashMap 的数据，每个下标对应一条链表，所有哈希冲突的数据都会被存放到同一条链表，Node/Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。在 JDK8 后链表超过 8 会转化为红黑树。</p>\n<p>若当前数据/总数据容量&gt;负载因子，Hashmap 将执行扩容操作。默认初始化容量为 16，扩容容量必须是 2 的幂次方、最大容量为 1&lt;&lt; 30 、默认加载因子为 0.75。</p>\n<h3 id=\"为何-HashMap-线程不安全\"><a href=\"#为何-HashMap-线程不安全\" class=\"headerlink\" title=\"为何 HashMap 线程不安全\"></a>为何 HashMap 线程不安全</h3><p>在 JDK1.7 中，HashMap 采用头插法插入元素，因此并发情况下会导致环形链表，产生死循环。</p>\n<p>虽然 JDK1.8 采用了尾插法解决了这个问题，但是并发下的 put 操作也会使前一个 key 被后一个 key 覆盖。</p>\n<p>由于 HashMap 有扩容机制存在，也存在 A 线程进行扩容后，B 线程执行 get 方法出现失误的情况。</p>\n<h3 id=\"简述-Java-的-TreeMap\"><a href=\"#简述-Java-的-TreeMap\" class=\"headerlink\" title=\"简述 Java 的 TreeMap\"></a>简述 Java 的 TreeMap</h3><p>TreeMap 是底层利用红黑树实现的 Map 结构，底层实现是一棵平衡的排序二叉树，由于红黑树的插入、删除、遍历时间复杂度都为 O(logN)，所以性能上低于哈希表。但是哈希表无法提供键值对的有序输出，红黑树可以按照键的值的大小有序输出。</p>\n<h3 id=\"ArrayList、Vector-和-LinkedList-有什么共同点与区别？\"><a href=\"#ArrayList、Vector-和-LinkedList-有什么共同点与区别？\" class=\"headerlink\" title=\"ArrayList、Vector 和 LinkedList 有什么共同点与区别？\"></a>ArrayList、Vector 和 LinkedList 有什么共同点与区别？</h3><ul>\n<li> ArrayList、Vector 和 LinkedList 都是可伸缩的数组，即可以动态改变长度的数组。</li>\n<li> ArrayList 和 Vector 都是基于存储元素的 Object[] array 来实现的，它们会在内存中开辟一块连续的空间来存储，支持下标、索引访问。但在涉及插入元素时可能需要移动容器中的元素，插入效率较低。当存储元素超过容器的初始化容量大小，ArrayList 与 Vector 均会进行扩容。</li>\n<li> Vector 是线程安全的，其大部分方法是直接或间接同步的。ArrayList 不是线程安全的，其方法不具有同步性质。LinkedList 也不是线程安全的。</li>\n<li> LinkedList 采用双向列表实现，对数据索引需要从头开始遍历，因此随机访问效率较低，但在插入元素的时候不需要对数据进行移动，插入效率较高。</li>\n</ul>\n<h3 id=\"HashMap-和-Hashtable-有什么区别？\"><a href=\"#HashMap-和-Hashtable-有什么区别？\" class=\"headerlink\" title=\"HashMap 和 Hashtable 有什么区别？\"></a>HashMap 和 Hashtable 有什么区别？</h3><ul>\n<li> HashMap 是 Hashtable 的轻量级实现，HashMap 允许 key 和 value 为 null，但最多允许一条记录的 key 为 null.而 HashTable 不允许。</li>\n<li> HashTable 中的方法是线程安全的，而 HashMap 不是。在多线程访问 HashMap 需要提供额外的同步机制。</li>\n<li> Hashtable 使用 Enumeration 进行遍历，HashMap 使用 Iterator 进行遍历。</li>\n</ul>\n<h3 id=\"如何决定使用-HashMap-还是-TreeMap\"><a href=\"#如何决定使用-HashMap-还是-TreeMap\" class=\"headerlink\" title=\"如何决定使用 HashMap 还是 TreeMap?\"></a>如何决定使用 HashMap 还是 TreeMap?</h3><p>如果对 Map 进行插入、删除或定位一个元素的操作更频繁，HashMap 是更好的选择。如果需要对 key 集合进行有序的遍历，TreeMap 是更好的选择。</p>\n<h3 id=\"HashSet-中，equals-与-hashCode-之间的关系？\"><a href=\"#HashSet-中，equals-与-hashCode-之间的关系？\" class=\"headerlink\" title=\"HashSet 中，equals 与 hashCode 之间的关系？\"></a>HashSet 中，equals 与 hashCode 之间的关系？</h3><p>equals 和 hashCode 这两个方法都是从 object 类中继承过来的，equals 主要用于判断对象的内存地址引用是否是同一个地址；hashCode 根据定义的哈希规则将对象的内存地址转换为一个哈希码。HashSet 中存储的元素是不能重复的，主要通过 hashCode 与 equals 两个方法来判断存储的对象是否相同：</p>\n<ul>\n<li> 如果两个对象的 hashCode 值不同，说明两个对象不相同。</li>\n<li> 如果两个对象的 hashCode 值相同，接着会调用对象的 equals 方法，如果 equlas 方法的返回结果为 true，那么说明两个对象相同，否则不相同。</li>\n</ul>\n<h3 id=\"fail-fast-和-fail-safe-迭代器的区别是什么？\"><a href=\"#fail-fast-和-fail-safe-迭代器的区别是什么？\" class=\"headerlink\" title=\"fail-fast 和 fail-safe 迭代器的区别是什么？\"></a>fail-fast 和 fail-safe 迭代器的区别是什么？</h3><ul>\n<li> fail-fast 直接在容器上进行，在遍历过程中，一旦发现容器中的数据被修改，就会立刻抛出 ConcurrentModificationException 异常从而导致遍历失败。常见的使用 fail-fast 方式的容器有 HashMap 和 ArrayList 等。</li>\n<li> fail-safe 这种遍历基于容器的一个克隆。因此对容器中的内容修改不影响遍历。常见的使用 fail-safe 方式遍历的容器有 ConcurrentHashMap 和 CopyOnWriteArrayList。</li>\n</ul>\n<h3 id=\"Collection-和-Collections-有什么区别？\"><a href=\"#Collection-和-Collections-有什么区别？\" class=\"headerlink\" title=\"Collection 和 Collections 有什么区别？\"></a>Collection 和 Collections 有什么区别？</h3><ul>\n<li> Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如 List、Set 等。</li>\n<li> Collections 是一个包装类，包含了很多静态方法、不能被实例化，而是作为工具类使用，比如提供的排序方法：Collections.sort(list);提供的反转方法：Collections.reverse(list)。</li>\n</ul>\n"},{"title":"Java并发编程八股文","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-04T05:17:41.000Z","password":null,"summary":"as-if-serial 保证单线程程序的执行结果不变，happens-before 保证正确同步的多线程程序的执行结果不变。","_content":"### 简述Java内存模型（JMM） \n\nJava内存模型定义了程序中各种变量的访问规则：\n\n *  所有变量都存储在主存，每个线程都有自己的工作内存。\n *  工作内存中保存了被该线程使用的变量的主存副本，线程对变量的所有操作都必须在工作空间进行，不能直接读写主内存数据。\n *  操作完成后，线程的工作内存通过缓存一致性协议将操作完的数据刷回主存。\n\n### 简述as-if-serial \n\n编译器会对原始的程序进行指令重排序和优化。但不管怎么重排序，其结果都必须和用户原始程序输出的预定结果保持一致。\n\n### 简述happens-before八大规则 \n\n *  程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作；\n *  锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作；\n *  volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作；\n *  传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C；\n *  线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作；\n *  线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；\n *  线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；\n *  对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始；\n\n### as-if-serial 和 happens-before 的区别 \n\nas-if-serial 保证单线程程序的执行结果不变，happens-before 保证正确同步的多线程程序的执行结果不变。\n\n### 简述原子性操作 \n\n一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行，这就是原子性操作。\n\n### 简述线程的可见性 \n\n可见性指当一个线程修改了共享变量时，其他线程能够立即得知修改。volatile、synchronized、final 关键字都能保证可见性。\n\n### 简述有序性 \n\n虽然多线程存在并发和指令优化等操作，但在本线程内观察该线程的所有执行操作是有序的。\n\n### 简述Java中volatile关键字作用 \n\n *  保证变量对所有线程的可见性。当一个线程修改了变量值，新值对于其他线程来说是立即可以得知的。\n *  禁止指令重排。使用 volatile 变量进行写操作，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器进行重排序。\n\n### Java线程的实现方式 \n\n *  实现Runnable接口\n *  继承Thread类\n *  实现Callable接口\n\n### 简述Java线程的状态 \n\n线程状态有 NEW、RUNNABLE、BLOCK、WAITING、TIMED\\_WAITING、THERMINATED\n\n *  NEW：新建状态，线程被创建且未启动，此时还未调用 start 方法。\n *  RUNNABLE：运行状态。表示线程正在JVM中执行，但是这个执行，不一定真的在跑，也可能在排队等CPU。\n *  BLOCKED：阻塞状态。线程等待获取锁，锁还没获得。\n *  WAITING：等待状态。线程内run方法执行完Object.wait()/Thread.join()进入该状态。\n *  TIMED\\_WAITING：限期等待。在一定时间之后跳出状态。调用Thread.sleep(long) Object.wait(long) Thread.join(long)进入状态。其中这些参数代表等待的时间。\n *  TERMINATED：结束状态。线程调用完run方法进入该状态。\n\n### 简述线程通信的方式 \n\n *  volatile 关键词修饰变量，保证所有线程对变量访问的可见性。\n *  synchronized关键词。确保多个线程在同一时刻只能有一个处于方法或同步块中。\n *  wait/notify方法\n *  IO通信\n\n### 简述线程池 \n\n没有线程池的情况下，多次创建，销毁线程开销比较大。如果在开辟的线程执行完当前任务后复用已创建的线程，可以降低开销、控制最大并发数。\n\n线程池创建线程时，会将线程封装成工作线程 Worker，Worker 在执行完任务后还会循环获取工作队列中的任务来执行。\n\n将任务派发给线程池时，会出现以下几种情况\n\n *  核心线程池未满，创建一个新的线程执行任务。\n *  如果核心线程池已满，工作队列未满，将线程存储在工作队列。\n *  如果工作队列已满，线程数小于最大线程数就创建一个新线程处理任务。\n *  如果超过大小线程数，按照拒绝策略来处理任务。\n\n线程池参数：\n\n *  corePoolSize：常驻核心线程数。超过该值后如果线程空闲会被销毁。\n *  maximumPoolSize：线程池能够容纳同时执行的线程最大数。\n *  keepAliveTime：线程空闲时间，线程空闲时间达到该值后会被销毁，直到只剩下 corePoolSize 个线程为止，避免浪费内存资源。\n *  workQueue：工作队列。\n *  threadFactory：线程工厂，用来生产一组相同任务的线程。\n *  handler：拒绝策略。\n\n拒绝策略有以下几种：\n\n *  AbortPolicy：丢弃任务并抛出异常\n *  CallerRunsPolicy：重新尝试提交该任务\n *  DiscardOldestPolicy 抛弃队列里等待最久的任务并把当前任务加入队列\n *  DiscardPolicy 表示直接抛弃当前任务但不抛出异常。\n\n### 简述Executor框架 \n\nExecutor框架目的是将任务提交和任务如何运行分离开来的机制。用户不再需要从代码层考虑设计任务的提交运行，只需要调用Executor框架实现类的Execute方法就可以提交任务。\n\n### 简述Executor的继承关系 \n\n *  Executor：一个接口，其定义了一个接收Runnable对象的方法executor，该方法接收一个Runable实例执行这个任务。\n *  ExecutorService：Executor的子类接口，其定义了一个接收Callable对象的方法，返回 Future 对象，同时提供execute方法。\n *  ScheduledExecutorService：ExecutorService的子类接口，支持定期执行任务。\n *  AbstractExecutorService：抽象类，提供 ExecutorService 执行方法的默认实现。\n *  Executors：实现ExecutorService接口的静态工厂类，提供了一系列工厂方法用于创建线程池。\n *  ThreadPoolExecutor：继承AbstractExecutorService，用于创建线程池。\n *  ForkJoinPool: 继承AbstractExecutorService，Fork 将大任务分叉为多个小任务，然后让小任务执行，Join 是获得小任务的结果，类似于map reduce。\n *  ThreadPoolExecutor：继承ThreadPoolExecutor，实现ScheduledExecutorService，用于创建带定时任务的线程池。\n\n### 简述线程池的状态 \n\n *  Running：能接受新提交的任务，也可以处理阻塞队列的任务。\n *  Shutdown：不再接受新提交的任务，但可以处理存量任务，线程池处于running时调用shutdown方法，会进入该状态。\n *  Stop：不接受新任务，不处理存量任务，调用shutdownnow进入该状态。\n *  Tidying：所有任务已经终止了，worker\\_count（有效线程数）为0。\n *  Terminated：线程池彻底终止。在tidying模式下调用terminated方法会进入该状态。\n\n### 简述线程池类型 \n\n *  newCachedThreadPool 可缓存线程池，可设置最小线程数和最大线程数，线程空闲1分钟后自动销毁。\n *  newFixedThreadPool 指定工作线程数量线程池。\n *  newSingleThreadExecutor 单线程Executor。\n *  newScheduleThreadPool 支持定时任务的指定工作线程数量线程池。\n *  newSingleThreadScheduledExecutor 支持定时任务的单线程Executor。\n\n### 简述阻塞队列 \n\n阻塞队列是生产者消费者的实现具体组件之一。当阻塞队列为空时，从队列中获取元素的操作将会被阻塞，当阻塞队列满了，往队列添加元素的操作将会被阻塞。具体实现有：\n\n *  ArrayBlockingQueue：底层是由数组组成的有界阻塞队列。\n *  LinkedBlockingQueue：底层是由链表组成的有界阻塞队列。\n *  PriorityBlockingQueue：阻塞优先队列。\n *  DelayQueue：创建元素时可以指定多久才能从队列中获取当前元素\n *  SynchronousQueue：不存储元素的阻塞队列，每一个存储必须等待一个取出操作\n *  LinkedTransferQueue：与LinkedBlockingQueue相比多一个transfer方法，即如果当前有消费者正等待接收元素，可以把生产者传入的元素立刻传输给消费者。\n *  LinkedBlockingDeque：双向阻塞队列。\n\n### 谈一谈ThreadLocal \n\nThreadLocal 是线程共享变量。ThreadLoacl 有一个静态内部类 ThreadLocalMap，其 Key 是 ThreadLocal 对象，值是 Entry 对象，ThreadLocalMap是每个线程私有的。\n\n *  set 给ThreadLocalMap设置值。\n *  get 获取ThreadLocalMap。\n *  remove 删除ThreadLocalMap类型的对象。\n\n存在的问题：对于线程池，由于线程池会重用 Thread 对象，因此与 Thread 绑定的 ThreadLocal 也会被重用，造成一系列问题。\n\n比如说内存泄漏。由于 ThreadLocal 是弱引用，但 Entry 的 value 是强引用，因此当 ThreadLocal 被垃圾回收后，value 依旧不会被释放，产生内存泄漏。\n\n### 聊聊你对Java并发包下unsafe类的理解 \n\n对于 Java 语言，没有直接的指针组件，一般也不能使用偏移量对某块内存进行操作。这些操作相对来讲是安全（safe）的。\n\nJava 有个类叫 Unsafe 类，这个类使 Java 拥有了像 C 语言的指针一样操作内存空间的能力，同时也带来了指针的问题。这个类可以说是 Java 并发开发的基础。\n\n### Java中的乐观锁与CAS算法 \n\n乐观锁认为数据发送时发生并发冲突的概率不大，所以读操作前不上锁。\n\n到了写操作时才会进行判断，数据在此期间是否被其他线程修改。如果发生修改，那就返回写入失败；如果没有被修改，那就执行修改操作，返回修改成功。\n\n乐观锁一般都采用 Compare And Swap（CAS）算法进行实现。顾名思义，该算法涉及到了两个操作，比较（Compare）和交换（Swap）。\n\nCAS 算法的思路如下：\n\n *  该算法认为不同线程对变量的操作时产生竞争的情况比较少。\n *  该算法的核心是对当前读取变量值 E 和内存中的变量旧值 V 进行比较。\n *  如果相等，就代表其他线程没有对该变量进行修改，就将变量值更新为新值 N。\n *  如果不等，就认为在读取值 E 到比较阶段，有其他线程对变量进行过修改，不进行任何操作。\n\n### ABA问题及解决方法简述 \n\nCAS 算法是基于值来做比较的，如果当前有两个线程，一个线程将变量值从 A 改为 B ，再由 B 改回为 A ，当前线程开始执行 CAS 算法时，就很容易认为值没有变化，误认为读取数据到执行 CAS 算法的期间，没有线程修改过数据。\n\njuc 包提供了一个 AtomicStampedReference，即在原始的版本下加入版本号戳，解决 ABA 问题。\n\n### 简述常见的Atomic类 \n\n在很多时候，我们需要的仅仅是一个简单的、高效的、线程安全的++或者--方案，使用synchronized关键字和lock固然可以实现，但代价比较大，此时用原子类更加方便。基本数据类型的原子类有：\n\n *  AtomicInteger 原子更新整形\n *  AtomicLong 原子更新长整型\n *  AtomicBoolean 原子更新布尔类型\n\nAtomic数组类型有：\n\n *  AtomicIntegerArray 原子更新整形数组里的元素\n *  AtomicLongArray 原子更新长整型数组里的元素\n *  AtomicReferenceArray 原子更新引用类型数组里的元素。\n\nAtomic引用类型有：\n\n *  AtomicReference 原子更新引用类型\n *  AtomicMarkableReference 原子更新带有标记位的引用类型，可以绑定一个 boolean 标记\n *  AtomicStampedReference 原子更新带有版本号的引用类型\n\nFieldUpdater类型：\n\n *  AtomicIntegerFieldUpdater 原子更新整形字段的更新器\n *  AtomicLongFieldUpdater 原子更新长整形字段的更新器\n *  AtomicReferenceFieldUpdater 原子更新引用类型字段的更新器\n\n### 简述Atomic类基本实现原理 \n\n以AtomicIntger 为例。\n\n方法getAndIncrement，以原子方式将当前的值加1，具体实现为：\n\n *  在 for 死循环中取得 AtomicInteger 里存储的数值\n *  对 AtomicInteger 当前的值加 1\n *  调用 compareAndSet 方法进行原子更新\n *  先检查当前数值是否等于 expect\n *  如果等于则说明当前值没有被其他线程修改，则将值更新为 next，\n *  如果不是会更新失败返回 false，程序会进入 for 循环重新进行 compareAndSet 操作。\n\n### 简述CountDownLatch \n\nCountDownLatch这个类使一个线程等待其他线程各自执行完毕后再执行。是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，调用countDown方法，计数器的值就减1，当计数器的值为0时，表示所有线程都执行完毕，然后在等待的线程就可以恢复工作了。只能一次性使用，不能reset。\n\n### 简述CyclicBarrier \n\nCyclicBarrier 主要功能和CountDownLatch类似，也是通过一个计数器，使一个线程等待其他线程各自执行完毕后再执行。但是其可以重复使用（reset）。\n\n### 简述Semaphore \n\nSemaphore即信号量。Semaphore 的构造方法参数接收一个 int 值，设置一个计数器，表示可用的许可数量即最大并发数。使用 acquire 方法获得一个许可证，计数器减一，使用 release 方法归还许可，计数器加一。如果此时计数器值为0，线程进入休眠。\n\n### 简述Exchanger \n\nExchanger类可用于两个线程之间交换信息。可简单地将Exchanger对象理解为一个包含两个格子的容器，通过exchanger方法可以向两个格子中填充信息。线程通过exchange 方法交换数据，第一个线程执行 exchange 方法后会阻塞等待第二个线程执行该方法。当两个线程都到达同步点时这两个线程就可以交换数据当两个格子中的均被填充时，该对象会自动将两个格子的信息交换，然后返回给线程，从而实现两个线程的信息交换。\n\n### 简述ConcurrentHashMap \n\nJDK7采用锁分段技术。首先将数据分成 Segment 数据段，然后给每一个数据段配一把锁，当一个线程占用锁访问其中一个段的数据时，其他段的数据也能被其他线程访问。\n\nget 除读到空值不需要加锁。该方法先经过一次再散列，再用这个散列值通过散列运算定位到 Segment，最后通过散列算法定位到元素。put 须加锁，首先定位到 Segment，然后进行插入操作，第一步判断是否需要对 Segment 里的 HashEntry 数组进行扩容，第二步定位添加元素的位置，然后将其放入数组。\n\nJDK8的改进\n\n *  取消分段锁机制，采用CAS算法进行值的设置，如果CAS失败再使用 synchronized 加锁添加元素\n *  引入红黑树结构，当某个槽内的元素个数超过8且 Node数组 容量大于 64 时，链表转为红黑树。\n *  使用了更加优化的方式统计集合内的元素数量。\n\n### synchronized底层实现原理 \n\nJava 对象底层都会关联一个 monitor，使用 synchronized 时 JVM 会根据使用环境找到对象的 monitor，根据 monitor 的状态进行加解锁的判断。如果成功加锁就成为该 monitor 的唯一持有者，monitor 在被释放前不能再被其他线程获取。\n\nsynchronized在JVM编译后会产生monitorenter 和 monitorexit 这两个字节码指令，获取和释放 monitor。这两个字节码指令都需要一个引用类型的参数指明要锁定和解锁的对象，对于同步普通方法，锁是当前实例对象；对于静态同步方法，锁是当前类的 Class 对象；对于同步方法块，锁是 synchronized 括号里的对象。\n\n执行 monitorenter 指令时，首先尝试获取对象锁。如果这个对象没有被锁定，或当前线程已经持有锁，就把锁的计数器加 1，执行 monitorexit 指令时会将锁计数器减 1。一旦计数器为 0 锁随即就被释放。\n\n### synchronized关键词使用方法 \n\n *  直接修饰某个实例方法\n *  直接修饰某个静态方法\n *  修饰代码块\n\n### 简述Java偏向锁 \n\nJDK 1.6 中提出了偏向锁的概念。该锁提出的原因是，开发者发现多数情况下锁并不存在竞争，一把锁往往是由同一个线程获得的。偏向锁并不会主动释放，这样每次偏向锁进入的时候都会判断该资源是否是偏向自己的，如果是偏向自己的则不需要进行额外的操作，直接可以进入同步操作。\n\n其申请流程为：\n\n *  首先需要判断对象的 Mark Word 是否属于偏向模式，如果不属于，那就进入轻量级锁判断逻辑。否则继续下一步判断；\n *  判断目前请求锁的线程 ID 是否和偏向锁本身记录的线程 ID 一致。如果一致，继续下一步的判断，如果不一致，跳转到步骤4；\n *  判断是否需要重偏向。如果不用的话，直接获得偏向锁；\n *  利用 CAS 算法将对象的 Mark Word 进行更改，使线程 ID 部分换成本线程 ID。如果更换成功，则重偏向完成，获得偏向锁。如果失败，则说明有多线程竞争，升级为轻量级锁。\n\n### 简述轻量级锁 \n\n轻量级锁是为了在没有竞争的前提下减少重量级锁出现并导致的性能消耗。\n\n其申请流程为：\n\n *  如果同步对象没有被锁定，虚拟机将在当前线程的栈帧中建立一个锁记录空间，存储锁对象目前 Mark Word 的拷贝。\n *  虚拟机使用 CAS 尝试把对象的 Mark Word 更新为指向锁记录的指针\n *  如果更新成功即代表该线程拥有了锁，锁标志位将转变为 00，表示处于轻量级锁定状态。\n *  如果更新失败就意味着至少存在一条线程与当前线程竞争。虚拟机检查对象的 Mark Word 是否指向当前线程的栈帧\n *  如果指向当前线程的栈帧，说明当前线程已经拥有了锁，直接进入同步块继续执行\n *  如果不是则说明锁对象已经被其他线程抢占。\n *  如果出现两条以上线程争用同一个锁，轻量级锁就不再有效，将膨胀为重量级锁，锁标志状态变为 10，此时Mark Word 存储的就是指向重量级锁的指针，后面等待锁的线程也必须阻塞。\n\n### 简述锁优化策略 \n\n即自适应自旋、锁消除、锁粗化、锁升级等策略偏。\n\n### 简述Java的自旋锁 \n\n线程获取锁失败后，可以采用这样的策略，可以不放弃 CPU ，不停的重试内重试，这种操作也称为自旋锁。\n\n### 简述自适应自旋锁 \n\n自适应自旋锁自旋次数不再人为设定，通常由前一次在同一个锁上的自旋时间及锁的拥有者的状态决定。\n\n### 简述锁粗化 \n\n锁粗化的思想就是扩大加锁范围，避免反复的加锁和解锁。\n\n### 简述锁消除 \n\n锁消除是一种更为彻底的优化，在编译时，Java编译器对运行上下文进行扫描，去除不可能存在共享资源竞争的锁。\n\n### 简述Lock与ReentrantLock \n\nLock接口是 Java并发包的顶层接口。\n\n可重入锁 ReentrantLock 是 Lock 最常见的实现，与 synchronized 一样可重入。ReentrantLock 在默认情况下是非公平的，可以通过构造方法指定公平锁。一旦使用了公平锁，性能会下降。\n\n### 简述AQS \n\nAQS（AbstractQuenedSynchronizer）抽象的队列式同步器。AQS是将每一条请求共享资源的线程封装成一个锁队列的一个结点（Node），来实现锁的分配。AQS是用来构建锁或其他同步组件的基础框架，它使用一个 volatile int state 变量作为共享资源，如果线程获取资源失败，则进入同步队列等待；如果获取成功就执行临界区代码，释放资源时会通知同步队列中的等待线程。\n\n子类通过继承同步器并实现它的抽象方法getState、setState 和 compareAndSetState对同步状态进行更改。\n\nAQS获取独占锁/释放独占锁原理：\n\n获取：（acquire）\n\n *  调用 tryAcquire 方法安全地获取线程同步状态，获取失败的线程会被构造同步节点并通过 addWaiter 方法加入到同步队列的尾部，在队列中自旋。\n *  调用 acquireQueued 方法使得该节点以死循环的方式获取同步状态，如果获取不到则阻塞。\n\n释放：（release）\n\n *  调用 tryRelease 方法释放同步状态\n *  调用 unparkSuccessor 方法唤醒头节点的后继节点，使后继节点重新尝试获取同步状态。\n\nAQS获取共享锁/释放共享锁原理\n\n获取锁（acquireShared）\n\n *  调用 tryAcquireShared 方法尝试获取同步状态，返回值不小于 0 表示能获取同步状态。\n *  释放（releaseShared），并唤醒后续处于等待状态的节点。","source":"_posts/Java并发编程八股文.md","raw":"---\ntitle: Java并发编程八股文\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-04 13:17:41\npassword:\nsummary: as-if-serial 保证单线程程序的执行结果不变，happens-before 保证正确同步的多线程程序的执行结果不变。\ntags:\n    - 并发编程\n    - 八股文\ncategories:\n    - java\n---\n### 简述Java内存模型（JMM） \n\nJava内存模型定义了程序中各种变量的访问规则：\n\n *  所有变量都存储在主存，每个线程都有自己的工作内存。\n *  工作内存中保存了被该线程使用的变量的主存副本，线程对变量的所有操作都必须在工作空间进行，不能直接读写主内存数据。\n *  操作完成后，线程的工作内存通过缓存一致性协议将操作完的数据刷回主存。\n\n### 简述as-if-serial \n\n编译器会对原始的程序进行指令重排序和优化。但不管怎么重排序，其结果都必须和用户原始程序输出的预定结果保持一致。\n\n### 简述happens-before八大规则 \n\n *  程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作；\n *  锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作；\n *  volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作；\n *  传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C；\n *  线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作；\n *  线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；\n *  线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；\n *  对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始；\n\n### as-if-serial 和 happens-before 的区别 \n\nas-if-serial 保证单线程程序的执行结果不变，happens-before 保证正确同步的多线程程序的执行结果不变。\n\n### 简述原子性操作 \n\n一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行，这就是原子性操作。\n\n### 简述线程的可见性 \n\n可见性指当一个线程修改了共享变量时，其他线程能够立即得知修改。volatile、synchronized、final 关键字都能保证可见性。\n\n### 简述有序性 \n\n虽然多线程存在并发和指令优化等操作，但在本线程内观察该线程的所有执行操作是有序的。\n\n### 简述Java中volatile关键字作用 \n\n *  保证变量对所有线程的可见性。当一个线程修改了变量值，新值对于其他线程来说是立即可以得知的。\n *  禁止指令重排。使用 volatile 变量进行写操作，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器进行重排序。\n\n### Java线程的实现方式 \n\n *  实现Runnable接口\n *  继承Thread类\n *  实现Callable接口\n\n### 简述Java线程的状态 \n\n线程状态有 NEW、RUNNABLE、BLOCK、WAITING、TIMED\\_WAITING、THERMINATED\n\n *  NEW：新建状态，线程被创建且未启动，此时还未调用 start 方法。\n *  RUNNABLE：运行状态。表示线程正在JVM中执行，但是这个执行，不一定真的在跑，也可能在排队等CPU。\n *  BLOCKED：阻塞状态。线程等待获取锁，锁还没获得。\n *  WAITING：等待状态。线程内run方法执行完Object.wait()/Thread.join()进入该状态。\n *  TIMED\\_WAITING：限期等待。在一定时间之后跳出状态。调用Thread.sleep(long) Object.wait(long) Thread.join(long)进入状态。其中这些参数代表等待的时间。\n *  TERMINATED：结束状态。线程调用完run方法进入该状态。\n\n### 简述线程通信的方式 \n\n *  volatile 关键词修饰变量，保证所有线程对变量访问的可见性。\n *  synchronized关键词。确保多个线程在同一时刻只能有一个处于方法或同步块中。\n *  wait/notify方法\n *  IO通信\n\n### 简述线程池 \n\n没有线程池的情况下，多次创建，销毁线程开销比较大。如果在开辟的线程执行完当前任务后复用已创建的线程，可以降低开销、控制最大并发数。\n\n线程池创建线程时，会将线程封装成工作线程 Worker，Worker 在执行完任务后还会循环获取工作队列中的任务来执行。\n\n将任务派发给线程池时，会出现以下几种情况\n\n *  核心线程池未满，创建一个新的线程执行任务。\n *  如果核心线程池已满，工作队列未满，将线程存储在工作队列。\n *  如果工作队列已满，线程数小于最大线程数就创建一个新线程处理任务。\n *  如果超过大小线程数，按照拒绝策略来处理任务。\n\n线程池参数：\n\n *  corePoolSize：常驻核心线程数。超过该值后如果线程空闲会被销毁。\n *  maximumPoolSize：线程池能够容纳同时执行的线程最大数。\n *  keepAliveTime：线程空闲时间，线程空闲时间达到该值后会被销毁，直到只剩下 corePoolSize 个线程为止，避免浪费内存资源。\n *  workQueue：工作队列。\n *  threadFactory：线程工厂，用来生产一组相同任务的线程。\n *  handler：拒绝策略。\n\n拒绝策略有以下几种：\n\n *  AbortPolicy：丢弃任务并抛出异常\n *  CallerRunsPolicy：重新尝试提交该任务\n *  DiscardOldestPolicy 抛弃队列里等待最久的任务并把当前任务加入队列\n *  DiscardPolicy 表示直接抛弃当前任务但不抛出异常。\n\n### 简述Executor框架 \n\nExecutor框架目的是将任务提交和任务如何运行分离开来的机制。用户不再需要从代码层考虑设计任务的提交运行，只需要调用Executor框架实现类的Execute方法就可以提交任务。\n\n### 简述Executor的继承关系 \n\n *  Executor：一个接口，其定义了一个接收Runnable对象的方法executor，该方法接收一个Runable实例执行这个任务。\n *  ExecutorService：Executor的子类接口，其定义了一个接收Callable对象的方法，返回 Future 对象，同时提供execute方法。\n *  ScheduledExecutorService：ExecutorService的子类接口，支持定期执行任务。\n *  AbstractExecutorService：抽象类，提供 ExecutorService 执行方法的默认实现。\n *  Executors：实现ExecutorService接口的静态工厂类，提供了一系列工厂方法用于创建线程池。\n *  ThreadPoolExecutor：继承AbstractExecutorService，用于创建线程池。\n *  ForkJoinPool: 继承AbstractExecutorService，Fork 将大任务分叉为多个小任务，然后让小任务执行，Join 是获得小任务的结果，类似于map reduce。\n *  ThreadPoolExecutor：继承ThreadPoolExecutor，实现ScheduledExecutorService，用于创建带定时任务的线程池。\n\n### 简述线程池的状态 \n\n *  Running：能接受新提交的任务，也可以处理阻塞队列的任务。\n *  Shutdown：不再接受新提交的任务，但可以处理存量任务，线程池处于running时调用shutdown方法，会进入该状态。\n *  Stop：不接受新任务，不处理存量任务，调用shutdownnow进入该状态。\n *  Tidying：所有任务已经终止了，worker\\_count（有效线程数）为0。\n *  Terminated：线程池彻底终止。在tidying模式下调用terminated方法会进入该状态。\n\n### 简述线程池类型 \n\n *  newCachedThreadPool 可缓存线程池，可设置最小线程数和最大线程数，线程空闲1分钟后自动销毁。\n *  newFixedThreadPool 指定工作线程数量线程池。\n *  newSingleThreadExecutor 单线程Executor。\n *  newScheduleThreadPool 支持定时任务的指定工作线程数量线程池。\n *  newSingleThreadScheduledExecutor 支持定时任务的单线程Executor。\n\n### 简述阻塞队列 \n\n阻塞队列是生产者消费者的实现具体组件之一。当阻塞队列为空时，从队列中获取元素的操作将会被阻塞，当阻塞队列满了，往队列添加元素的操作将会被阻塞。具体实现有：\n\n *  ArrayBlockingQueue：底层是由数组组成的有界阻塞队列。\n *  LinkedBlockingQueue：底层是由链表组成的有界阻塞队列。\n *  PriorityBlockingQueue：阻塞优先队列。\n *  DelayQueue：创建元素时可以指定多久才能从队列中获取当前元素\n *  SynchronousQueue：不存储元素的阻塞队列，每一个存储必须等待一个取出操作\n *  LinkedTransferQueue：与LinkedBlockingQueue相比多一个transfer方法，即如果当前有消费者正等待接收元素，可以把生产者传入的元素立刻传输给消费者。\n *  LinkedBlockingDeque：双向阻塞队列。\n\n### 谈一谈ThreadLocal \n\nThreadLocal 是线程共享变量。ThreadLoacl 有一个静态内部类 ThreadLocalMap，其 Key 是 ThreadLocal 对象，值是 Entry 对象，ThreadLocalMap是每个线程私有的。\n\n *  set 给ThreadLocalMap设置值。\n *  get 获取ThreadLocalMap。\n *  remove 删除ThreadLocalMap类型的对象。\n\n存在的问题：对于线程池，由于线程池会重用 Thread 对象，因此与 Thread 绑定的 ThreadLocal 也会被重用，造成一系列问题。\n\n比如说内存泄漏。由于 ThreadLocal 是弱引用，但 Entry 的 value 是强引用，因此当 ThreadLocal 被垃圾回收后，value 依旧不会被释放，产生内存泄漏。\n\n### 聊聊你对Java并发包下unsafe类的理解 \n\n对于 Java 语言，没有直接的指针组件，一般也不能使用偏移量对某块内存进行操作。这些操作相对来讲是安全（safe）的。\n\nJava 有个类叫 Unsafe 类，这个类使 Java 拥有了像 C 语言的指针一样操作内存空间的能力，同时也带来了指针的问题。这个类可以说是 Java 并发开发的基础。\n\n### Java中的乐观锁与CAS算法 \n\n乐观锁认为数据发送时发生并发冲突的概率不大，所以读操作前不上锁。\n\n到了写操作时才会进行判断，数据在此期间是否被其他线程修改。如果发生修改，那就返回写入失败；如果没有被修改，那就执行修改操作，返回修改成功。\n\n乐观锁一般都采用 Compare And Swap（CAS）算法进行实现。顾名思义，该算法涉及到了两个操作，比较（Compare）和交换（Swap）。\n\nCAS 算法的思路如下：\n\n *  该算法认为不同线程对变量的操作时产生竞争的情况比较少。\n *  该算法的核心是对当前读取变量值 E 和内存中的变量旧值 V 进行比较。\n *  如果相等，就代表其他线程没有对该变量进行修改，就将变量值更新为新值 N。\n *  如果不等，就认为在读取值 E 到比较阶段，有其他线程对变量进行过修改，不进行任何操作。\n\n### ABA问题及解决方法简述 \n\nCAS 算法是基于值来做比较的，如果当前有两个线程，一个线程将变量值从 A 改为 B ，再由 B 改回为 A ，当前线程开始执行 CAS 算法时，就很容易认为值没有变化，误认为读取数据到执行 CAS 算法的期间，没有线程修改过数据。\n\njuc 包提供了一个 AtomicStampedReference，即在原始的版本下加入版本号戳，解决 ABA 问题。\n\n### 简述常见的Atomic类 \n\n在很多时候，我们需要的仅仅是一个简单的、高效的、线程安全的++或者--方案，使用synchronized关键字和lock固然可以实现，但代价比较大，此时用原子类更加方便。基本数据类型的原子类有：\n\n *  AtomicInteger 原子更新整形\n *  AtomicLong 原子更新长整型\n *  AtomicBoolean 原子更新布尔类型\n\nAtomic数组类型有：\n\n *  AtomicIntegerArray 原子更新整形数组里的元素\n *  AtomicLongArray 原子更新长整型数组里的元素\n *  AtomicReferenceArray 原子更新引用类型数组里的元素。\n\nAtomic引用类型有：\n\n *  AtomicReference 原子更新引用类型\n *  AtomicMarkableReference 原子更新带有标记位的引用类型，可以绑定一个 boolean 标记\n *  AtomicStampedReference 原子更新带有版本号的引用类型\n\nFieldUpdater类型：\n\n *  AtomicIntegerFieldUpdater 原子更新整形字段的更新器\n *  AtomicLongFieldUpdater 原子更新长整形字段的更新器\n *  AtomicReferenceFieldUpdater 原子更新引用类型字段的更新器\n\n### 简述Atomic类基本实现原理 \n\n以AtomicIntger 为例。\n\n方法getAndIncrement，以原子方式将当前的值加1，具体实现为：\n\n *  在 for 死循环中取得 AtomicInteger 里存储的数值\n *  对 AtomicInteger 当前的值加 1\n *  调用 compareAndSet 方法进行原子更新\n *  先检查当前数值是否等于 expect\n *  如果等于则说明当前值没有被其他线程修改，则将值更新为 next，\n *  如果不是会更新失败返回 false，程序会进入 for 循环重新进行 compareAndSet 操作。\n\n### 简述CountDownLatch \n\nCountDownLatch这个类使一个线程等待其他线程各自执行完毕后再执行。是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，调用countDown方法，计数器的值就减1，当计数器的值为0时，表示所有线程都执行完毕，然后在等待的线程就可以恢复工作了。只能一次性使用，不能reset。\n\n### 简述CyclicBarrier \n\nCyclicBarrier 主要功能和CountDownLatch类似，也是通过一个计数器，使一个线程等待其他线程各自执行完毕后再执行。但是其可以重复使用（reset）。\n\n### 简述Semaphore \n\nSemaphore即信号量。Semaphore 的构造方法参数接收一个 int 值，设置一个计数器，表示可用的许可数量即最大并发数。使用 acquire 方法获得一个许可证，计数器减一，使用 release 方法归还许可，计数器加一。如果此时计数器值为0，线程进入休眠。\n\n### 简述Exchanger \n\nExchanger类可用于两个线程之间交换信息。可简单地将Exchanger对象理解为一个包含两个格子的容器，通过exchanger方法可以向两个格子中填充信息。线程通过exchange 方法交换数据，第一个线程执行 exchange 方法后会阻塞等待第二个线程执行该方法。当两个线程都到达同步点时这两个线程就可以交换数据当两个格子中的均被填充时，该对象会自动将两个格子的信息交换，然后返回给线程，从而实现两个线程的信息交换。\n\n### 简述ConcurrentHashMap \n\nJDK7采用锁分段技术。首先将数据分成 Segment 数据段，然后给每一个数据段配一把锁，当一个线程占用锁访问其中一个段的数据时，其他段的数据也能被其他线程访问。\n\nget 除读到空值不需要加锁。该方法先经过一次再散列，再用这个散列值通过散列运算定位到 Segment，最后通过散列算法定位到元素。put 须加锁，首先定位到 Segment，然后进行插入操作，第一步判断是否需要对 Segment 里的 HashEntry 数组进行扩容，第二步定位添加元素的位置，然后将其放入数组。\n\nJDK8的改进\n\n *  取消分段锁机制，采用CAS算法进行值的设置，如果CAS失败再使用 synchronized 加锁添加元素\n *  引入红黑树结构，当某个槽内的元素个数超过8且 Node数组 容量大于 64 时，链表转为红黑树。\n *  使用了更加优化的方式统计集合内的元素数量。\n\n### synchronized底层实现原理 \n\nJava 对象底层都会关联一个 monitor，使用 synchronized 时 JVM 会根据使用环境找到对象的 monitor，根据 monitor 的状态进行加解锁的判断。如果成功加锁就成为该 monitor 的唯一持有者，monitor 在被释放前不能再被其他线程获取。\n\nsynchronized在JVM编译后会产生monitorenter 和 monitorexit 这两个字节码指令，获取和释放 monitor。这两个字节码指令都需要一个引用类型的参数指明要锁定和解锁的对象，对于同步普通方法，锁是当前实例对象；对于静态同步方法，锁是当前类的 Class 对象；对于同步方法块，锁是 synchronized 括号里的对象。\n\n执行 monitorenter 指令时，首先尝试获取对象锁。如果这个对象没有被锁定，或当前线程已经持有锁，就把锁的计数器加 1，执行 monitorexit 指令时会将锁计数器减 1。一旦计数器为 0 锁随即就被释放。\n\n### synchronized关键词使用方法 \n\n *  直接修饰某个实例方法\n *  直接修饰某个静态方法\n *  修饰代码块\n\n### 简述Java偏向锁 \n\nJDK 1.6 中提出了偏向锁的概念。该锁提出的原因是，开发者发现多数情况下锁并不存在竞争，一把锁往往是由同一个线程获得的。偏向锁并不会主动释放，这样每次偏向锁进入的时候都会判断该资源是否是偏向自己的，如果是偏向自己的则不需要进行额外的操作，直接可以进入同步操作。\n\n其申请流程为：\n\n *  首先需要判断对象的 Mark Word 是否属于偏向模式，如果不属于，那就进入轻量级锁判断逻辑。否则继续下一步判断；\n *  判断目前请求锁的线程 ID 是否和偏向锁本身记录的线程 ID 一致。如果一致，继续下一步的判断，如果不一致，跳转到步骤4；\n *  判断是否需要重偏向。如果不用的话，直接获得偏向锁；\n *  利用 CAS 算法将对象的 Mark Word 进行更改，使线程 ID 部分换成本线程 ID。如果更换成功，则重偏向完成，获得偏向锁。如果失败，则说明有多线程竞争，升级为轻量级锁。\n\n### 简述轻量级锁 \n\n轻量级锁是为了在没有竞争的前提下减少重量级锁出现并导致的性能消耗。\n\n其申请流程为：\n\n *  如果同步对象没有被锁定，虚拟机将在当前线程的栈帧中建立一个锁记录空间，存储锁对象目前 Mark Word 的拷贝。\n *  虚拟机使用 CAS 尝试把对象的 Mark Word 更新为指向锁记录的指针\n *  如果更新成功即代表该线程拥有了锁，锁标志位将转变为 00，表示处于轻量级锁定状态。\n *  如果更新失败就意味着至少存在一条线程与当前线程竞争。虚拟机检查对象的 Mark Word 是否指向当前线程的栈帧\n *  如果指向当前线程的栈帧，说明当前线程已经拥有了锁，直接进入同步块继续执行\n *  如果不是则说明锁对象已经被其他线程抢占。\n *  如果出现两条以上线程争用同一个锁，轻量级锁就不再有效，将膨胀为重量级锁，锁标志状态变为 10，此时Mark Word 存储的就是指向重量级锁的指针，后面等待锁的线程也必须阻塞。\n\n### 简述锁优化策略 \n\n即自适应自旋、锁消除、锁粗化、锁升级等策略偏。\n\n### 简述Java的自旋锁 \n\n线程获取锁失败后，可以采用这样的策略，可以不放弃 CPU ，不停的重试内重试，这种操作也称为自旋锁。\n\n### 简述自适应自旋锁 \n\n自适应自旋锁自旋次数不再人为设定，通常由前一次在同一个锁上的自旋时间及锁的拥有者的状态决定。\n\n### 简述锁粗化 \n\n锁粗化的思想就是扩大加锁范围，避免反复的加锁和解锁。\n\n### 简述锁消除 \n\n锁消除是一种更为彻底的优化，在编译时，Java编译器对运行上下文进行扫描，去除不可能存在共享资源竞争的锁。\n\n### 简述Lock与ReentrantLock \n\nLock接口是 Java并发包的顶层接口。\n\n可重入锁 ReentrantLock 是 Lock 最常见的实现，与 synchronized 一样可重入。ReentrantLock 在默认情况下是非公平的，可以通过构造方法指定公平锁。一旦使用了公平锁，性能会下降。\n\n### 简述AQS \n\nAQS（AbstractQuenedSynchronizer）抽象的队列式同步器。AQS是将每一条请求共享资源的线程封装成一个锁队列的一个结点（Node），来实现锁的分配。AQS是用来构建锁或其他同步组件的基础框架，它使用一个 volatile int state 变量作为共享资源，如果线程获取资源失败，则进入同步队列等待；如果获取成功就执行临界区代码，释放资源时会通知同步队列中的等待线程。\n\n子类通过继承同步器并实现它的抽象方法getState、setState 和 compareAndSetState对同步状态进行更改。\n\nAQS获取独占锁/释放独占锁原理：\n\n获取：（acquire）\n\n *  调用 tryAcquire 方法安全地获取线程同步状态，获取失败的线程会被构造同步节点并通过 addWaiter 方法加入到同步队列的尾部，在队列中自旋。\n *  调用 acquireQueued 方法使得该节点以死循环的方式获取同步状态，如果获取不到则阻塞。\n\n释放：（release）\n\n *  调用 tryRelease 方法释放同步状态\n *  调用 unparkSuccessor 方法唤醒头节点的后继节点，使后继节点重新尝试获取同步状态。\n\nAQS获取共享锁/释放共享锁原理\n\n获取锁（acquireShared）\n\n *  调用 tryAcquireShared 方法尝试获取同步状态，返回值不小于 0 表示能获取同步状态。\n *  释放（releaseShared），并唤醒后续处于等待状态的节点。","slug":"Java并发编程八股文","published":1,"updated":"2022-11-04T05:18:20.929Z","_id":"cla21kmyw000101ld4jd8gijc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"简述Java内存模型（JMM）\"><a href=\"#简述Java内存模型（JMM）\" class=\"headerlink\" title=\"简述Java内存模型（JMM）\"></a>简述Java内存模型（JMM）</h3><p>Java内存模型定义了程序中各种变量的访问规则：</p>\n<ul>\n<li> 所有变量都存储在主存，每个线程都有自己的工作内存。</li>\n<li> 工作内存中保存了被该线程使用的变量的主存副本，线程对变量的所有操作都必须在工作空间进行，不能直接读写主内存数据。</li>\n<li> 操作完成后，线程的工作内存通过缓存一致性协议将操作完的数据刷回主存。</li>\n</ul>\n<h3 id=\"简述as-if-serial\"><a href=\"#简述as-if-serial\" class=\"headerlink\" title=\"简述as-if-serial\"></a>简述as-if-serial</h3><p>编译器会对原始的程序进行指令重排序和优化。但不管怎么重排序，其结果都必须和用户原始程序输出的预定结果保持一致。</p>\n<h3 id=\"简述happens-before八大规则\"><a href=\"#简述happens-before八大规则\" class=\"headerlink\" title=\"简述happens-before八大规则\"></a>简述happens-before八大规则</h3><ul>\n<li> 程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作；</li>\n<li> 锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作；</li>\n<li> volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作；</li>\n<li> 传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C；</li>\n<li> 线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作；</li>\n<li> 线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；</li>\n<li> 线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；</li>\n<li> 对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始；</li>\n</ul>\n<h3 id=\"as-if-serial-和-happens-before-的区别\"><a href=\"#as-if-serial-和-happens-before-的区别\" class=\"headerlink\" title=\"as-if-serial 和 happens-before 的区别\"></a>as-if-serial 和 happens-before 的区别</h3><p>as-if-serial 保证单线程程序的执行结果不变，happens-before 保证正确同步的多线程程序的执行结果不变。</p>\n<h3 id=\"简述原子性操作\"><a href=\"#简述原子性操作\" class=\"headerlink\" title=\"简述原子性操作\"></a>简述原子性操作</h3><p>一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行，这就是原子性操作。</p>\n<h3 id=\"简述线程的可见性\"><a href=\"#简述线程的可见性\" class=\"headerlink\" title=\"简述线程的可见性\"></a>简述线程的可见性</h3><p>可见性指当一个线程修改了共享变量时，其他线程能够立即得知修改。volatile、synchronized、final 关键字都能保证可见性。</p>\n<h3 id=\"简述有序性\"><a href=\"#简述有序性\" class=\"headerlink\" title=\"简述有序性\"></a>简述有序性</h3><p>虽然多线程存在并发和指令优化等操作，但在本线程内观察该线程的所有执行操作是有序的。</p>\n<h3 id=\"简述Java中volatile关键字作用\"><a href=\"#简述Java中volatile关键字作用\" class=\"headerlink\" title=\"简述Java中volatile关键字作用\"></a>简述Java中volatile关键字作用</h3><ul>\n<li> 保证变量对所有线程的可见性。当一个线程修改了变量值，新值对于其他线程来说是立即可以得知的。</li>\n<li> 禁止指令重排。使用 volatile 变量进行写操作，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器进行重排序。</li>\n</ul>\n<h3 id=\"Java线程的实现方式\"><a href=\"#Java线程的实现方式\" class=\"headerlink\" title=\"Java线程的实现方式\"></a>Java线程的实现方式</h3><ul>\n<li> 实现Runnable接口</li>\n<li> 继承Thread类</li>\n<li> 实现Callable接口</li>\n</ul>\n<h3 id=\"简述Java线程的状态\"><a href=\"#简述Java线程的状态\" class=\"headerlink\" title=\"简述Java线程的状态\"></a>简述Java线程的状态</h3><p>线程状态有 NEW、RUNNABLE、BLOCK、WAITING、TIMED_WAITING、THERMINATED</p>\n<ul>\n<li> NEW：新建状态，线程被创建且未启动，此时还未调用 start 方法。</li>\n<li> RUNNABLE：运行状态。表示线程正在JVM中执行，但是这个执行，不一定真的在跑，也可能在排队等CPU。</li>\n<li> BLOCKED：阻塞状态。线程等待获取锁，锁还没获得。</li>\n<li> WAITING：等待状态。线程内run方法执行完Object.wait()/Thread.join()进入该状态。</li>\n<li> TIMED_WAITING：限期等待。在一定时间之后跳出状态。调用Thread.sleep(long) Object.wait(long) Thread.join(long)进入状态。其中这些参数代表等待的时间。</li>\n<li> TERMINATED：结束状态。线程调用完run方法进入该状态。</li>\n</ul>\n<h3 id=\"简述线程通信的方式\"><a href=\"#简述线程通信的方式\" class=\"headerlink\" title=\"简述线程通信的方式\"></a>简述线程通信的方式</h3><ul>\n<li> volatile 关键词修饰变量，保证所有线程对变量访问的可见性。</li>\n<li> synchronized关键词。确保多个线程在同一时刻只能有一个处于方法或同步块中。</li>\n<li> wait/notify方法</li>\n<li> IO通信</li>\n</ul>\n<h3 id=\"简述线程池\"><a href=\"#简述线程池\" class=\"headerlink\" title=\"简述线程池\"></a>简述线程池</h3><p>没有线程池的情况下，多次创建，销毁线程开销比较大。如果在开辟的线程执行完当前任务后复用已创建的线程，可以降低开销、控制最大并发数。</p>\n<p>线程池创建线程时，会将线程封装成工作线程 Worker，Worker 在执行完任务后还会循环获取工作队列中的任务来执行。</p>\n<p>将任务派发给线程池时，会出现以下几种情况</p>\n<ul>\n<li> 核心线程池未满，创建一个新的线程执行任务。</li>\n<li> 如果核心线程池已满，工作队列未满，将线程存储在工作队列。</li>\n<li> 如果工作队列已满，线程数小于最大线程数就创建一个新线程处理任务。</li>\n<li> 如果超过大小线程数，按照拒绝策略来处理任务。</li>\n</ul>\n<p>线程池参数：</p>\n<ul>\n<li> corePoolSize：常驻核心线程数。超过该值后如果线程空闲会被销毁。</li>\n<li> maximumPoolSize：线程池能够容纳同时执行的线程最大数。</li>\n<li> keepAliveTime：线程空闲时间，线程空闲时间达到该值后会被销毁，直到只剩下 corePoolSize 个线程为止，避免浪费内存资源。</li>\n<li> workQueue：工作队列。</li>\n<li> threadFactory：线程工厂，用来生产一组相同任务的线程。</li>\n<li> handler：拒绝策略。</li>\n</ul>\n<p>拒绝策略有以下几种：</p>\n<ul>\n<li> AbortPolicy：丢弃任务并抛出异常</li>\n<li> CallerRunsPolicy：重新尝试提交该任务</li>\n<li> DiscardOldestPolicy 抛弃队列里等待最久的任务并把当前任务加入队列</li>\n<li> DiscardPolicy 表示直接抛弃当前任务但不抛出异常。</li>\n</ul>\n<h3 id=\"简述Executor框架\"><a href=\"#简述Executor框架\" class=\"headerlink\" title=\"简述Executor框架\"></a>简述Executor框架</h3><p>Executor框架目的是将任务提交和任务如何运行分离开来的机制。用户不再需要从代码层考虑设计任务的提交运行，只需要调用Executor框架实现类的Execute方法就可以提交任务。</p>\n<h3 id=\"简述Executor的继承关系\"><a href=\"#简述Executor的继承关系\" class=\"headerlink\" title=\"简述Executor的继承关系\"></a>简述Executor的继承关系</h3><ul>\n<li> Executor：一个接口，其定义了一个接收Runnable对象的方法executor，该方法接收一个Runable实例执行这个任务。</li>\n<li> ExecutorService：Executor的子类接口，其定义了一个接收Callable对象的方法，返回 Future 对象，同时提供execute方法。</li>\n<li> ScheduledExecutorService：ExecutorService的子类接口，支持定期执行任务。</li>\n<li> AbstractExecutorService：抽象类，提供 ExecutorService 执行方法的默认实现。</li>\n<li> Executors：实现ExecutorService接口的静态工厂类，提供了一系列工厂方法用于创建线程池。</li>\n<li> ThreadPoolExecutor：继承AbstractExecutorService，用于创建线程池。</li>\n<li> ForkJoinPool: 继承AbstractExecutorService，Fork 将大任务分叉为多个小任务，然后让小任务执行，Join 是获得小任务的结果，类似于map reduce。</li>\n<li> ThreadPoolExecutor：继承ThreadPoolExecutor，实现ScheduledExecutorService，用于创建带定时任务的线程池。</li>\n</ul>\n<h3 id=\"简述线程池的状态\"><a href=\"#简述线程池的状态\" class=\"headerlink\" title=\"简述线程池的状态\"></a>简述线程池的状态</h3><ul>\n<li> Running：能接受新提交的任务，也可以处理阻塞队列的任务。</li>\n<li> Shutdown：不再接受新提交的任务，但可以处理存量任务，线程池处于running时调用shutdown方法，会进入该状态。</li>\n<li> Stop：不接受新任务，不处理存量任务，调用shutdownnow进入该状态。</li>\n<li> Tidying：所有任务已经终止了，worker_count（有效线程数）为0。</li>\n<li> Terminated：线程池彻底终止。在tidying模式下调用terminated方法会进入该状态。</li>\n</ul>\n<h3 id=\"简述线程池类型\"><a href=\"#简述线程池类型\" class=\"headerlink\" title=\"简述线程池类型\"></a>简述线程池类型</h3><ul>\n<li> newCachedThreadPool 可缓存线程池，可设置最小线程数和最大线程数，线程空闲1分钟后自动销毁。</li>\n<li> newFixedThreadPool 指定工作线程数量线程池。</li>\n<li> newSingleThreadExecutor 单线程Executor。</li>\n<li> newScheduleThreadPool 支持定时任务的指定工作线程数量线程池。</li>\n<li> newSingleThreadScheduledExecutor 支持定时任务的单线程Executor。</li>\n</ul>\n<h3 id=\"简述阻塞队列\"><a href=\"#简述阻塞队列\" class=\"headerlink\" title=\"简述阻塞队列\"></a>简述阻塞队列</h3><p>阻塞队列是生产者消费者的实现具体组件之一。当阻塞队列为空时，从队列中获取元素的操作将会被阻塞，当阻塞队列满了，往队列添加元素的操作将会被阻塞。具体实现有：</p>\n<ul>\n<li> ArrayBlockingQueue：底层是由数组组成的有界阻塞队列。</li>\n<li> LinkedBlockingQueue：底层是由链表组成的有界阻塞队列。</li>\n<li> PriorityBlockingQueue：阻塞优先队列。</li>\n<li> DelayQueue：创建元素时可以指定多久才能从队列中获取当前元素</li>\n<li> SynchronousQueue：不存储元素的阻塞队列，每一个存储必须等待一个取出操作</li>\n<li> LinkedTransferQueue：与LinkedBlockingQueue相比多一个transfer方法，即如果当前有消费者正等待接收元素，可以把生产者传入的元素立刻传输给消费者。</li>\n<li> LinkedBlockingDeque：双向阻塞队列。</li>\n</ul>\n<h3 id=\"谈一谈ThreadLocal\"><a href=\"#谈一谈ThreadLocal\" class=\"headerlink\" title=\"谈一谈ThreadLocal\"></a>谈一谈ThreadLocal</h3><p>ThreadLocal 是线程共享变量。ThreadLoacl 有一个静态内部类 ThreadLocalMap，其 Key 是 ThreadLocal 对象，值是 Entry 对象，ThreadLocalMap是每个线程私有的。</p>\n<ul>\n<li> set 给ThreadLocalMap设置值。</li>\n<li> get 获取ThreadLocalMap。</li>\n<li> remove 删除ThreadLocalMap类型的对象。</li>\n</ul>\n<p>存在的问题：对于线程池，由于线程池会重用 Thread 对象，因此与 Thread 绑定的 ThreadLocal 也会被重用，造成一系列问题。</p>\n<p>比如说内存泄漏。由于 ThreadLocal 是弱引用，但 Entry 的 value 是强引用，因此当 ThreadLocal 被垃圾回收后，value 依旧不会被释放，产生内存泄漏。</p>\n<h3 id=\"聊聊你对Java并发包下unsafe类的理解\"><a href=\"#聊聊你对Java并发包下unsafe类的理解\" class=\"headerlink\" title=\"聊聊你对Java并发包下unsafe类的理解\"></a>聊聊你对Java并发包下unsafe类的理解</h3><p>对于 Java 语言，没有直接的指针组件，一般也不能使用偏移量对某块内存进行操作。这些操作相对来讲是安全（safe）的。</p>\n<p>Java 有个类叫 Unsafe 类，这个类使 Java 拥有了像 C 语言的指针一样操作内存空间的能力，同时也带来了指针的问题。这个类可以说是 Java 并发开发的基础。</p>\n<h3 id=\"Java中的乐观锁与CAS算法\"><a href=\"#Java中的乐观锁与CAS算法\" class=\"headerlink\" title=\"Java中的乐观锁与CAS算法\"></a>Java中的乐观锁与CAS算法</h3><p>乐观锁认为数据发送时发生并发冲突的概率不大，所以读操作前不上锁。</p>\n<p>到了写操作时才会进行判断，数据在此期间是否被其他线程修改。如果发生修改，那就返回写入失败；如果没有被修改，那就执行修改操作，返回修改成功。</p>\n<p>乐观锁一般都采用 Compare And Swap（CAS）算法进行实现。顾名思义，该算法涉及到了两个操作，比较（Compare）和交换（Swap）。</p>\n<p>CAS 算法的思路如下：</p>\n<ul>\n<li> 该算法认为不同线程对变量的操作时产生竞争的情况比较少。</li>\n<li> 该算法的核心是对当前读取变量值 E 和内存中的变量旧值 V 进行比较。</li>\n<li> 如果相等，就代表其他线程没有对该变量进行修改，就将变量值更新为新值 N。</li>\n<li> 如果不等，就认为在读取值 E 到比较阶段，有其他线程对变量进行过修改，不进行任何操作。</li>\n</ul>\n<h3 id=\"ABA问题及解决方法简述\"><a href=\"#ABA问题及解决方法简述\" class=\"headerlink\" title=\"ABA问题及解决方法简述\"></a>ABA问题及解决方法简述</h3><p>CAS 算法是基于值来做比较的，如果当前有两个线程，一个线程将变量值从 A 改为 B ，再由 B 改回为 A ，当前线程开始执行 CAS 算法时，就很容易认为值没有变化，误认为读取数据到执行 CAS 算法的期间，没有线程修改过数据。</p>\n<p>juc 包提供了一个 AtomicStampedReference，即在原始的版本下加入版本号戳，解决 ABA 问题。</p>\n<h3 id=\"简述常见的Atomic类\"><a href=\"#简述常见的Atomic类\" class=\"headerlink\" title=\"简述常见的Atomic类\"></a>简述常见的Atomic类</h3><p>在很多时候，我们需要的仅仅是一个简单的、高效的、线程安全的++或者–方案，使用synchronized关键字和lock固然可以实现，但代价比较大，此时用原子类更加方便。基本数据类型的原子类有：</p>\n<ul>\n<li> AtomicInteger 原子更新整形</li>\n<li> AtomicLong 原子更新长整型</li>\n<li> AtomicBoolean 原子更新布尔类型</li>\n</ul>\n<p>Atomic数组类型有：</p>\n<ul>\n<li> AtomicIntegerArray 原子更新整形数组里的元素</li>\n<li> AtomicLongArray 原子更新长整型数组里的元素</li>\n<li> AtomicReferenceArray 原子更新引用类型数组里的元素。</li>\n</ul>\n<p>Atomic引用类型有：</p>\n<ul>\n<li> AtomicReference 原子更新引用类型</li>\n<li> AtomicMarkableReference 原子更新带有标记位的引用类型，可以绑定一个 boolean 标记</li>\n<li> AtomicStampedReference 原子更新带有版本号的引用类型</li>\n</ul>\n<p>FieldUpdater类型：</p>\n<ul>\n<li> AtomicIntegerFieldUpdater 原子更新整形字段的更新器</li>\n<li> AtomicLongFieldUpdater 原子更新长整形字段的更新器</li>\n<li> AtomicReferenceFieldUpdater 原子更新引用类型字段的更新器</li>\n</ul>\n<h3 id=\"简述Atomic类基本实现原理\"><a href=\"#简述Atomic类基本实现原理\" class=\"headerlink\" title=\"简述Atomic类基本实现原理\"></a>简述Atomic类基本实现原理</h3><p>以AtomicIntger 为例。</p>\n<p>方法getAndIncrement，以原子方式将当前的值加1，具体实现为：</p>\n<ul>\n<li> 在 for 死循环中取得 AtomicInteger 里存储的数值</li>\n<li> 对 AtomicInteger 当前的值加 1</li>\n<li> 调用 compareAndSet 方法进行原子更新</li>\n<li> 先检查当前数值是否等于 expect</li>\n<li> 如果等于则说明当前值没有被其他线程修改，则将值更新为 next，</li>\n<li> 如果不是会更新失败返回 false，程序会进入 for 循环重新进行 compareAndSet 操作。</li>\n</ul>\n<h3 id=\"简述CountDownLatch\"><a href=\"#简述CountDownLatch\" class=\"headerlink\" title=\"简述CountDownLatch\"></a>简述CountDownLatch</h3><p>CountDownLatch这个类使一个线程等待其他线程各自执行完毕后再执行。是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，调用countDown方法，计数器的值就减1，当计数器的值为0时，表示所有线程都执行完毕，然后在等待的线程就可以恢复工作了。只能一次性使用，不能reset。</p>\n<h3 id=\"简述CyclicBarrier\"><a href=\"#简述CyclicBarrier\" class=\"headerlink\" title=\"简述CyclicBarrier\"></a>简述CyclicBarrier</h3><p>CyclicBarrier 主要功能和CountDownLatch类似，也是通过一个计数器，使一个线程等待其他线程各自执行完毕后再执行。但是其可以重复使用（reset）。</p>\n<h3 id=\"简述Semaphore\"><a href=\"#简述Semaphore\" class=\"headerlink\" title=\"简述Semaphore\"></a>简述Semaphore</h3><p>Semaphore即信号量。Semaphore 的构造方法参数接收一个 int 值，设置一个计数器，表示可用的许可数量即最大并发数。使用 acquire 方法获得一个许可证，计数器减一，使用 release 方法归还许可，计数器加一。如果此时计数器值为0，线程进入休眠。</p>\n<h3 id=\"简述Exchanger\"><a href=\"#简述Exchanger\" class=\"headerlink\" title=\"简述Exchanger\"></a>简述Exchanger</h3><p>Exchanger类可用于两个线程之间交换信息。可简单地将Exchanger对象理解为一个包含两个格子的容器，通过exchanger方法可以向两个格子中填充信息。线程通过exchange 方法交换数据，第一个线程执行 exchange 方法后会阻塞等待第二个线程执行该方法。当两个线程都到达同步点时这两个线程就可以交换数据当两个格子中的均被填充时，该对象会自动将两个格子的信息交换，然后返回给线程，从而实现两个线程的信息交换。</p>\n<h3 id=\"简述ConcurrentHashMap\"><a href=\"#简述ConcurrentHashMap\" class=\"headerlink\" title=\"简述ConcurrentHashMap\"></a>简述ConcurrentHashMap</h3><p>JDK7采用锁分段技术。首先将数据分成 Segment 数据段，然后给每一个数据段配一把锁，当一个线程占用锁访问其中一个段的数据时，其他段的数据也能被其他线程访问。</p>\n<p>get 除读到空值不需要加锁。该方法先经过一次再散列，再用这个散列值通过散列运算定位到 Segment，最后通过散列算法定位到元素。put 须加锁，首先定位到 Segment，然后进行插入操作，第一步判断是否需要对 Segment 里的 HashEntry 数组进行扩容，第二步定位添加元素的位置，然后将其放入数组。</p>\n<p>JDK8的改进</p>\n<ul>\n<li> 取消分段锁机制，采用CAS算法进行值的设置，如果CAS失败再使用 synchronized 加锁添加元素</li>\n<li> 引入红黑树结构，当某个槽内的元素个数超过8且 Node数组 容量大于 64 时，链表转为红黑树。</li>\n<li> 使用了更加优化的方式统计集合内的元素数量。</li>\n</ul>\n<h3 id=\"synchronized底层实现原理\"><a href=\"#synchronized底层实现原理\" class=\"headerlink\" title=\"synchronized底层实现原理\"></a>synchronized底层实现原理</h3><p>Java 对象底层都会关联一个 monitor，使用 synchronized 时 JVM 会根据使用环境找到对象的 monitor，根据 monitor 的状态进行加解锁的判断。如果成功加锁就成为该 monitor 的唯一持有者，monitor 在被释放前不能再被其他线程获取。</p>\n<p>synchronized在JVM编译后会产生monitorenter 和 monitorexit 这两个字节码指令，获取和释放 monitor。这两个字节码指令都需要一个引用类型的参数指明要锁定和解锁的对象，对于同步普通方法，锁是当前实例对象；对于静态同步方法，锁是当前类的 Class 对象；对于同步方法块，锁是 synchronized 括号里的对象。</p>\n<p>执行 monitorenter 指令时，首先尝试获取对象锁。如果这个对象没有被锁定，或当前线程已经持有锁，就把锁的计数器加 1，执行 monitorexit 指令时会将锁计数器减 1。一旦计数器为 0 锁随即就被释放。</p>\n<h3 id=\"synchronized关键词使用方法\"><a href=\"#synchronized关键词使用方法\" class=\"headerlink\" title=\"synchronized关键词使用方法\"></a>synchronized关键词使用方法</h3><ul>\n<li> 直接修饰某个实例方法</li>\n<li> 直接修饰某个静态方法</li>\n<li> 修饰代码块</li>\n</ul>\n<h3 id=\"简述Java偏向锁\"><a href=\"#简述Java偏向锁\" class=\"headerlink\" title=\"简述Java偏向锁\"></a>简述Java偏向锁</h3><p>JDK 1.6 中提出了偏向锁的概念。该锁提出的原因是，开发者发现多数情况下锁并不存在竞争，一把锁往往是由同一个线程获得的。偏向锁并不会主动释放，这样每次偏向锁进入的时候都会判断该资源是否是偏向自己的，如果是偏向自己的则不需要进行额外的操作，直接可以进入同步操作。</p>\n<p>其申请流程为：</p>\n<ul>\n<li> 首先需要判断对象的 Mark Word 是否属于偏向模式，如果不属于，那就进入轻量级锁判断逻辑。否则继续下一步判断；</li>\n<li> 判断目前请求锁的线程 ID 是否和偏向锁本身记录的线程 ID 一致。如果一致，继续下一步的判断，如果不一致，跳转到步骤4；</li>\n<li> 判断是否需要重偏向。如果不用的话，直接获得偏向锁；</li>\n<li> 利用 CAS 算法将对象的 Mark Word 进行更改，使线程 ID 部分换成本线程 ID。如果更换成功，则重偏向完成，获得偏向锁。如果失败，则说明有多线程竞争，升级为轻量级锁。</li>\n</ul>\n<h3 id=\"简述轻量级锁\"><a href=\"#简述轻量级锁\" class=\"headerlink\" title=\"简述轻量级锁\"></a>简述轻量级锁</h3><p>轻量级锁是为了在没有竞争的前提下减少重量级锁出现并导致的性能消耗。</p>\n<p>其申请流程为：</p>\n<ul>\n<li> 如果同步对象没有被锁定，虚拟机将在当前线程的栈帧中建立一个锁记录空间，存储锁对象目前 Mark Word 的拷贝。</li>\n<li> 虚拟机使用 CAS 尝试把对象的 Mark Word 更新为指向锁记录的指针</li>\n<li> 如果更新成功即代表该线程拥有了锁，锁标志位将转变为 00，表示处于轻量级锁定状态。</li>\n<li> 如果更新失败就意味着至少存在一条线程与当前线程竞争。虚拟机检查对象的 Mark Word 是否指向当前线程的栈帧</li>\n<li> 如果指向当前线程的栈帧，说明当前线程已经拥有了锁，直接进入同步块继续执行</li>\n<li> 如果不是则说明锁对象已经被其他线程抢占。</li>\n<li> 如果出现两条以上线程争用同一个锁，轻量级锁就不再有效，将膨胀为重量级锁，锁标志状态变为 10，此时Mark Word 存储的就是指向重量级锁的指针，后面等待锁的线程也必须阻塞。</li>\n</ul>\n<h3 id=\"简述锁优化策略\"><a href=\"#简述锁优化策略\" class=\"headerlink\" title=\"简述锁优化策略\"></a>简述锁优化策略</h3><p>即自适应自旋、锁消除、锁粗化、锁升级等策略偏。</p>\n<h3 id=\"简述Java的自旋锁\"><a href=\"#简述Java的自旋锁\" class=\"headerlink\" title=\"简述Java的自旋锁\"></a>简述Java的自旋锁</h3><p>线程获取锁失败后，可以采用这样的策略，可以不放弃 CPU ，不停的重试内重试，这种操作也称为自旋锁。</p>\n<h3 id=\"简述自适应自旋锁\"><a href=\"#简述自适应自旋锁\" class=\"headerlink\" title=\"简述自适应自旋锁\"></a>简述自适应自旋锁</h3><p>自适应自旋锁自旋次数不再人为设定，通常由前一次在同一个锁上的自旋时间及锁的拥有者的状态决定。</p>\n<h3 id=\"简述锁粗化\"><a href=\"#简述锁粗化\" class=\"headerlink\" title=\"简述锁粗化\"></a>简述锁粗化</h3><p>锁粗化的思想就是扩大加锁范围，避免反复的加锁和解锁。</p>\n<h3 id=\"简述锁消除\"><a href=\"#简述锁消除\" class=\"headerlink\" title=\"简述锁消除\"></a>简述锁消除</h3><p>锁消除是一种更为彻底的优化，在编译时，Java编译器对运行上下文进行扫描，去除不可能存在共享资源竞争的锁。</p>\n<h3 id=\"简述Lock与ReentrantLock\"><a href=\"#简述Lock与ReentrantLock\" class=\"headerlink\" title=\"简述Lock与ReentrantLock\"></a>简述Lock与ReentrantLock</h3><p>Lock接口是 Java并发包的顶层接口。</p>\n<p>可重入锁 ReentrantLock 是 Lock 最常见的实现，与 synchronized 一样可重入。ReentrantLock 在默认情况下是非公平的，可以通过构造方法指定公平锁。一旦使用了公平锁，性能会下降。</p>\n<h3 id=\"简述AQS\"><a href=\"#简述AQS\" class=\"headerlink\" title=\"简述AQS\"></a>简述AQS</h3><p>AQS（AbstractQuenedSynchronizer）抽象的队列式同步器。AQS是将每一条请求共享资源的线程封装成一个锁队列的一个结点（Node），来实现锁的分配。AQS是用来构建锁或其他同步组件的基础框架，它使用一个 volatile int state 变量作为共享资源，如果线程获取资源失败，则进入同步队列等待；如果获取成功就执行临界区代码，释放资源时会通知同步队列中的等待线程。</p>\n<p>子类通过继承同步器并实现它的抽象方法getState、setState 和 compareAndSetState对同步状态进行更改。</p>\n<p>AQS获取独占锁/释放独占锁原理：</p>\n<p>获取：（acquire）</p>\n<ul>\n<li> 调用 tryAcquire 方法安全地获取线程同步状态，获取失败的线程会被构造同步节点并通过 addWaiter 方法加入到同步队列的尾部，在队列中自旋。</li>\n<li> 调用 acquireQueued 方法使得该节点以死循环的方式获取同步状态，如果获取不到则阻塞。</li>\n</ul>\n<p>释放：（release）</p>\n<ul>\n<li> 调用 tryRelease 方法释放同步状态</li>\n<li> 调用 unparkSuccessor 方法唤醒头节点的后继节点，使后继节点重新尝试获取同步状态。</li>\n</ul>\n<p>AQS获取共享锁/释放共享锁原理</p>\n<p>获取锁（acquireShared）</p>\n<ul>\n<li> 调用 tryAcquireShared 方法尝试获取同步状态，返回值不小于 0 表示能获取同步状态。</li>\n<li> 释放（releaseShared），并唤醒后续处于等待状态的节点。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h3 id=\"简述Java内存模型（JMM）\"><a href=\"#简述Java内存模型（JMM）\" class=\"headerlink\" title=\"简述Java内存模型（JMM）\"></a>简述Java内存模型（JMM）</h3><p>Java内存模型定义了程序中各种变量的访问规则：</p>\n<ul>\n<li> 所有变量都存储在主存，每个线程都有自己的工作内存。</li>\n<li> 工作内存中保存了被该线程使用的变量的主存副本，线程对变量的所有操作都必须在工作空间进行，不能直接读写主内存数据。</li>\n<li> 操作完成后，线程的工作内存通过缓存一致性协议将操作完的数据刷回主存。</li>\n</ul>\n<h3 id=\"简述as-if-serial\"><a href=\"#简述as-if-serial\" class=\"headerlink\" title=\"简述as-if-serial\"></a>简述as-if-serial</h3><p>编译器会对原始的程序进行指令重排序和优化。但不管怎么重排序，其结果都必须和用户原始程序输出的预定结果保持一致。</p>\n<h3 id=\"简述happens-before八大规则\"><a href=\"#简述happens-before八大规则\" class=\"headerlink\" title=\"简述happens-before八大规则\"></a>简述happens-before八大规则</h3><ul>\n<li> 程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作；</li>\n<li> 锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作；</li>\n<li> volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作；</li>\n<li> 传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C；</li>\n<li> 线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作；</li>\n<li> 线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；</li>\n<li> 线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；</li>\n<li> 对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始；</li>\n</ul>\n<h3 id=\"as-if-serial-和-happens-before-的区别\"><a href=\"#as-if-serial-和-happens-before-的区别\" class=\"headerlink\" title=\"as-if-serial 和 happens-before 的区别\"></a>as-if-serial 和 happens-before 的区别</h3><p>as-if-serial 保证单线程程序的执行结果不变，happens-before 保证正确同步的多线程程序的执行结果不变。</p>\n<h3 id=\"简述原子性操作\"><a href=\"#简述原子性操作\" class=\"headerlink\" title=\"简述原子性操作\"></a>简述原子性操作</h3><p>一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行，这就是原子性操作。</p>\n<h3 id=\"简述线程的可见性\"><a href=\"#简述线程的可见性\" class=\"headerlink\" title=\"简述线程的可见性\"></a>简述线程的可见性</h3><p>可见性指当一个线程修改了共享变量时，其他线程能够立即得知修改。volatile、synchronized、final 关键字都能保证可见性。</p>\n<h3 id=\"简述有序性\"><a href=\"#简述有序性\" class=\"headerlink\" title=\"简述有序性\"></a>简述有序性</h3><p>虽然多线程存在并发和指令优化等操作，但在本线程内观察该线程的所有执行操作是有序的。</p>\n<h3 id=\"简述Java中volatile关键字作用\"><a href=\"#简述Java中volatile关键字作用\" class=\"headerlink\" title=\"简述Java中volatile关键字作用\"></a>简述Java中volatile关键字作用</h3><ul>\n<li> 保证变量对所有线程的可见性。当一个线程修改了变量值，新值对于其他线程来说是立即可以得知的。</li>\n<li> 禁止指令重排。使用 volatile 变量进行写操作，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器进行重排序。</li>\n</ul>\n<h3 id=\"Java线程的实现方式\"><a href=\"#Java线程的实现方式\" class=\"headerlink\" title=\"Java线程的实现方式\"></a>Java线程的实现方式</h3><ul>\n<li> 实现Runnable接口</li>\n<li> 继承Thread类</li>\n<li> 实现Callable接口</li>\n</ul>\n<h3 id=\"简述Java线程的状态\"><a href=\"#简述Java线程的状态\" class=\"headerlink\" title=\"简述Java线程的状态\"></a>简述Java线程的状态</h3><p>线程状态有 NEW、RUNNABLE、BLOCK、WAITING、TIMED_WAITING、THERMINATED</p>\n<ul>\n<li> NEW：新建状态，线程被创建且未启动，此时还未调用 start 方法。</li>\n<li> RUNNABLE：运行状态。表示线程正在JVM中执行，但是这个执行，不一定真的在跑，也可能在排队等CPU。</li>\n<li> BLOCKED：阻塞状态。线程等待获取锁，锁还没获得。</li>\n<li> WAITING：等待状态。线程内run方法执行完Object.wait()/Thread.join()进入该状态。</li>\n<li> TIMED_WAITING：限期等待。在一定时间之后跳出状态。调用Thread.sleep(long) Object.wait(long) Thread.join(long)进入状态。其中这些参数代表等待的时间。</li>\n<li> TERMINATED：结束状态。线程调用完run方法进入该状态。</li>\n</ul>\n<h3 id=\"简述线程通信的方式\"><a href=\"#简述线程通信的方式\" class=\"headerlink\" title=\"简述线程通信的方式\"></a>简述线程通信的方式</h3><ul>\n<li> volatile 关键词修饰变量，保证所有线程对变量访问的可见性。</li>\n<li> synchronized关键词。确保多个线程在同一时刻只能有一个处于方法或同步块中。</li>\n<li> wait/notify方法</li>\n<li> IO通信</li>\n</ul>\n<h3 id=\"简述线程池\"><a href=\"#简述线程池\" class=\"headerlink\" title=\"简述线程池\"></a>简述线程池</h3><p>没有线程池的情况下，多次创建，销毁线程开销比较大。如果在开辟的线程执行完当前任务后复用已创建的线程，可以降低开销、控制最大并发数。</p>\n<p>线程池创建线程时，会将线程封装成工作线程 Worker，Worker 在执行完任务后还会循环获取工作队列中的任务来执行。</p>\n<p>将任务派发给线程池时，会出现以下几种情况</p>\n<ul>\n<li> 核心线程池未满，创建一个新的线程执行任务。</li>\n<li> 如果核心线程池已满，工作队列未满，将线程存储在工作队列。</li>\n<li> 如果工作队列已满，线程数小于最大线程数就创建一个新线程处理任务。</li>\n<li> 如果超过大小线程数，按照拒绝策略来处理任务。</li>\n</ul>\n<p>线程池参数：</p>\n<ul>\n<li> corePoolSize：常驻核心线程数。超过该值后如果线程空闲会被销毁。</li>\n<li> maximumPoolSize：线程池能够容纳同时执行的线程最大数。</li>\n<li> keepAliveTime：线程空闲时间，线程空闲时间达到该值后会被销毁，直到只剩下 corePoolSize 个线程为止，避免浪费内存资源。</li>\n<li> workQueue：工作队列。</li>\n<li> threadFactory：线程工厂，用来生产一组相同任务的线程。</li>\n<li> handler：拒绝策略。</li>\n</ul>\n<p>拒绝策略有以下几种：</p>\n<ul>\n<li> AbortPolicy：丢弃任务并抛出异常</li>\n<li> CallerRunsPolicy：重新尝试提交该任务</li>\n<li> DiscardOldestPolicy 抛弃队列里等待最久的任务并把当前任务加入队列</li>\n<li> DiscardPolicy 表示直接抛弃当前任务但不抛出异常。</li>\n</ul>\n<h3 id=\"简述Executor框架\"><a href=\"#简述Executor框架\" class=\"headerlink\" title=\"简述Executor框架\"></a>简述Executor框架</h3><p>Executor框架目的是将任务提交和任务如何运行分离开来的机制。用户不再需要从代码层考虑设计任务的提交运行，只需要调用Executor框架实现类的Execute方法就可以提交任务。</p>\n<h3 id=\"简述Executor的继承关系\"><a href=\"#简述Executor的继承关系\" class=\"headerlink\" title=\"简述Executor的继承关系\"></a>简述Executor的继承关系</h3><ul>\n<li> Executor：一个接口，其定义了一个接收Runnable对象的方法executor，该方法接收一个Runable实例执行这个任务。</li>\n<li> ExecutorService：Executor的子类接口，其定义了一个接收Callable对象的方法，返回 Future 对象，同时提供execute方法。</li>\n<li> ScheduledExecutorService：ExecutorService的子类接口，支持定期执行任务。</li>\n<li> AbstractExecutorService：抽象类，提供 ExecutorService 执行方法的默认实现。</li>\n<li> Executors：实现ExecutorService接口的静态工厂类，提供了一系列工厂方法用于创建线程池。</li>\n<li> ThreadPoolExecutor：继承AbstractExecutorService，用于创建线程池。</li>\n<li> ForkJoinPool: 继承AbstractExecutorService，Fork 将大任务分叉为多个小任务，然后让小任务执行，Join 是获得小任务的结果，类似于map reduce。</li>\n<li> ThreadPoolExecutor：继承ThreadPoolExecutor，实现ScheduledExecutorService，用于创建带定时任务的线程池。</li>\n</ul>\n<h3 id=\"简述线程池的状态\"><a href=\"#简述线程池的状态\" class=\"headerlink\" title=\"简述线程池的状态\"></a>简述线程池的状态</h3><ul>\n<li> Running：能接受新提交的任务，也可以处理阻塞队列的任务。</li>\n<li> Shutdown：不再接受新提交的任务，但可以处理存量任务，线程池处于running时调用shutdown方法，会进入该状态。</li>\n<li> Stop：不接受新任务，不处理存量任务，调用shutdownnow进入该状态。</li>\n<li> Tidying：所有任务已经终止了，worker_count（有效线程数）为0。</li>\n<li> Terminated：线程池彻底终止。在tidying模式下调用terminated方法会进入该状态。</li>\n</ul>\n<h3 id=\"简述线程池类型\"><a href=\"#简述线程池类型\" class=\"headerlink\" title=\"简述线程池类型\"></a>简述线程池类型</h3><ul>\n<li> newCachedThreadPool 可缓存线程池，可设置最小线程数和最大线程数，线程空闲1分钟后自动销毁。</li>\n<li> newFixedThreadPool 指定工作线程数量线程池。</li>\n<li> newSingleThreadExecutor 单线程Executor。</li>\n<li> newScheduleThreadPool 支持定时任务的指定工作线程数量线程池。</li>\n<li> newSingleThreadScheduledExecutor 支持定时任务的单线程Executor。</li>\n</ul>\n<h3 id=\"简述阻塞队列\"><a href=\"#简述阻塞队列\" class=\"headerlink\" title=\"简述阻塞队列\"></a>简述阻塞队列</h3><p>阻塞队列是生产者消费者的实现具体组件之一。当阻塞队列为空时，从队列中获取元素的操作将会被阻塞，当阻塞队列满了，往队列添加元素的操作将会被阻塞。具体实现有：</p>\n<ul>\n<li> ArrayBlockingQueue：底层是由数组组成的有界阻塞队列。</li>\n<li> LinkedBlockingQueue：底层是由链表组成的有界阻塞队列。</li>\n<li> PriorityBlockingQueue：阻塞优先队列。</li>\n<li> DelayQueue：创建元素时可以指定多久才能从队列中获取当前元素</li>\n<li> SynchronousQueue：不存储元素的阻塞队列，每一个存储必须等待一个取出操作</li>\n<li> LinkedTransferQueue：与LinkedBlockingQueue相比多一个transfer方法，即如果当前有消费者正等待接收元素，可以把生产者传入的元素立刻传输给消费者。</li>\n<li> LinkedBlockingDeque：双向阻塞队列。</li>\n</ul>\n<h3 id=\"谈一谈ThreadLocal\"><a href=\"#谈一谈ThreadLocal\" class=\"headerlink\" title=\"谈一谈ThreadLocal\"></a>谈一谈ThreadLocal</h3><p>ThreadLocal 是线程共享变量。ThreadLoacl 有一个静态内部类 ThreadLocalMap，其 Key 是 ThreadLocal 对象，值是 Entry 对象，ThreadLocalMap是每个线程私有的。</p>\n<ul>\n<li> set 给ThreadLocalMap设置值。</li>\n<li> get 获取ThreadLocalMap。</li>\n<li> remove 删除ThreadLocalMap类型的对象。</li>\n</ul>\n<p>存在的问题：对于线程池，由于线程池会重用 Thread 对象，因此与 Thread 绑定的 ThreadLocal 也会被重用，造成一系列问题。</p>\n<p>比如说内存泄漏。由于 ThreadLocal 是弱引用，但 Entry 的 value 是强引用，因此当 ThreadLocal 被垃圾回收后，value 依旧不会被释放，产生内存泄漏。</p>\n<h3 id=\"聊聊你对Java并发包下unsafe类的理解\"><a href=\"#聊聊你对Java并发包下unsafe类的理解\" class=\"headerlink\" title=\"聊聊你对Java并发包下unsafe类的理解\"></a>聊聊你对Java并发包下unsafe类的理解</h3><p>对于 Java 语言，没有直接的指针组件，一般也不能使用偏移量对某块内存进行操作。这些操作相对来讲是安全（safe）的。</p>\n<p>Java 有个类叫 Unsafe 类，这个类使 Java 拥有了像 C 语言的指针一样操作内存空间的能力，同时也带来了指针的问题。这个类可以说是 Java 并发开发的基础。</p>\n<h3 id=\"Java中的乐观锁与CAS算法\"><a href=\"#Java中的乐观锁与CAS算法\" class=\"headerlink\" title=\"Java中的乐观锁与CAS算法\"></a>Java中的乐观锁与CAS算法</h3><p>乐观锁认为数据发送时发生并发冲突的概率不大，所以读操作前不上锁。</p>\n<p>到了写操作时才会进行判断，数据在此期间是否被其他线程修改。如果发生修改，那就返回写入失败；如果没有被修改，那就执行修改操作，返回修改成功。</p>\n<p>乐观锁一般都采用 Compare And Swap（CAS）算法进行实现。顾名思义，该算法涉及到了两个操作，比较（Compare）和交换（Swap）。</p>\n<p>CAS 算法的思路如下：</p>\n<ul>\n<li> 该算法认为不同线程对变量的操作时产生竞争的情况比较少。</li>\n<li> 该算法的核心是对当前读取变量值 E 和内存中的变量旧值 V 进行比较。</li>\n<li> 如果相等，就代表其他线程没有对该变量进行修改，就将变量值更新为新值 N。</li>\n<li> 如果不等，就认为在读取值 E 到比较阶段，有其他线程对变量进行过修改，不进行任何操作。</li>\n</ul>\n<h3 id=\"ABA问题及解决方法简述\"><a href=\"#ABA问题及解决方法简述\" class=\"headerlink\" title=\"ABA问题及解决方法简述\"></a>ABA问题及解决方法简述</h3><p>CAS 算法是基于值来做比较的，如果当前有两个线程，一个线程将变量值从 A 改为 B ，再由 B 改回为 A ，当前线程开始执行 CAS 算法时，就很容易认为值没有变化，误认为读取数据到执行 CAS 算法的期间，没有线程修改过数据。</p>\n<p>juc 包提供了一个 AtomicStampedReference，即在原始的版本下加入版本号戳，解决 ABA 问题。</p>\n<h3 id=\"简述常见的Atomic类\"><a href=\"#简述常见的Atomic类\" class=\"headerlink\" title=\"简述常见的Atomic类\"></a>简述常见的Atomic类</h3><p>在很多时候，我们需要的仅仅是一个简单的、高效的、线程安全的++或者–方案，使用synchronized关键字和lock固然可以实现，但代价比较大，此时用原子类更加方便。基本数据类型的原子类有：</p>\n<ul>\n<li> AtomicInteger 原子更新整形</li>\n<li> AtomicLong 原子更新长整型</li>\n<li> AtomicBoolean 原子更新布尔类型</li>\n</ul>\n<p>Atomic数组类型有：</p>\n<ul>\n<li> AtomicIntegerArray 原子更新整形数组里的元素</li>\n<li> AtomicLongArray 原子更新长整型数组里的元素</li>\n<li> AtomicReferenceArray 原子更新引用类型数组里的元素。</li>\n</ul>\n<p>Atomic引用类型有：</p>\n<ul>\n<li> AtomicReference 原子更新引用类型</li>\n<li> AtomicMarkableReference 原子更新带有标记位的引用类型，可以绑定一个 boolean 标记</li>\n<li> AtomicStampedReference 原子更新带有版本号的引用类型</li>\n</ul>\n<p>FieldUpdater类型：</p>\n<ul>\n<li> AtomicIntegerFieldUpdater 原子更新整形字段的更新器</li>\n<li> AtomicLongFieldUpdater 原子更新长整形字段的更新器</li>\n<li> AtomicReferenceFieldUpdater 原子更新引用类型字段的更新器</li>\n</ul>\n<h3 id=\"简述Atomic类基本实现原理\"><a href=\"#简述Atomic类基本实现原理\" class=\"headerlink\" title=\"简述Atomic类基本实现原理\"></a>简述Atomic类基本实现原理</h3><p>以AtomicIntger 为例。</p>\n<p>方法getAndIncrement，以原子方式将当前的值加1，具体实现为：</p>\n<ul>\n<li> 在 for 死循环中取得 AtomicInteger 里存储的数值</li>\n<li> 对 AtomicInteger 当前的值加 1</li>\n<li> 调用 compareAndSet 方法进行原子更新</li>\n<li> 先检查当前数值是否等于 expect</li>\n<li> 如果等于则说明当前值没有被其他线程修改，则将值更新为 next，</li>\n<li> 如果不是会更新失败返回 false，程序会进入 for 循环重新进行 compareAndSet 操作。</li>\n</ul>\n<h3 id=\"简述CountDownLatch\"><a href=\"#简述CountDownLatch\" class=\"headerlink\" title=\"简述CountDownLatch\"></a>简述CountDownLatch</h3><p>CountDownLatch这个类使一个线程等待其他线程各自执行完毕后再执行。是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，调用countDown方法，计数器的值就减1，当计数器的值为0时，表示所有线程都执行完毕，然后在等待的线程就可以恢复工作了。只能一次性使用，不能reset。</p>\n<h3 id=\"简述CyclicBarrier\"><a href=\"#简述CyclicBarrier\" class=\"headerlink\" title=\"简述CyclicBarrier\"></a>简述CyclicBarrier</h3><p>CyclicBarrier 主要功能和CountDownLatch类似，也是通过一个计数器，使一个线程等待其他线程各自执行完毕后再执行。但是其可以重复使用（reset）。</p>\n<h3 id=\"简述Semaphore\"><a href=\"#简述Semaphore\" class=\"headerlink\" title=\"简述Semaphore\"></a>简述Semaphore</h3><p>Semaphore即信号量。Semaphore 的构造方法参数接收一个 int 值，设置一个计数器，表示可用的许可数量即最大并发数。使用 acquire 方法获得一个许可证，计数器减一，使用 release 方法归还许可，计数器加一。如果此时计数器值为0，线程进入休眠。</p>\n<h3 id=\"简述Exchanger\"><a href=\"#简述Exchanger\" class=\"headerlink\" title=\"简述Exchanger\"></a>简述Exchanger</h3><p>Exchanger类可用于两个线程之间交换信息。可简单地将Exchanger对象理解为一个包含两个格子的容器，通过exchanger方法可以向两个格子中填充信息。线程通过exchange 方法交换数据，第一个线程执行 exchange 方法后会阻塞等待第二个线程执行该方法。当两个线程都到达同步点时这两个线程就可以交换数据当两个格子中的均被填充时，该对象会自动将两个格子的信息交换，然后返回给线程，从而实现两个线程的信息交换。</p>\n<h3 id=\"简述ConcurrentHashMap\"><a href=\"#简述ConcurrentHashMap\" class=\"headerlink\" title=\"简述ConcurrentHashMap\"></a>简述ConcurrentHashMap</h3><p>JDK7采用锁分段技术。首先将数据分成 Segment 数据段，然后给每一个数据段配一把锁，当一个线程占用锁访问其中一个段的数据时，其他段的数据也能被其他线程访问。</p>\n<p>get 除读到空值不需要加锁。该方法先经过一次再散列，再用这个散列值通过散列运算定位到 Segment，最后通过散列算法定位到元素。put 须加锁，首先定位到 Segment，然后进行插入操作，第一步判断是否需要对 Segment 里的 HashEntry 数组进行扩容，第二步定位添加元素的位置，然后将其放入数组。</p>\n<p>JDK8的改进</p>\n<ul>\n<li> 取消分段锁机制，采用CAS算法进行值的设置，如果CAS失败再使用 synchronized 加锁添加元素</li>\n<li> 引入红黑树结构，当某个槽内的元素个数超过8且 Node数组 容量大于 64 时，链表转为红黑树。</li>\n<li> 使用了更加优化的方式统计集合内的元素数量。</li>\n</ul>\n<h3 id=\"synchronized底层实现原理\"><a href=\"#synchronized底层实现原理\" class=\"headerlink\" title=\"synchronized底层实现原理\"></a>synchronized底层实现原理</h3><p>Java 对象底层都会关联一个 monitor，使用 synchronized 时 JVM 会根据使用环境找到对象的 monitor，根据 monitor 的状态进行加解锁的判断。如果成功加锁就成为该 monitor 的唯一持有者，monitor 在被释放前不能再被其他线程获取。</p>\n<p>synchronized在JVM编译后会产生monitorenter 和 monitorexit 这两个字节码指令，获取和释放 monitor。这两个字节码指令都需要一个引用类型的参数指明要锁定和解锁的对象，对于同步普通方法，锁是当前实例对象；对于静态同步方法，锁是当前类的 Class 对象；对于同步方法块，锁是 synchronized 括号里的对象。</p>\n<p>执行 monitorenter 指令时，首先尝试获取对象锁。如果这个对象没有被锁定，或当前线程已经持有锁，就把锁的计数器加 1，执行 monitorexit 指令时会将锁计数器减 1。一旦计数器为 0 锁随即就被释放。</p>\n<h3 id=\"synchronized关键词使用方法\"><a href=\"#synchronized关键词使用方法\" class=\"headerlink\" title=\"synchronized关键词使用方法\"></a>synchronized关键词使用方法</h3><ul>\n<li> 直接修饰某个实例方法</li>\n<li> 直接修饰某个静态方法</li>\n<li> 修饰代码块</li>\n</ul>\n<h3 id=\"简述Java偏向锁\"><a href=\"#简述Java偏向锁\" class=\"headerlink\" title=\"简述Java偏向锁\"></a>简述Java偏向锁</h3><p>JDK 1.6 中提出了偏向锁的概念。该锁提出的原因是，开发者发现多数情况下锁并不存在竞争，一把锁往往是由同一个线程获得的。偏向锁并不会主动释放，这样每次偏向锁进入的时候都会判断该资源是否是偏向自己的，如果是偏向自己的则不需要进行额外的操作，直接可以进入同步操作。</p>\n<p>其申请流程为：</p>\n<ul>\n<li> 首先需要判断对象的 Mark Word 是否属于偏向模式，如果不属于，那就进入轻量级锁判断逻辑。否则继续下一步判断；</li>\n<li> 判断目前请求锁的线程 ID 是否和偏向锁本身记录的线程 ID 一致。如果一致，继续下一步的判断，如果不一致，跳转到步骤4；</li>\n<li> 判断是否需要重偏向。如果不用的话，直接获得偏向锁；</li>\n<li> 利用 CAS 算法将对象的 Mark Word 进行更改，使线程 ID 部分换成本线程 ID。如果更换成功，则重偏向完成，获得偏向锁。如果失败，则说明有多线程竞争，升级为轻量级锁。</li>\n</ul>\n<h3 id=\"简述轻量级锁\"><a href=\"#简述轻量级锁\" class=\"headerlink\" title=\"简述轻量级锁\"></a>简述轻量级锁</h3><p>轻量级锁是为了在没有竞争的前提下减少重量级锁出现并导致的性能消耗。</p>\n<p>其申请流程为：</p>\n<ul>\n<li> 如果同步对象没有被锁定，虚拟机将在当前线程的栈帧中建立一个锁记录空间，存储锁对象目前 Mark Word 的拷贝。</li>\n<li> 虚拟机使用 CAS 尝试把对象的 Mark Word 更新为指向锁记录的指针</li>\n<li> 如果更新成功即代表该线程拥有了锁，锁标志位将转变为 00，表示处于轻量级锁定状态。</li>\n<li> 如果更新失败就意味着至少存在一条线程与当前线程竞争。虚拟机检查对象的 Mark Word 是否指向当前线程的栈帧</li>\n<li> 如果指向当前线程的栈帧，说明当前线程已经拥有了锁，直接进入同步块继续执行</li>\n<li> 如果不是则说明锁对象已经被其他线程抢占。</li>\n<li> 如果出现两条以上线程争用同一个锁，轻量级锁就不再有效，将膨胀为重量级锁，锁标志状态变为 10，此时Mark Word 存储的就是指向重量级锁的指针，后面等待锁的线程也必须阻塞。</li>\n</ul>\n<h3 id=\"简述锁优化策略\"><a href=\"#简述锁优化策略\" class=\"headerlink\" title=\"简述锁优化策略\"></a>简述锁优化策略</h3><p>即自适应自旋、锁消除、锁粗化、锁升级等策略偏。</p>\n<h3 id=\"简述Java的自旋锁\"><a href=\"#简述Java的自旋锁\" class=\"headerlink\" title=\"简述Java的自旋锁\"></a>简述Java的自旋锁</h3><p>线程获取锁失败后，可以采用这样的策略，可以不放弃 CPU ，不停的重试内重试，这种操作也称为自旋锁。</p>\n<h3 id=\"简述自适应自旋锁\"><a href=\"#简述自适应自旋锁\" class=\"headerlink\" title=\"简述自适应自旋锁\"></a>简述自适应自旋锁</h3><p>自适应自旋锁自旋次数不再人为设定，通常由前一次在同一个锁上的自旋时间及锁的拥有者的状态决定。</p>\n<h3 id=\"简述锁粗化\"><a href=\"#简述锁粗化\" class=\"headerlink\" title=\"简述锁粗化\"></a>简述锁粗化</h3><p>锁粗化的思想就是扩大加锁范围，避免反复的加锁和解锁。</p>\n<h3 id=\"简述锁消除\"><a href=\"#简述锁消除\" class=\"headerlink\" title=\"简述锁消除\"></a>简述锁消除</h3><p>锁消除是一种更为彻底的优化，在编译时，Java编译器对运行上下文进行扫描，去除不可能存在共享资源竞争的锁。</p>\n<h3 id=\"简述Lock与ReentrantLock\"><a href=\"#简述Lock与ReentrantLock\" class=\"headerlink\" title=\"简述Lock与ReentrantLock\"></a>简述Lock与ReentrantLock</h3><p>Lock接口是 Java并发包的顶层接口。</p>\n<p>可重入锁 ReentrantLock 是 Lock 最常见的实现，与 synchronized 一样可重入。ReentrantLock 在默认情况下是非公平的，可以通过构造方法指定公平锁。一旦使用了公平锁，性能会下降。</p>\n<h3 id=\"简述AQS\"><a href=\"#简述AQS\" class=\"headerlink\" title=\"简述AQS\"></a>简述AQS</h3><p>AQS（AbstractQuenedSynchronizer）抽象的队列式同步器。AQS是将每一条请求共享资源的线程封装成一个锁队列的一个结点（Node），来实现锁的分配。AQS是用来构建锁或其他同步组件的基础框架，它使用一个 volatile int state 变量作为共享资源，如果线程获取资源失败，则进入同步队列等待；如果获取成功就执行临界区代码，释放资源时会通知同步队列中的等待线程。</p>\n<p>子类通过继承同步器并实现它的抽象方法getState、setState 和 compareAndSetState对同步状态进行更改。</p>\n<p>AQS获取独占锁/释放独占锁原理：</p>\n<p>获取：（acquire）</p>\n<ul>\n<li> 调用 tryAcquire 方法安全地获取线程同步状态，获取失败的线程会被构造同步节点并通过 addWaiter 方法加入到同步队列的尾部，在队列中自旋。</li>\n<li> 调用 acquireQueued 方法使得该节点以死循环的方式获取同步状态，如果获取不到则阻塞。</li>\n</ul>\n<p>释放：（release）</p>\n<ul>\n<li> 调用 tryRelease 方法释放同步状态</li>\n<li> 调用 unparkSuccessor 方法唤醒头节点的后继节点，使后继节点重新尝试获取同步状态。</li>\n</ul>\n<p>AQS获取共享锁/释放共享锁原理</p>\n<p>获取锁（acquireShared）</p>\n<ul>\n<li> 调用 tryAcquireShared 方法尝试获取同步状态，返回值不小于 0 表示能获取同步状态。</li>\n<li> 释放（releaseShared），并唤醒后续处于等待状态的节点。</li>\n</ul>\n"},{"title":"Java虚拟机八股文","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-04T05:02:54.000Z","password":null,"summary":"程序计数器、Java 虚拟机栈、本地方法栈。","_content":"\n### 简述JVM内存模型 \n\n线程私有的运行时数据区: 程序计数器、Java 虚拟机栈、本地方法栈。\n\n线程共享的运行时数据区：Java 堆、方法区。\n\n### 简述程序计数器 \n\n程序计数器表示当前线程所执行的字节码的行号指示器。\n\n程序计数器不会产生StackOverflowError和OutOfMemoryError。\n\n### 简述虚拟机栈 \n\nJava 虚拟机栈用来描述 Java 方法执行的内存模型。线程创建时就会分配一个栈空间，线程结束后栈空间被回收。\n\n栈中元素用于支持虚拟机进行方法调用，每个方法在执行时都会创建一个栈帧存储方法的局部变量表、操作栈、动态链接和返回地址等信息。\n\n虚拟机栈会产生两类异常：\n\n *  StackOverflowError：线程请求的栈深度大于虚拟机允许的深度抛出。\n *  OutOfMemoryError：如果 JVM 栈容量可以动态扩展，虚拟机栈占用内存超出抛出。\n\n### 简述本地方法栈 \n\n本地方法栈与虚拟机栈作用相似，不同的是虚拟机栈为虚拟机执行 Java 方法服务，本地方法栈为本地方法服务。可以将虚拟机栈看作普通的java函数对应的内存模型，本地方法栈看作由native关键词修饰的函数对应的内存模型。\n\n本地方法栈会产生两类异常：\n\n *  StackOverflowError：线程请求的栈深度大于虚拟机允许的深度抛出。\n *  OutOfMemoryError：如果 JVM 栈容量可以动态扩展，虚拟机栈占用内存超出抛出。\n\n### 简述JVM中的堆 \n\n堆主要作用是存放对象实例，Java 里几乎所有对象实例都在堆上分配内存，堆也是内存管理中最大的一块。Java的垃圾回收主要就是针对堆这一区域进行。可通过 -Xms 和 -Xmx 设置堆的最小和最大容量。\n\n堆会抛出 OutOfMemoryError异常。\n\n### 简述方法区 \n\n方法区用于存储被虚拟机加载的类信息、常量、静态变量等数据。\n\nJDK6之前使用永久代实现方法区，容易内存溢出。JDK7 把放在永久代的字符串常量池、静态变量等移出，JDK8 中抛弃永久代，改用在本地内存中实现的元空间来实现方法区，把 JDK 7 中永久代内容移到元空间。\n\n方法区会抛出 OutOfMemoryError异常。\n\n### 简述运行时常量池 \n\n运行时常量池存放常量池表，用于存放编译器生成的各种字面量与符号引用。一般除了保存 Class 文件中描述的符号引用外，还会把符号引用翻译的直接引用也存储在运行时常量池。除此之外，也会存放字符串基本类型。\n\nJDK8之前，放在方法区，大小受限于方法区。JDK8将运行时常量池存放堆中。\n\n### 简述直接内存 \n\n直接内存也称为堆外内存，就是把内存对象分配在JVM堆外的内存区域。这部分内存不是虚拟机管理，而是由操作系统来管理。Java通过DriectByteBuffer对其进行操作，避免了在 Java 堆和 Native堆来回复制数据。\n\n### 简述Java创建对象的过程 \n\n *  检查该指令的参数能否在常量池中定位到一个类的符号引用，并检查引用代表的类是否已被加载、解析和初始化，如果没有就先执行类加载。\n *  通过检查通过后虚拟机将为新生对象分配内存。\n *  完成内存分配后虚拟机将成员变量设为零值\n *  设置对象头，包括哈希码、GC 信息、锁信息、对象所属类的类元信息等。\n *  执行 init 方法，初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。\n\n### 简述JVM给对象分配内存的策略 \n\n *  指针碰撞：这种方式在内存中放一个指针作为分界指示器将使用过的内存放在一边，空闲的放在另一边，通过指针挪动完成分配。\n *  空闲列表：对于 Java 堆内存不规整的情况，虚拟机必须维护一个列表记录哪些内存可用，在分配时从列表中找到一块足够大的空间划分给对象并更新列表记录。\n\n### Java对象内存分配是如何保证线程安全的 \n\n第一种方法，采用CAS机制，配合失败重试的方式保证更新操作的原子性。该方式效率低。\n\n第二种方法，每个线程在Java堆中预先分配一小块内存，然后再给对象分配内存的时候，直接在自己这块\"私有\"内存中分配。一般采用这种策略。\n\n### 简述对象的内存布局 \n\n对象在堆内存的存储布局可分为对象头、实例数据和对齐填充。\n\n1）对象头主要包含两部分数据：MarkWord、类型指针。\n\nMarkWord 用于存储哈希码（HashCode）、GC分代年龄、锁状态标志位、线程持有的锁、偏向线程ID等信息。\n\n类型指针即对象指向他的类元数据指针，如果对象是一个 Java 数组，会有一块用于记录数组长度的数据。\n\n2）实例数据存储代码中所定义的各种类型的字段信息。\n\n3）对齐填充起占位作用。HotSpot 虚拟机要求对象的起始地址必须是8的整数倍，因此需要对齐填充。\n\n### 如何判断对象是否是垃圾 \n\n1）引用计数法：\n\n设置引用计数器，对象被引用计数器加 1，引用失效时计数器减 1，如果计数器为 0 则被标记为垃圾。会存在对象间循环引用的问题，一般不使用这种方法。\n\n2）可达性分析：\n\n通过 GC Roots 的根对象作为起始节点，从这些节点开始，根据引用关系向下搜索，如果某个对象没有被搜到，则会被标记为垃圾。可作为 GC Roots 的对象包括虚拟机栈和本地方法栈中引用的对象、类静态属性引用的对象、常量引用的对象。\n\n### 简述java的引用类型 \n\n *  强引用：被强引用关联的对象不会被回收。一般采用 new 方法创建强引用。\n *  软引用：被软引用关联的对象只有在内存不够的情况下才会被回收。一般采用 SoftReference 类来创建软引用。\n *  弱引用：垃圾收集器碰到即回收，也就是说它只能存活到下一次垃圾回收发生之前。一般采用 WeakReference 类来创建弱引用。\n *  虚引用：无法通过该引用获取对象。唯一目的就是为了能在对象被回收时收到一个系统通知。虚引用必须与引用队列联合使用。\n\n### 简述标记清除算法、标记整理算法和标记复制算法 \n\n *  标记清除算法：先标记需清除的对象，之后统一回收。这种方法效率不高，会产生大量不连续的碎片。\n *  标记整理算法：先标记存活对象，然后让所有存活对象向一端移动，之后清理端边界以外的内存\n *  标记复制算法：将可用内存按容量划分为大小相等的两块，每次只使用其中一块。当使用的这块空间用完了，就将存活对象复制到另一块，再把已使用过的内存空间一次清理掉。\n\n### 简述分代收集算法 \n\n根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。\n\n一般将堆分为新生代和老年代，对这两块采用不同的算法。\n\n新生代使用：标记复制算法\n\n老年代使用：标记清除或者标记整理算法\n\n### 简述Serial垃圾收集器 \n\nSerial垃圾收集器是单线程串行收集器。垃圾回收的时候，必须暂停其他所有线程。新生代使用标记复制算法，老年代使用标记整理算法。简单高效。\n\n### 简述ParNew垃圾收集器 \n\nParNew垃圾收集器可以看作Serial垃圾收集器的多线程版本，新生代使用标记复制算法，老年代使用标记整理算法。\n\n### 简述Parallel Scavenge垃圾收集器 \n\n注重吞吐量，即 CPU运行代码时间/CPU耗时总时间（CPU运行代码时间+ 垃圾回收时间）。新生代使用标记复制算法，老年代使用标记整理算法。\n\n### 简述CMS垃圾收集器 \n\nCMS垃圾收集器注重最短时间停顿。CMS垃圾收集器为最早提出的并发收集器，垃圾收集线程与用户线程同时工作。采用标记清除算法。该收集器分为初始标记、并发标记、并发预清理、并发清除、并发重置这么几个步骤。\n\n *  初始标记：暂停其他线程(stop the world)，标记与GC roots直接关联的对象。\n *  并发标记：可达性分析过程(程序不会停顿)。\n *  并发预清理：查找执行并发标记阶段从年轻代晋升到老年代的对象，重新标记，暂停虚拟机（stop the world）扫描CMS堆中剩余对象。\n *  并发清除：清理垃圾对象，(程序不会停顿)。\n *  并发重置，重置CMS收集器的数据结构。\n\n### 简述G1垃圾收集器 \n\n和Serial、Parallel Scavenge、CMS不同，G1垃圾收集器把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。\n\n *  初始标记：标记与GC roots直接关联的对象。\n *  并发标记：可达性分析。\n *  最终标记：对并发标记过程中，用户线程修改的对象再次标记一下。\n *  筛选回收：对各个Region的回收价值和成本进行排序，然后根据用户所期望的GC停顿时间制定回收计划并回收。\n\n### 简述Minor GC \n\nMinor GC指发生在新生代的垃圾收集，因为 Java 对象大多存活时间短，所以 Minor GC 非常频繁，一般回收速度也比较快。\n\n### 简述Full GC \n\nFull GC 是清理整个堆空间—包括年轻代和永久代。调用System.gc(),老年代空间不足，空间分配担保失败，永生代空间不足会产生full gc。\n\n### 常见内存分配策略 \n\n大多数情况下对象在新生代 Eden 区分配，当 Eden 没有足够空间时将发起一次 Minor GC。\n\n大对象需要大量连续内存空间，直接进入老年代区分配。\n\n如果经历过第一次 Minor GC 仍然存活且能被 Survivor 容纳，该对象就会被移动到 Survivor 中并将年龄设置为 1，并且每熬过一次 Minor GC 年龄就加 1 ，当增加到一定程度（默认15）就会被晋升到老年代。\n\n如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 的一半，年龄不小于该年龄的对象就可以直接进入老年代。\n\nMinorGC 前，虚拟机必须检查老年代最大可用连续空间是否大于新生代对象总空间，如果满足则说明这次 Minor GC 确定安全。如果不，JVM会查看HandlePromotionFailure 参数是否允许担保失败，如果允许会继续检查老年代最大可用连续空间是否大于历次晋升老年代对象的平均大小，如果满足将Minor GC，否则改成一次 FullGC。\n\n### 简述JVM类加载过程 \n\n1）加载：\n\n *  通过全类名获取类的二进制字节流。\n *  将类的静态存储结构转化为方法区的运行时数据结构。\n *  在内存中生成类的Class对象，作为方法区数据的入口。\n\n2）验证：对文件格式，元数据，字节码，符号引用等验证正确性。\n\n3）准备：在方法区内为类变量分配内存并设置为0值。\n\n4）解析：将符号引用转化为直接引用。\n\n5）初始化：执行类构造器clinit方法，真正初始化。\n\n### 简述JVM中的类加载器 \n\n *  BootstrapClassLoader启动类加载器：加载/lib下的jar包和类。由C++编写。\n *  ExtensionClassLoader扩展类加载器：/lib/ext目录下的jar包和类。由Java编写。\n *  AppClassLoader应用类加载器，加载当前classPath下的jar包和类。由Java编写。\n\n### 简述双亲委派机制 \n\n一个类加载器收到类加载请求之后，首先判断当前类是否被加载过。已经被加载的类会直接返回，如果没有被加载，首先将类加载请求转发给父类加载器，一直转发到启动类加载器，只有当父类加载器无法完成时才尝试自己加载。\n\n加载类顺序：BootstrapClassLoader->ExtensionClassLoader->AppClassLoader->CustomClassLoader 检查类是否加载顺序：CustomClassLoader->AppClassLoader->ExtensionClassLoader->BootstrapClassLoader\n\n### 双亲委派机制的优点 \n\n *  避免类的重复加载。相同的类被不同的类加载器加载会产生不同的类，双亲委派保证了Java程序的稳定运行。\n *  保证核心API不被修改。\n *  如何破坏双亲委派机制\n *  重载loadClass()方法，即自定义类加载器。\n\n### 如何构建自定义类加载器 \n\n新建自定义类继承自java.lang.ClassLoader，重写findClass、loadClass、defineClass方法\n\n### JVM常见调优参数 \n\n *  \\-Xms 初始堆大小\n *  \\-Xmx 最大堆大小\n *  \\-XX:NewSize 年轻代大小\n *  \\-XX:MaxNewSize 年轻代最大值\n *  \\-XX:PermSize 永生代初始值\n *  \\-XX:MaxPermSize 永生代最大值\n *  \\-XX:NewRatio 新生代与老年代的比例","source":"_posts/Java虚拟机八股文.md","raw":"---\ntitle: Java虚拟机八股文\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-04 13:02:54\npassword:\nsummary: 程序计数器、Java 虚拟机栈、本地方法栈。\ntags:\n    - 虚拟机\ncategories:\n    - java\n---\n\n### 简述JVM内存模型 \n\n线程私有的运行时数据区: 程序计数器、Java 虚拟机栈、本地方法栈。\n\n线程共享的运行时数据区：Java 堆、方法区。\n\n### 简述程序计数器 \n\n程序计数器表示当前线程所执行的字节码的行号指示器。\n\n程序计数器不会产生StackOverflowError和OutOfMemoryError。\n\n### 简述虚拟机栈 \n\nJava 虚拟机栈用来描述 Java 方法执行的内存模型。线程创建时就会分配一个栈空间，线程结束后栈空间被回收。\n\n栈中元素用于支持虚拟机进行方法调用，每个方法在执行时都会创建一个栈帧存储方法的局部变量表、操作栈、动态链接和返回地址等信息。\n\n虚拟机栈会产生两类异常：\n\n *  StackOverflowError：线程请求的栈深度大于虚拟机允许的深度抛出。\n *  OutOfMemoryError：如果 JVM 栈容量可以动态扩展，虚拟机栈占用内存超出抛出。\n\n### 简述本地方法栈 \n\n本地方法栈与虚拟机栈作用相似，不同的是虚拟机栈为虚拟机执行 Java 方法服务，本地方法栈为本地方法服务。可以将虚拟机栈看作普通的java函数对应的内存模型，本地方法栈看作由native关键词修饰的函数对应的内存模型。\n\n本地方法栈会产生两类异常：\n\n *  StackOverflowError：线程请求的栈深度大于虚拟机允许的深度抛出。\n *  OutOfMemoryError：如果 JVM 栈容量可以动态扩展，虚拟机栈占用内存超出抛出。\n\n### 简述JVM中的堆 \n\n堆主要作用是存放对象实例，Java 里几乎所有对象实例都在堆上分配内存，堆也是内存管理中最大的一块。Java的垃圾回收主要就是针对堆这一区域进行。可通过 -Xms 和 -Xmx 设置堆的最小和最大容量。\n\n堆会抛出 OutOfMemoryError异常。\n\n### 简述方法区 \n\n方法区用于存储被虚拟机加载的类信息、常量、静态变量等数据。\n\nJDK6之前使用永久代实现方法区，容易内存溢出。JDK7 把放在永久代的字符串常量池、静态变量等移出，JDK8 中抛弃永久代，改用在本地内存中实现的元空间来实现方法区，把 JDK 7 中永久代内容移到元空间。\n\n方法区会抛出 OutOfMemoryError异常。\n\n### 简述运行时常量池 \n\n运行时常量池存放常量池表，用于存放编译器生成的各种字面量与符号引用。一般除了保存 Class 文件中描述的符号引用外，还会把符号引用翻译的直接引用也存储在运行时常量池。除此之外，也会存放字符串基本类型。\n\nJDK8之前，放在方法区，大小受限于方法区。JDK8将运行时常量池存放堆中。\n\n### 简述直接内存 \n\n直接内存也称为堆外内存，就是把内存对象分配在JVM堆外的内存区域。这部分内存不是虚拟机管理，而是由操作系统来管理。Java通过DriectByteBuffer对其进行操作，避免了在 Java 堆和 Native堆来回复制数据。\n\n### 简述Java创建对象的过程 \n\n *  检查该指令的参数能否在常量池中定位到一个类的符号引用，并检查引用代表的类是否已被加载、解析和初始化，如果没有就先执行类加载。\n *  通过检查通过后虚拟机将为新生对象分配内存。\n *  完成内存分配后虚拟机将成员变量设为零值\n *  设置对象头，包括哈希码、GC 信息、锁信息、对象所属类的类元信息等。\n *  执行 init 方法，初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。\n\n### 简述JVM给对象分配内存的策略 \n\n *  指针碰撞：这种方式在内存中放一个指针作为分界指示器将使用过的内存放在一边，空闲的放在另一边，通过指针挪动完成分配。\n *  空闲列表：对于 Java 堆内存不规整的情况，虚拟机必须维护一个列表记录哪些内存可用，在分配时从列表中找到一块足够大的空间划分给对象并更新列表记录。\n\n### Java对象内存分配是如何保证线程安全的 \n\n第一种方法，采用CAS机制，配合失败重试的方式保证更新操作的原子性。该方式效率低。\n\n第二种方法，每个线程在Java堆中预先分配一小块内存，然后再给对象分配内存的时候，直接在自己这块\"私有\"内存中分配。一般采用这种策略。\n\n### 简述对象的内存布局 \n\n对象在堆内存的存储布局可分为对象头、实例数据和对齐填充。\n\n1）对象头主要包含两部分数据：MarkWord、类型指针。\n\nMarkWord 用于存储哈希码（HashCode）、GC分代年龄、锁状态标志位、线程持有的锁、偏向线程ID等信息。\n\n类型指针即对象指向他的类元数据指针，如果对象是一个 Java 数组，会有一块用于记录数组长度的数据。\n\n2）实例数据存储代码中所定义的各种类型的字段信息。\n\n3）对齐填充起占位作用。HotSpot 虚拟机要求对象的起始地址必须是8的整数倍，因此需要对齐填充。\n\n### 如何判断对象是否是垃圾 \n\n1）引用计数法：\n\n设置引用计数器，对象被引用计数器加 1，引用失效时计数器减 1，如果计数器为 0 则被标记为垃圾。会存在对象间循环引用的问题，一般不使用这种方法。\n\n2）可达性分析：\n\n通过 GC Roots 的根对象作为起始节点，从这些节点开始，根据引用关系向下搜索，如果某个对象没有被搜到，则会被标记为垃圾。可作为 GC Roots 的对象包括虚拟机栈和本地方法栈中引用的对象、类静态属性引用的对象、常量引用的对象。\n\n### 简述java的引用类型 \n\n *  强引用：被强引用关联的对象不会被回收。一般采用 new 方法创建强引用。\n *  软引用：被软引用关联的对象只有在内存不够的情况下才会被回收。一般采用 SoftReference 类来创建软引用。\n *  弱引用：垃圾收集器碰到即回收，也就是说它只能存活到下一次垃圾回收发生之前。一般采用 WeakReference 类来创建弱引用。\n *  虚引用：无法通过该引用获取对象。唯一目的就是为了能在对象被回收时收到一个系统通知。虚引用必须与引用队列联合使用。\n\n### 简述标记清除算法、标记整理算法和标记复制算法 \n\n *  标记清除算法：先标记需清除的对象，之后统一回收。这种方法效率不高，会产生大量不连续的碎片。\n *  标记整理算法：先标记存活对象，然后让所有存活对象向一端移动，之后清理端边界以外的内存\n *  标记复制算法：将可用内存按容量划分为大小相等的两块，每次只使用其中一块。当使用的这块空间用完了，就将存活对象复制到另一块，再把已使用过的内存空间一次清理掉。\n\n### 简述分代收集算法 \n\n根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。\n\n一般将堆分为新生代和老年代，对这两块采用不同的算法。\n\n新生代使用：标记复制算法\n\n老年代使用：标记清除或者标记整理算法\n\n### 简述Serial垃圾收集器 \n\nSerial垃圾收集器是单线程串行收集器。垃圾回收的时候，必须暂停其他所有线程。新生代使用标记复制算法，老年代使用标记整理算法。简单高效。\n\n### 简述ParNew垃圾收集器 \n\nParNew垃圾收集器可以看作Serial垃圾收集器的多线程版本，新生代使用标记复制算法，老年代使用标记整理算法。\n\n### 简述Parallel Scavenge垃圾收集器 \n\n注重吞吐量，即 CPU运行代码时间/CPU耗时总时间（CPU运行代码时间+ 垃圾回收时间）。新生代使用标记复制算法，老年代使用标记整理算法。\n\n### 简述CMS垃圾收集器 \n\nCMS垃圾收集器注重最短时间停顿。CMS垃圾收集器为最早提出的并发收集器，垃圾收集线程与用户线程同时工作。采用标记清除算法。该收集器分为初始标记、并发标记、并发预清理、并发清除、并发重置这么几个步骤。\n\n *  初始标记：暂停其他线程(stop the world)，标记与GC roots直接关联的对象。\n *  并发标记：可达性分析过程(程序不会停顿)。\n *  并发预清理：查找执行并发标记阶段从年轻代晋升到老年代的对象，重新标记，暂停虚拟机（stop the world）扫描CMS堆中剩余对象。\n *  并发清除：清理垃圾对象，(程序不会停顿)。\n *  并发重置，重置CMS收集器的数据结构。\n\n### 简述G1垃圾收集器 \n\n和Serial、Parallel Scavenge、CMS不同，G1垃圾收集器把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。\n\n *  初始标记：标记与GC roots直接关联的对象。\n *  并发标记：可达性分析。\n *  最终标记：对并发标记过程中，用户线程修改的对象再次标记一下。\n *  筛选回收：对各个Region的回收价值和成本进行排序，然后根据用户所期望的GC停顿时间制定回收计划并回收。\n\n### 简述Minor GC \n\nMinor GC指发生在新生代的垃圾收集，因为 Java 对象大多存活时间短，所以 Minor GC 非常频繁，一般回收速度也比较快。\n\n### 简述Full GC \n\nFull GC 是清理整个堆空间—包括年轻代和永久代。调用System.gc(),老年代空间不足，空间分配担保失败，永生代空间不足会产生full gc。\n\n### 常见内存分配策略 \n\n大多数情况下对象在新生代 Eden 区分配，当 Eden 没有足够空间时将发起一次 Minor GC。\n\n大对象需要大量连续内存空间，直接进入老年代区分配。\n\n如果经历过第一次 Minor GC 仍然存活且能被 Survivor 容纳，该对象就会被移动到 Survivor 中并将年龄设置为 1，并且每熬过一次 Minor GC 年龄就加 1 ，当增加到一定程度（默认15）就会被晋升到老年代。\n\n如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 的一半，年龄不小于该年龄的对象就可以直接进入老年代。\n\nMinorGC 前，虚拟机必须检查老年代最大可用连续空间是否大于新生代对象总空间，如果满足则说明这次 Minor GC 确定安全。如果不，JVM会查看HandlePromotionFailure 参数是否允许担保失败，如果允许会继续检查老年代最大可用连续空间是否大于历次晋升老年代对象的平均大小，如果满足将Minor GC，否则改成一次 FullGC。\n\n### 简述JVM类加载过程 \n\n1）加载：\n\n *  通过全类名获取类的二进制字节流。\n *  将类的静态存储结构转化为方法区的运行时数据结构。\n *  在内存中生成类的Class对象，作为方法区数据的入口。\n\n2）验证：对文件格式，元数据，字节码，符号引用等验证正确性。\n\n3）准备：在方法区内为类变量分配内存并设置为0值。\n\n4）解析：将符号引用转化为直接引用。\n\n5）初始化：执行类构造器clinit方法，真正初始化。\n\n### 简述JVM中的类加载器 \n\n *  BootstrapClassLoader启动类加载器：加载/lib下的jar包和类。由C++编写。\n *  ExtensionClassLoader扩展类加载器：/lib/ext目录下的jar包和类。由Java编写。\n *  AppClassLoader应用类加载器，加载当前classPath下的jar包和类。由Java编写。\n\n### 简述双亲委派机制 \n\n一个类加载器收到类加载请求之后，首先判断当前类是否被加载过。已经被加载的类会直接返回，如果没有被加载，首先将类加载请求转发给父类加载器，一直转发到启动类加载器，只有当父类加载器无法完成时才尝试自己加载。\n\n加载类顺序：BootstrapClassLoader->ExtensionClassLoader->AppClassLoader->CustomClassLoader 检查类是否加载顺序：CustomClassLoader->AppClassLoader->ExtensionClassLoader->BootstrapClassLoader\n\n### 双亲委派机制的优点 \n\n *  避免类的重复加载。相同的类被不同的类加载器加载会产生不同的类，双亲委派保证了Java程序的稳定运行。\n *  保证核心API不被修改。\n *  如何破坏双亲委派机制\n *  重载loadClass()方法，即自定义类加载器。\n\n### 如何构建自定义类加载器 \n\n新建自定义类继承自java.lang.ClassLoader，重写findClass、loadClass、defineClass方法\n\n### JVM常见调优参数 \n\n *  \\-Xms 初始堆大小\n *  \\-Xmx 最大堆大小\n *  \\-XX:NewSize 年轻代大小\n *  \\-XX:MaxNewSize 年轻代最大值\n *  \\-XX:PermSize 永生代初始值\n *  \\-XX:MaxPermSize 永生代最大值\n *  \\-XX:NewRatio 新生代与老年代的比例","slug":"Java虚拟机八股文","published":1,"updated":"2022-11-04T05:13:23.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla21kmz0000301ldgbif4r8y","content":"<h3 id=\"简述JVM内存模型\"><a href=\"#简述JVM内存模型\" class=\"headerlink\" title=\"简述JVM内存模型\"></a>简述JVM内存模型</h3><p>线程私有的运行时数据区: 程序计数器、Java 虚拟机栈、本地方法栈。</p>\n<p>线程共享的运行时数据区：Java 堆、方法区。</p>\n<h3 id=\"简述程序计数器\"><a href=\"#简述程序计数器\" class=\"headerlink\" title=\"简述程序计数器\"></a>简述程序计数器</h3><p>程序计数器表示当前线程所执行的字节码的行号指示器。</p>\n<p>程序计数器不会产生StackOverflowError和OutOfMemoryError。</p>\n<h3 id=\"简述虚拟机栈\"><a href=\"#简述虚拟机栈\" class=\"headerlink\" title=\"简述虚拟机栈\"></a>简述虚拟机栈</h3><p>Java 虚拟机栈用来描述 Java 方法执行的内存模型。线程创建时就会分配一个栈空间，线程结束后栈空间被回收。</p>\n<p>栈中元素用于支持虚拟机进行方法调用，每个方法在执行时都会创建一个栈帧存储方法的局部变量表、操作栈、动态链接和返回地址等信息。</p>\n<p>虚拟机栈会产生两类异常：</p>\n<ul>\n<li> StackOverflowError：线程请求的栈深度大于虚拟机允许的深度抛出。</li>\n<li> OutOfMemoryError：如果 JVM 栈容量可以动态扩展，虚拟机栈占用内存超出抛出。</li>\n</ul>\n<h3 id=\"简述本地方法栈\"><a href=\"#简述本地方法栈\" class=\"headerlink\" title=\"简述本地方法栈\"></a>简述本地方法栈</h3><p>本地方法栈与虚拟机栈作用相似，不同的是虚拟机栈为虚拟机执行 Java 方法服务，本地方法栈为本地方法服务。可以将虚拟机栈看作普通的java函数对应的内存模型，本地方法栈看作由native关键词修饰的函数对应的内存模型。</p>\n<p>本地方法栈会产生两类异常：</p>\n<ul>\n<li> StackOverflowError：线程请求的栈深度大于虚拟机允许的深度抛出。</li>\n<li> OutOfMemoryError：如果 JVM 栈容量可以动态扩展，虚拟机栈占用内存超出抛出。</li>\n</ul>\n<h3 id=\"简述JVM中的堆\"><a href=\"#简述JVM中的堆\" class=\"headerlink\" title=\"简述JVM中的堆\"></a>简述JVM中的堆</h3><p>堆主要作用是存放对象实例，Java 里几乎所有对象实例都在堆上分配内存，堆也是内存管理中最大的一块。Java的垃圾回收主要就是针对堆这一区域进行。可通过 -Xms 和 -Xmx 设置堆的最小和最大容量。</p>\n<p>堆会抛出 OutOfMemoryError异常。</p>\n<h3 id=\"简述方法区\"><a href=\"#简述方法区\" class=\"headerlink\" title=\"简述方法区\"></a>简述方法区</h3><p>方法区用于存储被虚拟机加载的类信息、常量、静态变量等数据。</p>\n<p>JDK6之前使用永久代实现方法区，容易内存溢出。JDK7 把放在永久代的字符串常量池、静态变量等移出，JDK8 中抛弃永久代，改用在本地内存中实现的元空间来实现方法区，把 JDK 7 中永久代内容移到元空间。</p>\n<p>方法区会抛出 OutOfMemoryError异常。</p>\n<h3 id=\"简述运行时常量池\"><a href=\"#简述运行时常量池\" class=\"headerlink\" title=\"简述运行时常量池\"></a>简述运行时常量池</h3><p>运行时常量池存放常量池表，用于存放编译器生成的各种字面量与符号引用。一般除了保存 Class 文件中描述的符号引用外，还会把符号引用翻译的直接引用也存储在运行时常量池。除此之外，也会存放字符串基本类型。</p>\n<p>JDK8之前，放在方法区，大小受限于方法区。JDK8将运行时常量池存放堆中。</p>\n<h3 id=\"简述直接内存\"><a href=\"#简述直接内存\" class=\"headerlink\" title=\"简述直接内存\"></a>简述直接内存</h3><p>直接内存也称为堆外内存，就是把内存对象分配在JVM堆外的内存区域。这部分内存不是虚拟机管理，而是由操作系统来管理。Java通过DriectByteBuffer对其进行操作，避免了在 Java 堆和 Native堆来回复制数据。</p>\n<h3 id=\"简述Java创建对象的过程\"><a href=\"#简述Java创建对象的过程\" class=\"headerlink\" title=\"简述Java创建对象的过程\"></a>简述Java创建对象的过程</h3><ul>\n<li> 检查该指令的参数能否在常量池中定位到一个类的符号引用，并检查引用代表的类是否已被加载、解析和初始化，如果没有就先执行类加载。</li>\n<li> 通过检查通过后虚拟机将为新生对象分配内存。</li>\n<li> 完成内存分配后虚拟机将成员变量设为零值</li>\n<li> 设置对象头，包括哈希码、GC 信息、锁信息、对象所属类的类元信息等。</li>\n<li> 执行 init 方法，初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。</li>\n</ul>\n<h3 id=\"简述JVM给对象分配内存的策略\"><a href=\"#简述JVM给对象分配内存的策略\" class=\"headerlink\" title=\"简述JVM给对象分配内存的策略\"></a>简述JVM给对象分配内存的策略</h3><ul>\n<li> 指针碰撞：这种方式在内存中放一个指针作为分界指示器将使用过的内存放在一边，空闲的放在另一边，通过指针挪动完成分配。</li>\n<li> 空闲列表：对于 Java 堆内存不规整的情况，虚拟机必须维护一个列表记录哪些内存可用，在分配时从列表中找到一块足够大的空间划分给对象并更新列表记录。</li>\n</ul>\n<h3 id=\"Java对象内存分配是如何保证线程安全的\"><a href=\"#Java对象内存分配是如何保证线程安全的\" class=\"headerlink\" title=\"Java对象内存分配是如何保证线程安全的\"></a>Java对象内存分配是如何保证线程安全的</h3><p>第一种方法，采用CAS机制，配合失败重试的方式保证更新操作的原子性。该方式效率低。</p>\n<p>第二种方法，每个线程在Java堆中预先分配一小块内存，然后再给对象分配内存的时候，直接在自己这块”私有”内存中分配。一般采用这种策略。</p>\n<h3 id=\"简述对象的内存布局\"><a href=\"#简述对象的内存布局\" class=\"headerlink\" title=\"简述对象的内存布局\"></a>简述对象的内存布局</h3><p>对象在堆内存的存储布局可分为对象头、实例数据和对齐填充。</p>\n<p>1）对象头主要包含两部分数据：MarkWord、类型指针。</p>\n<p>MarkWord 用于存储哈希码（HashCode）、GC分代年龄、锁状态标志位、线程持有的锁、偏向线程ID等信息。</p>\n<p>类型指针即对象指向他的类元数据指针，如果对象是一个 Java 数组，会有一块用于记录数组长度的数据。</p>\n<p>2）实例数据存储代码中所定义的各种类型的字段信息。</p>\n<p>3）对齐填充起占位作用。HotSpot 虚拟机要求对象的起始地址必须是8的整数倍，因此需要对齐填充。</p>\n<h3 id=\"如何判断对象是否是垃圾\"><a href=\"#如何判断对象是否是垃圾\" class=\"headerlink\" title=\"如何判断对象是否是垃圾\"></a>如何判断对象是否是垃圾</h3><p>1）引用计数法：</p>\n<p>设置引用计数器，对象被引用计数器加 1，引用失效时计数器减 1，如果计数器为 0 则被标记为垃圾。会存在对象间循环引用的问题，一般不使用这种方法。</p>\n<p>2）可达性分析：</p>\n<p>通过 GC Roots 的根对象作为起始节点，从这些节点开始，根据引用关系向下搜索，如果某个对象没有被搜到，则会被标记为垃圾。可作为 GC Roots 的对象包括虚拟机栈和本地方法栈中引用的对象、类静态属性引用的对象、常量引用的对象。</p>\n<h3 id=\"简述java的引用类型\"><a href=\"#简述java的引用类型\" class=\"headerlink\" title=\"简述java的引用类型\"></a>简述java的引用类型</h3><ul>\n<li> 强引用：被强引用关联的对象不会被回收。一般采用 new 方法创建强引用。</li>\n<li> 软引用：被软引用关联的对象只有在内存不够的情况下才会被回收。一般采用 SoftReference 类来创建软引用。</li>\n<li> 弱引用：垃圾收集器碰到即回收，也就是说它只能存活到下一次垃圾回收发生之前。一般采用 WeakReference 类来创建弱引用。</li>\n<li> 虚引用：无法通过该引用获取对象。唯一目的就是为了能在对象被回收时收到一个系统通知。虚引用必须与引用队列联合使用。</li>\n</ul>\n<h3 id=\"简述标记清除算法、标记整理算法和标记复制算法\"><a href=\"#简述标记清除算法、标记整理算法和标记复制算法\" class=\"headerlink\" title=\"简述标记清除算法、标记整理算法和标记复制算法\"></a>简述标记清除算法、标记整理算法和标记复制算法</h3><ul>\n<li> 标记清除算法：先标记需清除的对象，之后统一回收。这种方法效率不高，会产生大量不连续的碎片。</li>\n<li> 标记整理算法：先标记存活对象，然后让所有存活对象向一端移动，之后清理端边界以外的内存</li>\n<li> 标记复制算法：将可用内存按容量划分为大小相等的两块，每次只使用其中一块。当使用的这块空间用完了，就将存活对象复制到另一块，再把已使用过的内存空间一次清理掉。</li>\n</ul>\n<h3 id=\"简述分代收集算法\"><a href=\"#简述分代收集算法\" class=\"headerlink\" title=\"简述分代收集算法\"></a>简述分代收集算法</h3><p>根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p>\n<p>一般将堆分为新生代和老年代，对这两块采用不同的算法。</p>\n<p>新生代使用：标记复制算法</p>\n<p>老年代使用：标记清除或者标记整理算法</p>\n<h3 id=\"简述Serial垃圾收集器\"><a href=\"#简述Serial垃圾收集器\" class=\"headerlink\" title=\"简述Serial垃圾收集器\"></a>简述Serial垃圾收集器</h3><p>Serial垃圾收集器是单线程串行收集器。垃圾回收的时候，必须暂停其他所有线程。新生代使用标记复制算法，老年代使用标记整理算法。简单高效。</p>\n<h3 id=\"简述ParNew垃圾收集器\"><a href=\"#简述ParNew垃圾收集器\" class=\"headerlink\" title=\"简述ParNew垃圾收集器\"></a>简述ParNew垃圾收集器</h3><p>ParNew垃圾收集器可以看作Serial垃圾收集器的多线程版本，新生代使用标记复制算法，老年代使用标记整理算法。</p>\n<h3 id=\"简述Parallel-Scavenge垃圾收集器\"><a href=\"#简述Parallel-Scavenge垃圾收集器\" class=\"headerlink\" title=\"简述Parallel Scavenge垃圾收集器\"></a>简述Parallel Scavenge垃圾收集器</h3><p>注重吞吐量，即 CPU运行代码时间/CPU耗时总时间（CPU运行代码时间+ 垃圾回收时间）。新生代使用标记复制算法，老年代使用标记整理算法。</p>\n<h3 id=\"简述CMS垃圾收集器\"><a href=\"#简述CMS垃圾收集器\" class=\"headerlink\" title=\"简述CMS垃圾收集器\"></a>简述CMS垃圾收集器</h3><p>CMS垃圾收集器注重最短时间停顿。CMS垃圾收集器为最早提出的并发收集器，垃圾收集线程与用户线程同时工作。采用标记清除算法。该收集器分为初始标记、并发标记、并发预清理、并发清除、并发重置这么几个步骤。</p>\n<ul>\n<li> 初始标记：暂停其他线程(stop the world)，标记与GC roots直接关联的对象。</li>\n<li> 并发标记：可达性分析过程(程序不会停顿)。</li>\n<li> 并发预清理：查找执行并发标记阶段从年轻代晋升到老年代的对象，重新标记，暂停虚拟机（stop the world）扫描CMS堆中剩余对象。</li>\n<li> 并发清除：清理垃圾对象，(程序不会停顿)。</li>\n<li> 并发重置，重置CMS收集器的数据结构。</li>\n</ul>\n<h3 id=\"简述G1垃圾收集器\"><a href=\"#简述G1垃圾收集器\" class=\"headerlink\" title=\"简述G1垃圾收集器\"></a>简述G1垃圾收集器</h3><p>和Serial、Parallel Scavenge、CMS不同，G1垃圾收集器把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。</p>\n<ul>\n<li> 初始标记：标记与GC roots直接关联的对象。</li>\n<li> 并发标记：可达性分析。</li>\n<li> 最终标记：对并发标记过程中，用户线程修改的对象再次标记一下。</li>\n<li> 筛选回收：对各个Region的回收价值和成本进行排序，然后根据用户所期望的GC停顿时间制定回收计划并回收。</li>\n</ul>\n<h3 id=\"简述Minor-GC\"><a href=\"#简述Minor-GC\" class=\"headerlink\" title=\"简述Minor GC\"></a>简述Minor GC</h3><p>Minor GC指发生在新生代的垃圾收集，因为 Java 对象大多存活时间短，所以 Minor GC 非常频繁，一般回收速度也比较快。</p>\n<h3 id=\"简述Full-GC\"><a href=\"#简述Full-GC\" class=\"headerlink\" title=\"简述Full GC\"></a>简述Full GC</h3><p>Full GC 是清理整个堆空间—包括年轻代和永久代。调用System.gc(),老年代空间不足，空间分配担保失败，永生代空间不足会产生full gc。</p>\n<h3 id=\"常见内存分配策略\"><a href=\"#常见内存分配策略\" class=\"headerlink\" title=\"常见内存分配策略\"></a>常见内存分配策略</h3><p>大多数情况下对象在新生代 Eden 区分配，当 Eden 没有足够空间时将发起一次 Minor GC。</p>\n<p>大对象需要大量连续内存空间，直接进入老年代区分配。</p>\n<p>如果经历过第一次 Minor GC 仍然存活且能被 Survivor 容纳，该对象就会被移动到 Survivor 中并将年龄设置为 1，并且每熬过一次 Minor GC 年龄就加 1 ，当增加到一定程度（默认15）就会被晋升到老年代。</p>\n<p>如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 的一半，年龄不小于该年龄的对象就可以直接进入老年代。</p>\n<p>MinorGC 前，虚拟机必须检查老年代最大可用连续空间是否大于新生代对象总空间，如果满足则说明这次 Minor GC 确定安全。如果不，JVM会查看HandlePromotionFailure 参数是否允许担保失败，如果允许会继续检查老年代最大可用连续空间是否大于历次晋升老年代对象的平均大小，如果满足将Minor GC，否则改成一次 FullGC。</p>\n<h3 id=\"简述JVM类加载过程\"><a href=\"#简述JVM类加载过程\" class=\"headerlink\" title=\"简述JVM类加载过程\"></a>简述JVM类加载过程</h3><p>1）加载：</p>\n<ul>\n<li> 通过全类名获取类的二进制字节流。</li>\n<li> 将类的静态存储结构转化为方法区的运行时数据结构。</li>\n<li> 在内存中生成类的Class对象，作为方法区数据的入口。</li>\n</ul>\n<p>2）验证：对文件格式，元数据，字节码，符号引用等验证正确性。</p>\n<p>3）准备：在方法区内为类变量分配内存并设置为0值。</p>\n<p>4）解析：将符号引用转化为直接引用。</p>\n<p>5）初始化：执行类构造器clinit方法，真正初始化。</p>\n<h3 id=\"简述JVM中的类加载器\"><a href=\"#简述JVM中的类加载器\" class=\"headerlink\" title=\"简述JVM中的类加载器\"></a>简述JVM中的类加载器</h3><ul>\n<li> BootstrapClassLoader启动类加载器：加载/lib下的jar包和类。由C++编写。</li>\n<li> ExtensionClassLoader扩展类加载器：/lib/ext目录下的jar包和类。由Java编写。</li>\n<li> AppClassLoader应用类加载器，加载当前classPath下的jar包和类。由Java编写。</li>\n</ul>\n<h3 id=\"简述双亲委派机制\"><a href=\"#简述双亲委派机制\" class=\"headerlink\" title=\"简述双亲委派机制\"></a>简述双亲委派机制</h3><p>一个类加载器收到类加载请求之后，首先判断当前类是否被加载过。已经被加载的类会直接返回，如果没有被加载，首先将类加载请求转发给父类加载器，一直转发到启动类加载器，只有当父类加载器无法完成时才尝试自己加载。</p>\n<p>加载类顺序：BootstrapClassLoader-&gt;ExtensionClassLoader-&gt;AppClassLoader-&gt;CustomClassLoader 检查类是否加载顺序：CustomClassLoader-&gt;AppClassLoader-&gt;ExtensionClassLoader-&gt;BootstrapClassLoader</p>\n<h3 id=\"双亲委派机制的优点\"><a href=\"#双亲委派机制的优点\" class=\"headerlink\" title=\"双亲委派机制的优点\"></a>双亲委派机制的优点</h3><ul>\n<li> 避免类的重复加载。相同的类被不同的类加载器加载会产生不同的类，双亲委派保证了Java程序的稳定运行。</li>\n<li> 保证核心API不被修改。</li>\n<li> 如何破坏双亲委派机制</li>\n<li> 重载loadClass()方法，即自定义类加载器。</li>\n</ul>\n<h3 id=\"如何构建自定义类加载器\"><a href=\"#如何构建自定义类加载器\" class=\"headerlink\" title=\"如何构建自定义类加载器\"></a>如何构建自定义类加载器</h3><p>新建自定义类继承自java.lang.ClassLoader，重写findClass、loadClass、defineClass方法</p>\n<h3 id=\"JVM常见调优参数\"><a href=\"#JVM常见调优参数\" class=\"headerlink\" title=\"JVM常见调优参数\"></a>JVM常见调优参数</h3><ul>\n<li> -Xms 初始堆大小</li>\n<li> -Xmx 最大堆大小</li>\n<li> -XX:NewSize 年轻代大小</li>\n<li> -XX:MaxNewSize 年轻代最大值</li>\n<li> -XX:PermSize 永生代初始值</li>\n<li> -XX:MaxPermSize 永生代最大值</li>\n<li> -XX:NewRatio 新生代与老年代的比例</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h3 id=\"简述JVM内存模型\"><a href=\"#简述JVM内存模型\" class=\"headerlink\" title=\"简述JVM内存模型\"></a>简述JVM内存模型</h3><p>线程私有的运行时数据区: 程序计数器、Java 虚拟机栈、本地方法栈。</p>\n<p>线程共享的运行时数据区：Java 堆、方法区。</p>\n<h3 id=\"简述程序计数器\"><a href=\"#简述程序计数器\" class=\"headerlink\" title=\"简述程序计数器\"></a>简述程序计数器</h3><p>程序计数器表示当前线程所执行的字节码的行号指示器。</p>\n<p>程序计数器不会产生StackOverflowError和OutOfMemoryError。</p>\n<h3 id=\"简述虚拟机栈\"><a href=\"#简述虚拟机栈\" class=\"headerlink\" title=\"简述虚拟机栈\"></a>简述虚拟机栈</h3><p>Java 虚拟机栈用来描述 Java 方法执行的内存模型。线程创建时就会分配一个栈空间，线程结束后栈空间被回收。</p>\n<p>栈中元素用于支持虚拟机进行方法调用，每个方法在执行时都会创建一个栈帧存储方法的局部变量表、操作栈、动态链接和返回地址等信息。</p>\n<p>虚拟机栈会产生两类异常：</p>\n<ul>\n<li> StackOverflowError：线程请求的栈深度大于虚拟机允许的深度抛出。</li>\n<li> OutOfMemoryError：如果 JVM 栈容量可以动态扩展，虚拟机栈占用内存超出抛出。</li>\n</ul>\n<h3 id=\"简述本地方法栈\"><a href=\"#简述本地方法栈\" class=\"headerlink\" title=\"简述本地方法栈\"></a>简述本地方法栈</h3><p>本地方法栈与虚拟机栈作用相似，不同的是虚拟机栈为虚拟机执行 Java 方法服务，本地方法栈为本地方法服务。可以将虚拟机栈看作普通的java函数对应的内存模型，本地方法栈看作由native关键词修饰的函数对应的内存模型。</p>\n<p>本地方法栈会产生两类异常：</p>\n<ul>\n<li> StackOverflowError：线程请求的栈深度大于虚拟机允许的深度抛出。</li>\n<li> OutOfMemoryError：如果 JVM 栈容量可以动态扩展，虚拟机栈占用内存超出抛出。</li>\n</ul>\n<h3 id=\"简述JVM中的堆\"><a href=\"#简述JVM中的堆\" class=\"headerlink\" title=\"简述JVM中的堆\"></a>简述JVM中的堆</h3><p>堆主要作用是存放对象实例，Java 里几乎所有对象实例都在堆上分配内存，堆也是内存管理中最大的一块。Java的垃圾回收主要就是针对堆这一区域进行。可通过 -Xms 和 -Xmx 设置堆的最小和最大容量。</p>\n<p>堆会抛出 OutOfMemoryError异常。</p>\n<h3 id=\"简述方法区\"><a href=\"#简述方法区\" class=\"headerlink\" title=\"简述方法区\"></a>简述方法区</h3><p>方法区用于存储被虚拟机加载的类信息、常量、静态变量等数据。</p>\n<p>JDK6之前使用永久代实现方法区，容易内存溢出。JDK7 把放在永久代的字符串常量池、静态变量等移出，JDK8 中抛弃永久代，改用在本地内存中实现的元空间来实现方法区，把 JDK 7 中永久代内容移到元空间。</p>\n<p>方法区会抛出 OutOfMemoryError异常。</p>\n<h3 id=\"简述运行时常量池\"><a href=\"#简述运行时常量池\" class=\"headerlink\" title=\"简述运行时常量池\"></a>简述运行时常量池</h3><p>运行时常量池存放常量池表，用于存放编译器生成的各种字面量与符号引用。一般除了保存 Class 文件中描述的符号引用外，还会把符号引用翻译的直接引用也存储在运行时常量池。除此之外，也会存放字符串基本类型。</p>\n<p>JDK8之前，放在方法区，大小受限于方法区。JDK8将运行时常量池存放堆中。</p>\n<h3 id=\"简述直接内存\"><a href=\"#简述直接内存\" class=\"headerlink\" title=\"简述直接内存\"></a>简述直接内存</h3><p>直接内存也称为堆外内存，就是把内存对象分配在JVM堆外的内存区域。这部分内存不是虚拟机管理，而是由操作系统来管理。Java通过DriectByteBuffer对其进行操作，避免了在 Java 堆和 Native堆来回复制数据。</p>\n<h3 id=\"简述Java创建对象的过程\"><a href=\"#简述Java创建对象的过程\" class=\"headerlink\" title=\"简述Java创建对象的过程\"></a>简述Java创建对象的过程</h3><ul>\n<li> 检查该指令的参数能否在常量池中定位到一个类的符号引用，并检查引用代表的类是否已被加载、解析和初始化，如果没有就先执行类加载。</li>\n<li> 通过检查通过后虚拟机将为新生对象分配内存。</li>\n<li> 完成内存分配后虚拟机将成员变量设为零值</li>\n<li> 设置对象头，包括哈希码、GC 信息、锁信息、对象所属类的类元信息等。</li>\n<li> 执行 init 方法，初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。</li>\n</ul>\n<h3 id=\"简述JVM给对象分配内存的策略\"><a href=\"#简述JVM给对象分配内存的策略\" class=\"headerlink\" title=\"简述JVM给对象分配内存的策略\"></a>简述JVM给对象分配内存的策略</h3><ul>\n<li> 指针碰撞：这种方式在内存中放一个指针作为分界指示器将使用过的内存放在一边，空闲的放在另一边，通过指针挪动完成分配。</li>\n<li> 空闲列表：对于 Java 堆内存不规整的情况，虚拟机必须维护一个列表记录哪些内存可用，在分配时从列表中找到一块足够大的空间划分给对象并更新列表记录。</li>\n</ul>\n<h3 id=\"Java对象内存分配是如何保证线程安全的\"><a href=\"#Java对象内存分配是如何保证线程安全的\" class=\"headerlink\" title=\"Java对象内存分配是如何保证线程安全的\"></a>Java对象内存分配是如何保证线程安全的</h3><p>第一种方法，采用CAS机制，配合失败重试的方式保证更新操作的原子性。该方式效率低。</p>\n<p>第二种方法，每个线程在Java堆中预先分配一小块内存，然后再给对象分配内存的时候，直接在自己这块”私有”内存中分配。一般采用这种策略。</p>\n<h3 id=\"简述对象的内存布局\"><a href=\"#简述对象的内存布局\" class=\"headerlink\" title=\"简述对象的内存布局\"></a>简述对象的内存布局</h3><p>对象在堆内存的存储布局可分为对象头、实例数据和对齐填充。</p>\n<p>1）对象头主要包含两部分数据：MarkWord、类型指针。</p>\n<p>MarkWord 用于存储哈希码（HashCode）、GC分代年龄、锁状态标志位、线程持有的锁、偏向线程ID等信息。</p>\n<p>类型指针即对象指向他的类元数据指针，如果对象是一个 Java 数组，会有一块用于记录数组长度的数据。</p>\n<p>2）实例数据存储代码中所定义的各种类型的字段信息。</p>\n<p>3）对齐填充起占位作用。HotSpot 虚拟机要求对象的起始地址必须是8的整数倍，因此需要对齐填充。</p>\n<h3 id=\"如何判断对象是否是垃圾\"><a href=\"#如何判断对象是否是垃圾\" class=\"headerlink\" title=\"如何判断对象是否是垃圾\"></a>如何判断对象是否是垃圾</h3><p>1）引用计数法：</p>\n<p>设置引用计数器，对象被引用计数器加 1，引用失效时计数器减 1，如果计数器为 0 则被标记为垃圾。会存在对象间循环引用的问题，一般不使用这种方法。</p>\n<p>2）可达性分析：</p>\n<p>通过 GC Roots 的根对象作为起始节点，从这些节点开始，根据引用关系向下搜索，如果某个对象没有被搜到，则会被标记为垃圾。可作为 GC Roots 的对象包括虚拟机栈和本地方法栈中引用的对象、类静态属性引用的对象、常量引用的对象。</p>\n<h3 id=\"简述java的引用类型\"><a href=\"#简述java的引用类型\" class=\"headerlink\" title=\"简述java的引用类型\"></a>简述java的引用类型</h3><ul>\n<li> 强引用：被强引用关联的对象不会被回收。一般采用 new 方法创建强引用。</li>\n<li> 软引用：被软引用关联的对象只有在内存不够的情况下才会被回收。一般采用 SoftReference 类来创建软引用。</li>\n<li> 弱引用：垃圾收集器碰到即回收，也就是说它只能存活到下一次垃圾回收发生之前。一般采用 WeakReference 类来创建弱引用。</li>\n<li> 虚引用：无法通过该引用获取对象。唯一目的就是为了能在对象被回收时收到一个系统通知。虚引用必须与引用队列联合使用。</li>\n</ul>\n<h3 id=\"简述标记清除算法、标记整理算法和标记复制算法\"><a href=\"#简述标记清除算法、标记整理算法和标记复制算法\" class=\"headerlink\" title=\"简述标记清除算法、标记整理算法和标记复制算法\"></a>简述标记清除算法、标记整理算法和标记复制算法</h3><ul>\n<li> 标记清除算法：先标记需清除的对象，之后统一回收。这种方法效率不高，会产生大量不连续的碎片。</li>\n<li> 标记整理算法：先标记存活对象，然后让所有存活对象向一端移动，之后清理端边界以外的内存</li>\n<li> 标记复制算法：将可用内存按容量划分为大小相等的两块，每次只使用其中一块。当使用的这块空间用完了，就将存活对象复制到另一块，再把已使用过的内存空间一次清理掉。</li>\n</ul>\n<h3 id=\"简述分代收集算法\"><a href=\"#简述分代收集算法\" class=\"headerlink\" title=\"简述分代收集算法\"></a>简述分代收集算法</h3><p>根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p>\n<p>一般将堆分为新生代和老年代，对这两块采用不同的算法。</p>\n<p>新生代使用：标记复制算法</p>\n<p>老年代使用：标记清除或者标记整理算法</p>\n<h3 id=\"简述Serial垃圾收集器\"><a href=\"#简述Serial垃圾收集器\" class=\"headerlink\" title=\"简述Serial垃圾收集器\"></a>简述Serial垃圾收集器</h3><p>Serial垃圾收集器是单线程串行收集器。垃圾回收的时候，必须暂停其他所有线程。新生代使用标记复制算法，老年代使用标记整理算法。简单高效。</p>\n<h3 id=\"简述ParNew垃圾收集器\"><a href=\"#简述ParNew垃圾收集器\" class=\"headerlink\" title=\"简述ParNew垃圾收集器\"></a>简述ParNew垃圾收集器</h3><p>ParNew垃圾收集器可以看作Serial垃圾收集器的多线程版本，新生代使用标记复制算法，老年代使用标记整理算法。</p>\n<h3 id=\"简述Parallel-Scavenge垃圾收集器\"><a href=\"#简述Parallel-Scavenge垃圾收集器\" class=\"headerlink\" title=\"简述Parallel Scavenge垃圾收集器\"></a>简述Parallel Scavenge垃圾收集器</h3><p>注重吞吐量，即 CPU运行代码时间/CPU耗时总时间（CPU运行代码时间+ 垃圾回收时间）。新生代使用标记复制算法，老年代使用标记整理算法。</p>\n<h3 id=\"简述CMS垃圾收集器\"><a href=\"#简述CMS垃圾收集器\" class=\"headerlink\" title=\"简述CMS垃圾收集器\"></a>简述CMS垃圾收集器</h3><p>CMS垃圾收集器注重最短时间停顿。CMS垃圾收集器为最早提出的并发收集器，垃圾收集线程与用户线程同时工作。采用标记清除算法。该收集器分为初始标记、并发标记、并发预清理、并发清除、并发重置这么几个步骤。</p>\n<ul>\n<li> 初始标记：暂停其他线程(stop the world)，标记与GC roots直接关联的对象。</li>\n<li> 并发标记：可达性分析过程(程序不会停顿)。</li>\n<li> 并发预清理：查找执行并发标记阶段从年轻代晋升到老年代的对象，重新标记，暂停虚拟机（stop the world）扫描CMS堆中剩余对象。</li>\n<li> 并发清除：清理垃圾对象，(程序不会停顿)。</li>\n<li> 并发重置，重置CMS收集器的数据结构。</li>\n</ul>\n<h3 id=\"简述G1垃圾收集器\"><a href=\"#简述G1垃圾收集器\" class=\"headerlink\" title=\"简述G1垃圾收集器\"></a>简述G1垃圾收集器</h3><p>和Serial、Parallel Scavenge、CMS不同，G1垃圾收集器把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。</p>\n<ul>\n<li> 初始标记：标记与GC roots直接关联的对象。</li>\n<li> 并发标记：可达性分析。</li>\n<li> 最终标记：对并发标记过程中，用户线程修改的对象再次标记一下。</li>\n<li> 筛选回收：对各个Region的回收价值和成本进行排序，然后根据用户所期望的GC停顿时间制定回收计划并回收。</li>\n</ul>\n<h3 id=\"简述Minor-GC\"><a href=\"#简述Minor-GC\" class=\"headerlink\" title=\"简述Minor GC\"></a>简述Minor GC</h3><p>Minor GC指发生在新生代的垃圾收集，因为 Java 对象大多存活时间短，所以 Minor GC 非常频繁，一般回收速度也比较快。</p>\n<h3 id=\"简述Full-GC\"><a href=\"#简述Full-GC\" class=\"headerlink\" title=\"简述Full GC\"></a>简述Full GC</h3><p>Full GC 是清理整个堆空间—包括年轻代和永久代。调用System.gc(),老年代空间不足，空间分配担保失败，永生代空间不足会产生full gc。</p>\n<h3 id=\"常见内存分配策略\"><a href=\"#常见内存分配策略\" class=\"headerlink\" title=\"常见内存分配策略\"></a>常见内存分配策略</h3><p>大多数情况下对象在新生代 Eden 区分配，当 Eden 没有足够空间时将发起一次 Minor GC。</p>\n<p>大对象需要大量连续内存空间，直接进入老年代区分配。</p>\n<p>如果经历过第一次 Minor GC 仍然存活且能被 Survivor 容纳，该对象就会被移动到 Survivor 中并将年龄设置为 1，并且每熬过一次 Minor GC 年龄就加 1 ，当增加到一定程度（默认15）就会被晋升到老年代。</p>\n<p>如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 的一半，年龄不小于该年龄的对象就可以直接进入老年代。</p>\n<p>MinorGC 前，虚拟机必须检查老年代最大可用连续空间是否大于新生代对象总空间，如果满足则说明这次 Minor GC 确定安全。如果不，JVM会查看HandlePromotionFailure 参数是否允许担保失败，如果允许会继续检查老年代最大可用连续空间是否大于历次晋升老年代对象的平均大小，如果满足将Minor GC，否则改成一次 FullGC。</p>\n<h3 id=\"简述JVM类加载过程\"><a href=\"#简述JVM类加载过程\" class=\"headerlink\" title=\"简述JVM类加载过程\"></a>简述JVM类加载过程</h3><p>1）加载：</p>\n<ul>\n<li> 通过全类名获取类的二进制字节流。</li>\n<li> 将类的静态存储结构转化为方法区的运行时数据结构。</li>\n<li> 在内存中生成类的Class对象，作为方法区数据的入口。</li>\n</ul>\n<p>2）验证：对文件格式，元数据，字节码，符号引用等验证正确性。</p>\n<p>3）准备：在方法区内为类变量分配内存并设置为0值。</p>\n<p>4）解析：将符号引用转化为直接引用。</p>\n<p>5）初始化：执行类构造器clinit方法，真正初始化。</p>\n<h3 id=\"简述JVM中的类加载器\"><a href=\"#简述JVM中的类加载器\" class=\"headerlink\" title=\"简述JVM中的类加载器\"></a>简述JVM中的类加载器</h3><ul>\n<li> BootstrapClassLoader启动类加载器：加载/lib下的jar包和类。由C++编写。</li>\n<li> ExtensionClassLoader扩展类加载器：/lib/ext目录下的jar包和类。由Java编写。</li>\n<li> AppClassLoader应用类加载器，加载当前classPath下的jar包和类。由Java编写。</li>\n</ul>\n<h3 id=\"简述双亲委派机制\"><a href=\"#简述双亲委派机制\" class=\"headerlink\" title=\"简述双亲委派机制\"></a>简述双亲委派机制</h3><p>一个类加载器收到类加载请求之后，首先判断当前类是否被加载过。已经被加载的类会直接返回，如果没有被加载，首先将类加载请求转发给父类加载器，一直转发到启动类加载器，只有当父类加载器无法完成时才尝试自己加载。</p>\n<p>加载类顺序：BootstrapClassLoader-&gt;ExtensionClassLoader-&gt;AppClassLoader-&gt;CustomClassLoader 检查类是否加载顺序：CustomClassLoader-&gt;AppClassLoader-&gt;ExtensionClassLoader-&gt;BootstrapClassLoader</p>\n<h3 id=\"双亲委派机制的优点\"><a href=\"#双亲委派机制的优点\" class=\"headerlink\" title=\"双亲委派机制的优点\"></a>双亲委派机制的优点</h3><ul>\n<li> 避免类的重复加载。相同的类被不同的类加载器加载会产生不同的类，双亲委派保证了Java程序的稳定运行。</li>\n<li> 保证核心API不被修改。</li>\n<li> 如何破坏双亲委派机制</li>\n<li> 重载loadClass()方法，即自定义类加载器。</li>\n</ul>\n<h3 id=\"如何构建自定义类加载器\"><a href=\"#如何构建自定义类加载器\" class=\"headerlink\" title=\"如何构建自定义类加载器\"></a>如何构建自定义类加载器</h3><p>新建自定义类继承自java.lang.ClassLoader，重写findClass、loadClass、defineClass方法</p>\n<h3 id=\"JVM常见调优参数\"><a href=\"#JVM常见调优参数\" class=\"headerlink\" title=\"JVM常见调优参数\"></a>JVM常见调优参数</h3><ul>\n<li> -Xms 初始堆大小</li>\n<li> -Xmx 最大堆大小</li>\n<li> -XX:NewSize 年轻代大小</li>\n<li> -XX:MaxNewSize 年轻代最大值</li>\n<li> -XX:PermSize 永生代初始值</li>\n<li> -XX:MaxPermSize 永生代最大值</li>\n<li> -XX:NewRatio 新生代与老年代的比例</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/感受java8后lambda之美/image_16155432.png","slug":"image_16155432.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_23fab375.png","slug":"image_23fab375.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_7771b4fe.png","slug":"image_7771b4fe.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_79d304da.png","slug":"image_79d304da.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_9186bf98.png","slug":"image_9186bf98.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_c1ac2536.png","slug":"image_c1ac2536.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_eba0197b.png","slug":"image_eba0197b.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_ec9c4260.png","slug":"image_ec9c4260.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cla1u1fni00004sld4m8lg8sb","category_id":"cl8ye4pnx00093eld9k027sjj","_id":"cla1uku9p0003wwldbt0ed88c"},{"post_id":"cla1uku9k0000wwld3jap61ky","category_id":"cla1uku9o0001wwldfw4makkm","_id":"cla1uku9r0007wwld9mll9mgo"},{"post_id":"cla1ut5bv00006llddor7gqde","category_id":"cl8ye4pnx00093eld9k027sjj","_id":"cla1ut5c300026lld21judw1i"},{"post_id":"cla1wfs1m0000hzld2zuj5k6i","category_id":"cla1wfs1q0001hzld8czpfcpj","_id":"cla1wfs1s0004hzld91yb8kap"},{"post_id":"cla21kmyu000001ldd8hx7phc","category_id":"cl8ye4pnx00093eld9k027sjj","_id":"cla21kmz1000401ldcn9r38n4"},{"post_id":"cla21kmyw000101ld4jd8gijc","category_id":"cl8ye4pnx00093eld9k027sjj","_id":"cla21kmz1000501ld8mlh1xes"},{"post_id":"cla21kmz0000301ldgbif4r8y","category_id":"cl8ye4pnx00093eld9k027sjj","_id":"cla21kmz2000801ldbdqe0gg8"}],"PostTag":[{"post_id":"cla1uku9k0000wwld3jap61ky","tag_id":"cla1uku9p0002wwlda1xf3awq","_id":"cla1uku9q0005wwld2kxfeiyi"},{"post_id":"cla1u1fni00004sld4m8lg8sb","tag_id":"cla1uku9q0004wwldh2h81kby","_id":"cla1uku9r0009wwldg97i83pp"},{"post_id":"cla1u1fni00004sld4m8lg8sb","tag_id":"cla1uku9q0006wwld30xkfwfq","_id":"cla1uku9r000awwld4xxd5err"},{"post_id":"cla1u1fni00004sld4m8lg8sb","tag_id":"cla1uku9r0008wwldgeqta8zc","_id":"cla1uku9r000bwwld0mje2ssd"},{"post_id":"cla1ut5bv00006llddor7gqde","tag_id":"cla1uku9q0004wwldh2h81kby","_id":"cla1ut5c400046lld8fno6zfo"},{"post_id":"cla1ut5bv00006llddor7gqde","tag_id":"cla1ut5c100016lld3frt4kzl","_id":"cla1ut5c400056lld30ih0cq2"},{"post_id":"cla1ut5bv00006llddor7gqde","tag_id":"cla1ut5c400036lldcyw1873y","_id":"cla1ut5c400066lld9xvm45zo"},{"post_id":"cla1wfs1m0000hzld2zuj5k6i","tag_id":"cla1wfs1r0002hzld1pl29flo","_id":"cla1wfs1s0005hzld7vynglqt"},{"post_id":"cla1wfs1m0000hzld2zuj5k6i","tag_id":"cla1wfs1s0003hzld6z4t63zi","_id":"cla1wfs1t0006hzld8rytdeq0"},{"post_id":"cla21kmyu000001ldd8hx7phc","tag_id":"cla21kmyx000201ldd8xsdfop","_id":"cla21kmz2000701ldbv3objvy"},{"post_id":"cla21kmyw000101ld4jd8gijc","tag_id":"cla21kmz2000601ldcbcz18fd","_id":"cla21kmz3000a01ld67y8fwbq"},{"post_id":"cla21kmz0000301ldgbif4r8y","tag_id":"cla21kmz2000901ldcsdefdyf","_id":"cla21kmz3000b01ld4pre12k5"},{"post_id":"cla21kmyu000001ldd8hx7phc","tag_id":"cla21qjxn0000fmld9oe2hrds","_id":"cla21qjxv0002fmld8w0mh7wo"},{"post_id":"cla21kmyw000101ld4jd8gijc","tag_id":"cla21qjxn0000fmld9oe2hrds","_id":"cla21qjxv0003fmld8p98e7vu"}],"Tag":[{"name":"ios","_id":"cl8ye4pnv00053eld4g7x30yu"},{"name":"objective-c","_id":"cl8ye4pny000a3eldehy9cg15"},{"name":"设计模式","_id":"cl8ye4po0000d3eldg6et6ncg"},{"name":"思考方式","_id":"cl8ye4po0000h3elddmf2gt5j"},{"name":"java8","_id":"cl9w4jneb00011mld3yk12gz5"},{"name":"web","_id":"cl9w6c3km0002yzld6zdiaiml"},{"name":"java","_id":"cla1u1fnq00024sldg3c7dc7w"},{"name":"hexo","_id":"cla1uku9p0002wwlda1xf3awq"},{"name":"jdk1.8","_id":"cla1uku9q0004wwldh2h81kby"},{"name":"lambda","_id":"cla1uku9q0006wwld30xkfwfq"},{"name":"函数式编程","_id":"cla1uku9r0008wwldgeqta8zc"},{"name":"stream","_id":"cla1ut5c100016lld3frt4kzl"},{"name":"lambda操作","_id":"cla1ut5c400036lldcyw1873y"},{"name":"git","_id":"cla1wfs1r0002hzld1pl29flo"},{"name":"代码合并","_id":"cla1wfs1s0003hzld6z4t63zi"},{"name":"java基础","_id":"cla21kmyx000201ldd8xsdfop"},{"name":"并发编程","_id":"cla21kmz2000601ldcbcz18fd"},{"name":"虚拟机","_id":"cla21kmz2000901ldcsdefdyf"},{"name":"八股文","_id":"cla21qjxn0000fmld9oe2hrds"}]}}