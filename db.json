{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/dark.css","path":"css/dark.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","path":"css/indexcover.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/post.css","path":"css/post.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/reward.css","path":"css/reward.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"f3af07fa14a0a9a4119ad2ab7637ecf23568f47a","modified":1665137999412},{"_id":"source/_data/friends.json","hash":"64317415d9a3c31c69e7efaff17ba8775268355f","modified":1665137999412},{"_id":"source/_posts/基于Xcode11创建自定义UIWindow.md","hash":"28c1f5b6f285e595b6512916b053532b488f7e53","modified":1667187365485},{"_id":"source/_posts/记录学习设计模式-01-简单工厂和工厂方法.md","hash":"cc1805a028a3084a1e86557ba398f0df7f2aef02","modified":1667187365485},{"_id":"source/categories/index.md","hash":"57974cb8107db54818077da09cd4851bfdac9716","modified":1665137999417},{"_id":"source/contact/index.md","hash":"543e39afa39588a1c4cec1a9060dcf19fb8f2c2d","modified":1665137999417},{"_id":"source/friends/index.md","hash":"6e1710744cd6ee34cd876af8b9a51b32e8677df8","modified":1665137999418},{"_id":"source/about/index.md","hash":"27716ad12695774908760b4b4efa667654c1f754","modified":1665137999417},{"_id":"source/tags/index.md","hash":"5ad11165bda96d8d1bbc3641c7cf4402894f8fa0","modified":1665137999418},{"_id":"source/_posts/基于Xcode11创建自定义UIWindow/16277872853169.png","hash":"9d4bf9cf8097ba301e9c7e60ef5a382e5ff68b35","modified":1665137999416},{"_id":"source/_posts/基于Xcode11创建自定义UIWindow/16277873129770.png","hash":"e9f5c3d9a0c3043678d798111c954c1f42836662","modified":1665137999417},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1665140264654},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1665140264654},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1665140264655},{"_id":"themes/hexo-theme-matery/README.md","hash":"d64f79581eaf7b2ce8205209de8b01311db41832","modified":1665140264655},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"45d95b12690fdf4aabe5c471ef9f84109bdaf7bd","modified":1665140264655},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"0975f70c6d93d98f03f8df98f26d5f1cf9260f20","modified":1665140264655},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1665140264656},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1665140264656},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1665140264656},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1665140264656},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1665140264656},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1665140264667},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1665140264667},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1665140264668},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1665140264668},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1665140264669},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1665140264669},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1665140264670},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1665140264671},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1665140264671},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1665140264672},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"f5d76dea8673199693fb0c4e0955853112538a04","modified":1665140264672},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1665140264673},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1665140264673},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1665140264673},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1665140264674},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1665140264674},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1665140264686},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1665140264656},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"12350c0d366141b5c27792bb414d4adc303b0a9f","modified":1665140264656},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1665140264656},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"4765267aafe2871a2fdaeccd1598890219bd7d71","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"086a06863a0f88888707409936aa06a09ff50e3a","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1665140264657},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1665140264658},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1665140264658},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"7c87e0eb2cf662c2a9b9b0e1e5d228b0fac2622e","modified":1665140264658},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1665140264658},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1665140264658},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f5c00f21af281a09dc7de89e82a3b442903451a7","modified":1665140264658},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1665140264659},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"e8b44268b59add61af44b7338527523d10d9d742","modified":1665140264659},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1665140264659},{"_id":"themes/hexo-theme-matery/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1665140264659},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1665140264659},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"0953217f4e19a51dfc5a0ffc7d066406df18060b","modified":1665140264659},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1665140264660},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1665140264660},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"70fccaea75ce48364222c4e5de0496e556b01cb1","modified":1665140264660},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"6261f8191c3c1159f63ec7f9293bb93f7d2a3dbb","modified":1665140264660},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1665140264661},{"_id":"themes/hexo-theme-matery/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1665140264661},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1665140264661},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1665140264661},{"_id":"themes/hexo-theme-matery/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1665140264662},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"236668e72b01db91f5bf29eec4c79e34e2746d98","modified":1665140264662},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1665140264662},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1665140264662},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1665140264662},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1665140264663},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"2ac48566bb806336f1e5bc5c66fc816a580d63c3","modified":1665140264663},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1665140264663},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1665140264664},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1665140264664},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1665140264664},{"_id":"themes/hexo-theme-matery/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1665140264664},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1665140264664},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1665140264665},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1665140264665},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1665140264665},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1665140264665},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1665140264665},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1665140264665},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1665140264666},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1665140264666},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1665140264666},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1665140264666},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1665140264667},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"ab02fb2da648f4f7afa0c2381aaca334bdeb54e6","modified":1665140264675},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1665140264675},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"84b0122b92342834540f69b19600cb54c50ab69e","modified":1665140264675},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1665140264676},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1665140264677},{"_id":"themes/hexo-theme-matery/source/css/dark.css","hash":"0dcd292d10f27f11c18d1a1a461b7e0cfe6c55cf","modified":1665140264677},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1665140264677},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1665140264678},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","hash":"e4a478c91cd6750a9f18b65b914ff0b316fb08b3","modified":1665140264678},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1665140264679},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1665140264679},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1665140264680},{"_id":"themes/hexo-theme-matery/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1665140264680},{"_id":"themes/hexo-theme-matery/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1665140264681},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1665140264688},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1665140264689},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1665140264691},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1665140264693},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1665140264807},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1665140264817},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1665140264838},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1665140264846},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1665140264698},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1665140264698},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1665140264698},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1665140264699},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1665140264705},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1665140264706},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1665140264720},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1665140264721},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1665140264721},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1665140264721},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1665140264722},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1665140264722},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1665140264722},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1665140264723},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1665140264723},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1665140264724},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1665140264732},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1665140264732},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1665140264739},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1665140264740},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1665140264740},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1665140264741},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1665140264743},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1665140264743},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1665140264751},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1665140264774},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1665140264783},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1665140264783},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1665140264784},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1665140264784},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1665140264785},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1665140264785},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1665140264785},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1665140264786},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1665140264786},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1665140264786},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1665140264787},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1665140264791},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1665140264796},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1665140264796},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1665140264800},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1665140264802},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1665140264816},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1665140264816},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1665140264816},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1665140264817},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1665140264822},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1665140264824},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1665140264825},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1665140264826},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1665140264829},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1665140264831},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1665140264831},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1665140264832},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1665140264833},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1665140264834},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1665140264835},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1665140264836},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1665140264847},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1665140264847},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1665140264713},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1665140264713},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1665140264720},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1665140264720},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1665140264745},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1665140264745},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1665140264746},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1665140264746},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1665140264747},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1665140264747},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1665140264748},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1665140264748},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1665140264792},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1665140264749},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1665140264793},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1665140264793},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1665140264793},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1665140264794},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1665140264795},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1665140264795},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1665140264731},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1665140264739},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1665140264742},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1665140264809},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1665140264811},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1665140264812},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1665140264820},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1665140264821},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1665140264823},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1665140264823},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1665140264824},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1665140264827},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1665140264827},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1665140264828},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1665140264830},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1665140264833},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1665140264835},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1665140264837},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1665140264708},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1665140264711},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1665140264817},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1665140264725},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1665140264752},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1665140264754},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1665140264803},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1665140264807},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1665140264809},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1665140264814},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1665140264815},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1665140264841},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1665140264707},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1665140264710},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1665140264719},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1665140264688},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1665140264805},{"_id":"source/_posts/基于Xcode11创建自定义UIWindow/16277872068447.png","hash":"4dd634e01851446ff1adc6424b39ba5233ac0064","modified":1665137999416},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1665140264813},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1665140264845},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1665140264717},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1665140264799},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1665140264791},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1665140264840},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1665140264730},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1665140264736},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1665140264782},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1665140264773},{"_id":"public/search.xml","hash":"d02f2ba928115f00a796a0a227cbd6162ac0103e","modified":1667530218598},{"_id":"public/404/index.html","hash":"3a219fa46d8ad9d6dfef151345902fe46ce8193a","modified":1667526452507},{"_id":"public/categories/index.html","hash":"0d5d548e8f7645242627ca381e49b219a10a088c","modified":1667530218598},{"_id":"public/contact/index.html","hash":"40336fee977cab4c436b2fe62fc384fee9208675","modified":1667526452507},{"_id":"public/friends/index.html","hash":"0a6027da0a6ec6f20d04361a22713e3b0ea5a911","modified":1667526452507},{"_id":"public/about/index.html","hash":"fe3a1d9d0bceb7cdf0bf6362fec998cb08c6079f","modified":1667530218598},{"_id":"public/tags/index.html","hash":"cbf57817235494499b7fd5354d99410f8719f79a","modified":1667530218598},{"_id":"public/2022/10/07/ji-lu-xue-xi-she-ji-mo-shi-01-jian-dan-gong-han-he-gong-han-fang-fa/index.html","hash":"4d65deb94778e66be671f9fe397e64433795af87","modified":1667187398166},{"_id":"public/2021/10/21/ji-yu-xcode11-chuang-jian-zi-ding-yi-uiwindow/index.html","hash":"b939887be60ebe5e2575572075c2cbc16037a4c3","modified":1667187398166},{"_id":"public/archives/index.html","hash":"7543665002509ad57fc9883addd33a90c3ec95eb","modified":1667530218598},{"_id":"public/archives/2021/index.html","hash":"2e21b8fd3dc1f71a955ae49d763fa1c1c697ebd4","modified":1667187398166},{"_id":"public/archives/2021/10/index.html","hash":"e3389336d2363e92b2e05cd192dcfbe823ae71fa","modified":1667187398166},{"_id":"public/archives/2022/index.html","hash":"254b776173185ac7fdc82bd21169abb4002043f6","modified":1667530218598},{"_id":"public/archives/2022/10/index.html","hash":"c98465f93b4fd06d944131bd88b40fac8e5a6d4d","modified":1667187398166},{"_id":"public/categories/ios/index.html","hash":"6bf28906216c75119453aa6d37ae6d16c95a4c78","modified":1667187398166},{"_id":"public/categories/java/index.html","hash":"74275e05a48788b34b41874ab5b75e9229070822","modified":1667530218598},{"_id":"public/index.html","hash":"16c18b363d30e7aa982ad90ae83215b60146d76e","modified":1667530218598},{"_id":"public/tags/ios/index.html","hash":"2ef3a671eaa481614ae4a477c1a6b3c6f169e492","modified":1667187398166},{"_id":"public/tags/objective-c/index.html","hash":"2e71731feaaf65ef656177dcaaeee03b2feceff5","modified":1667187398166},{"_id":"public/tags/设计模式/index.html","hash":"6bac33d01fd3d2790850b64d3bd661c061e58695","modified":1667187398166},{"_id":"public/tags/思考方式/index.html","hash":"11c9f5528fdbdfd70469200c54344b4b2c44d111","modified":1667187398166},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1667187398166},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1667187398166},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1667187398166},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1667187398166},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1667187398166},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1667187398166},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1667187398166},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1667187398166},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1667187398166},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1667187398166},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1667187398166},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1667187398166},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1667187398166},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1667187398166},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1667187398166},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1667187398166},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1667187398166},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1667187398166},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1667187398166},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1667187398166},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1667187398166},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1667187398166},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1667187398166},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1667187398166},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1667187398166},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1667187398166},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1667187398166},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1667187398166},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1667187398166},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1667187398166},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1667187398166},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1667187398166},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1667187398166},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1667187398166},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1667187398166},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1667187398166},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1667187398166},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1667187398166},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1667187398166},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1667187398166},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1667187398166},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1667187398166},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1667187398166},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1667187398166},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1667187398166},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1667187398166},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1667187398166},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1667187398166},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1667187398166},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1667187398166},{"_id":"public/2021/10/21/ji-yu-xcode11-chuang-jian-zi-ding-yi-uiwindow/16277872853169.png","hash":"9d4bf9cf8097ba301e9c7e60ef5a382e5ff68b35","modified":1667187398166},{"_id":"public/2021/10/21/ji-yu-xcode11-chuang-jian-zi-ding-yi-uiwindow/16277873129770.png","hash":"e9f5c3d9a0c3043678d798111c954c1f42836662","modified":1667187398166},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1667187398166},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1667187398166},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1667187398166},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1667187398166},{"_id":"public/css/indexcover.css","hash":"4dea2c489452c3efe70fa91a6a7678da64d895da","modified":1667187398166},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1667187398166},{"_id":"public/css/post.css","hash":"d38c71eddb8af1752c48eb48595fbaf89450ff40","modified":1667187398166},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1667187398166},{"_id":"public/css/reward.css","hash":"98b32aabeb908727844af04c31f08da6cab08335","modified":1667187398166},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1667187398166},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1667187398166},{"_id":"public/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1667187398166},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1667187398166},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1667187398166},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1667187398166},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1667187398166},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1667187398166},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1667187398166},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1667187398166},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1667187398166},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1667187398166},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1667187398166},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1667187398166},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1667187398166},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1667187398166},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1667187398166},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1667187398166},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1667187398166},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1667187398166},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1667187398166},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1667187398166},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1667187398166},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1667187398166},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1667187398166},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1667187398166},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1667187398166},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1667187398166},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1667187398166},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1667187398166},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1667187398166},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1667187398166},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1667187398166},{"_id":"public/css/dark.css","hash":"0dcd292d10f27f11c18d1a1a461b7e0cfe6c55cf","modified":1667187398166},{"_id":"public/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1667187398166},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1667187398166},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1667187398166},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1667187398166},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1667187398166},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1667187398166},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1667187398166},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1667187398166},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1667187398166},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1667187398166},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1667187398166},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1667187398166},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1667187398166},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1667187398166},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1667187398166},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1667187398166},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1667187398166},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1667187398166},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1667187398166},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1667187398166},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1667187398166},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1667187398166},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1667187398166},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1667187398166},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1667187398166},{"_id":"public/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1667187398166},{"_id":"public/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1667187398166},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1667187398166},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1667187398166},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1667187398166},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1667187398166},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1667187398166},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1667187398166},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1667187398166},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1667187398166},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1667187398166},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1667187398166},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1667187398166},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1667187398166},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1667187398166},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1667187398166},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1667187398166},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1667187398166},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1667187398166},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1667187398166},{"_id":"public/2021/10/21/ji-yu-xcode11-chuang-jian-zi-ding-yi-uiwindow/16277872068447.png","hash":"4dd634e01851446ff1adc6424b39ba5233ac0064","modified":1667187398166},{"_id":"source/_posts/java8的stream.md","hash":"5a88fd152272fa08cbdfc9bd5f9d062622ea0396","modified":1667181688846},{"_id":"public/2022/10/26/java8-de-stream/index.html","hash":"5d3338acd953139f8f8ca805ecf8adec3145af01","modified":1667186055924},{"_id":"public/tags/java8/index.html","hash":"b343f89fad75afb9249c48a00a58d7aa44abf662","modified":1667186055924},{"_id":"source/_posts/什么是Web3-0.md","hash":"eed388594ef5c3adb30a3cbe1499915405150d42","modified":1667187222977},{"_id":"public/2022/10/31/shi-me-shi-web3-0/index.html","hash":"1d1ddc4a1588ce1d50e95141953674bb41df8336","modified":1667187176192},{"_id":"public/categories/web3-0/index.html","hash":"53710af2539210a89afff121ba663a3f40e0de3c","modified":1667186055924},{"_id":"public/tags/web/index.html","hash":"1c76ea4f1b5fca17bc231f94c8a021b95de7df3c","modified":1667186055924},{"_id":"source/_posts/什么是Web3-0/1667183789631-dd785c26-0224-4212-a3dc-782fe61d5dc4.jpeg","hash":"e191a24c878f23e2f6b2a7bc33120da6657df144","modified":1667184345575},{"_id":"source/_posts/什么是Web3-0/1667183789718-964dbbfc-1786-4678-867d-e69cea9981f9.jpeg","hash":"602d0af08bc8b8b553ee7f5c06359a8a3af7f00d","modified":1667184345560},{"_id":"source/_posts/什么是Web3-0/1667183789660-e1d372b9-3971-4cce-b0dc-e3ef6133e671.jpeg","hash":"48a54f3a13605f38b14967276f3021106bf012ff","modified":1667184345540},{"_id":"source/_posts/什么是Web3-0/1667183790172-0d0d9de2-891b-4864-b5c4-834c6d950816.jpeg","hash":"2c4504360a5052f9d64f302c36611e34db45d30b","modified":1667184345505},{"_id":"source/_posts/什么是Web3-0/1667183789652-9cba8aef-9ee1-4d8e-a6b4-d421eb87e6f5.jpeg","hash":"1a04b7ea9493f07b4c58ad91642405476c29e2af","modified":1667184345591},{"_id":"source/_posts/什么是Web3-0/1667183790180-a72ab9b6-e223-4aa3-a0dd-475a8c603072.jpeg","hash":"5de623c89da98b6710338c0f26d5ea59b9843d8b","modified":1667184345526},{"_id":"source/_posts/什么是Web3-0/1667183790202-825900a2-6d75-4a59-9d3a-35e031294881.jpeg","hash":"3babacb9ee90f26bb2e7424becbe76a1539d73a8","modified":1667184345512},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789631-dd785c26-0224-4212-a3dc-782fe61d5dc4.jpeg","hash":"e191a24c878f23e2f6b2a7bc33120da6657df144","modified":1667184444213},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789660-e1d372b9-3971-4cce-b0dc-e3ef6133e671.jpeg","hash":"48a54f3a13605f38b14967276f3021106bf012ff","modified":1667184444213},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789718-964dbbfc-1786-4678-867d-e69cea9981f9.jpeg","hash":"602d0af08bc8b8b553ee7f5c06359a8a3af7f00d","modified":1667184444213},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183790172-0d0d9de2-891b-4864-b5c4-834c6d950816.jpeg","hash":"2c4504360a5052f9d64f302c36611e34db45d30b","modified":1667184444213},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789652-9cba8aef-9ee1-4d8e-a6b4-d421eb87e6f5.jpeg","hash":"1a04b7ea9493f07b4c58ad91642405476c29e2af","modified":1667184444213},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183790202-825900a2-6d75-4a59-9d3a-35e031294881.jpeg","hash":"3babacb9ee90f26bb2e7424becbe76a1539d73a8","modified":1667184444213},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183790180-a72ab9b6-e223-4aa3-a0dd-475a8c603072.jpeg","hash":"5de623c89da98b6710338c0f26d5ea59b9843d8b","modified":1667184444213},{"_id":"source/_posts/什么是Web3-0/1667183789631.jpeg","hash":"e191a24c878f23e2f6b2a7bc33120da6657df144","modified":1667184345575},{"_id":"source/_posts/什么是Web3-0/1667183789660.jpeg","hash":"48a54f3a13605f38b14967276f3021106bf012ff","modified":1667184345540},{"_id":"source/_posts/什么是Web3-0/1667183790172.jpeg","hash":"2c4504360a5052f9d64f302c36611e34db45d30b","modified":1667184345505},{"_id":"source/_posts/什么是Web3-0/1667183789718.jpeg","hash":"602d0af08bc8b8b553ee7f5c06359a8a3af7f00d","modified":1667184345560},{"_id":"source/_posts/什么是Web3-0/1667183789652.jpeg","hash":"1a04b7ea9493f07b4c58ad91642405476c29e2af","modified":1667184345591},{"_id":"source/_posts/什么是Web3-0/1667183790180.jpeg","hash":"5de623c89da98b6710338c0f26d5ea59b9843d8b","modified":1667184345526},{"_id":"source/_posts/什么是Web3-0/1667183790202.jpeg","hash":"3babacb9ee90f26bb2e7424becbe76a1539d73a8","modified":1667184345512},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789631.jpeg","hash":"e191a24c878f23e2f6b2a7bc33120da6657df144","modified":1667185710859},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789718.jpeg","hash":"602d0af08bc8b8b553ee7f5c06359a8a3af7f00d","modified":1667185710859},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789660.jpeg","hash":"48a54f3a13605f38b14967276f3021106bf012ff","modified":1667185710859},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183790172.jpeg","hash":"2c4504360a5052f9d64f302c36611e34db45d30b","modified":1667185710859},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183789652.jpeg","hash":"1a04b7ea9493f07b4c58ad91642405476c29e2af","modified":1667185710859},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183790180.jpeg","hash":"5de623c89da98b6710338c0f26d5ea59b9843d8b","modified":1667185710859},{"_id":"public/2022/10/31/shi-me-shi-web3-0/1667183790202.jpeg","hash":"3babacb9ee90f26bb2e7424becbe76a1539d73a8","modified":1667185710859},{"_id":"source/_posts/hellow.md","hash":"e24788d8adee0257ff1b70bb5e08cd035386306c","modified":1667187509683},{"_id":"source/_posts/感受java8后lambda之美.md","hash":"95bed6a6a1dd8104c1b5ac45f207c7779d9857f2","modified":1667527092493},{"_id":"source/_posts/感受java8后lambda之美/image_16155432.png","hash":"82bfdd63567076352313b10286ddcbc46588f6ee","modified":1667526120451},{"_id":"source/_posts/感受java8后lambda之美/image_23fab375.png","hash":"f40bb976e9bfbbdb7b31232c8f5f1a125a4c5d59","modified":1667526120451},{"_id":"source/_posts/感受java8后lambda之美/image_7771b4fe.png","hash":"a0b4ed5df52f34ac41e7e901bbd93d4b45961c75","modified":1667526120452},{"_id":"source/_posts/感受java8后lambda之美/image_79d304da.png","hash":"ab609b189e3da922b22c0a94146eadfc7ec2373d","modified":1667526120453},{"_id":"source/_posts/感受java8后lambda之美/image_9186bf98.png","hash":"7e7c755f3d086836057e551e4b809186a6a85176","modified":1667526120453},{"_id":"source/_posts/感受java8后lambda之美/image_c1ac2536.png","hash":"8721847009c10220ecec669342f626568e3fe497","modified":1667526120454},{"_id":"source/_posts/感受java8后lambda之美/image_eba0197b.png","hash":"126816f760c9a3abae668504b06b2fcdfd3c6d40","modified":1667526120454},{"_id":"source/_posts/感受java8后lambda之美/image_ec9c4260.png","hash":"a12867ca34f35c0cc2208210e8931c8a9ba7d35c","modified":1667526120455},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/index.html","hash":"2f31cf6364730eb5ef47541c3792d695e6016850","modified":1667527483553},{"_id":"public/archives/2022/11/index.html","hash":"1be356a2b56db9aec05d7e3fd7b5bee5026ea007","modified":1667530218598},{"_id":"public/categories/jdk1-8/index.html","hash":"150c18ca5100067a70348ba99f98cb40726d6d6f","modified":1667526452507},{"_id":"public/categories/jdk1-8/lambda/index.html","hash":"cf47cb314f8c1480d8eb71cda4f55a63a6de660b","modified":1667526452507},{"_id":"public/categories/jdk1-8/lambda/函数式编程/index.html","hash":"a17b5b6862096f2879a8d4dfeb9b985534817d42","modified":1667526452507},{"_id":"public/tags/java/index.html","hash":"03f61f6c266d16b75087aa91f4085a438d326835","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_16155432.png","hash":"82bfdd63567076352313b10286ddcbc46588f6ee","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_23fab375.png","hash":"f40bb976e9bfbbdb7b31232c8f5f1a125a4c5d59","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_7771b4fe.png","hash":"a0b4ed5df52f34ac41e7e901bbd93d4b45961c75","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_79d304da.png","hash":"ab609b189e3da922b22c0a94146eadfc7ec2373d","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_9186bf98.png","hash":"7e7c755f3d086836057e551e4b809186a6a85176","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_c1ac2536.png","hash":"8721847009c10220ecec669342f626568e3fe497","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_eba0197b.png","hash":"126816f760c9a3abae668504b06b2fcdfd3c6d40","modified":1667526452507},{"_id":"public/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_ec9c4260.png","hash":"a12867ca34f35c0cc2208210e8931c8a9ba7d35c","modified":1667526452507},{"_id":"source/_posts/在hexo中无痛使用本地图片.md","hash":"e6a9f56a79880c640bf59b6f2061f4a6c684ddf7","modified":1667527475062},{"_id":"public/2022/11/04/zai-hexo-zhong-wu-tong-shi-yong-ben-di-tu-pian/index.html","hash":"ac0e03ffe7c95fe162a4fd31413213596dce61e1","modified":1667527483553},{"_id":"public/tags/hexo/index.html","hash":"13c3a763c0db5d4ce9a98c7920da56396f1c7de0","modified":1667530218598},{"_id":"public/categories/hexo/index.html","hash":"3c331d60c082d28b536151995d3ad5701606f0f9","modified":1667530218598},{"_id":"public/tags/jdk1-8/index.html","hash":"fd69d4e3682d06f593d94b052b069c4a0b84fb46","modified":1667530218598},{"_id":"public/tags/lambda/index.html","hash":"33c4319e07a1d2c183adc9bc680fb653e71b8106","modified":1667530218598},{"_id":"public/tags/函数式编程/index.html","hash":"4e152f3a2283d74c3927615a0030912f0c3e8204","modified":1667530218598},{"_id":"source/_posts/Java8Stream实战系列.md","hash":"52c661aec650f36c588ab97cabf5358c4130c005","modified":1667527472578},{"_id":"public/2022/11/04/java8stream-shi-zhan-xi-lie/index.html","hash":"3e29e7234fc9c9ecce1548a45e424dd5ee8704c3","modified":1667530218598},{"_id":"public/tags/stream/index.html","hash":"4679915f7d8afb70689f079daaa6187b5053c593","modified":1667530218598},{"_id":"public/tags/lambda操作/index.html","hash":"4094ae3446a062b357064bbb748a0c7d0b311faa","modified":1667530218598},{"_id":"source/_posts/45个日常用git合代码的经典操作场景.md","hash":"6a78fcb5fbbb029d3991ea7a251829c5c0b80bac","modified":1667530207298},{"_id":"public/2022/11/04/45-ge-ri-chang-yong-git-he-dai-ma-de-jing-dian-cao-zuo-chang-jing/index.html","hash":"5b2f4b40f49bd46fafbf4b5593d1e6233e9cedbf","modified":1667530218598},{"_id":"public/categories/git/index.html","hash":"810a6d72c4dad659ba8a0b50d611d6a35ce4e2b9","modified":1667530218598},{"_id":"public/tags/git/index.html","hash":"09458e55c51059b29e758add7141e6ac2c6014fd","modified":1667530218598},{"_id":"public/tags/代码合并/index.html","hash":"62b9e41675bbf80b259d817a69550f01521ea711","modified":1667530218598}],"Category":[{"name":"ios","_id":"cl8ye4pnu00043eld4hw29j7v"},{"name":"java","_id":"cl8ye4pnx00093eld9k027sjj"},{"name":"web3.0","_id":"cl9w6c3kl0001yzld94rlcmy9"},{"name":"jdk1.8","_id":"cla1u1fnp00014sld6y8t6vme"},{"name":"lambda","parent":"cla1u1fnp00014sld6y8t6vme","_id":"cla1u1fnr00044sld7vi5a4kd"},{"name":"函数式编程","parent":"cla1u1fnr00044sld7vi5a4kd","_id":"cla1u1fns00054sld3clq8076"},{"name":"hexo","_id":"cla1uku9o0001wwldfw4makkm"},{"name":"git","_id":"cla1wfs1q0001hzld8czpfcpj"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}],"Page":[{"title":"404","date":"2020-05-29T16:00:00.000Z","type":"404","layout":"404","description":"Cannot find the page you want :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2020-05-30 00:00:00\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Cannot find the page you want :(\"\n---","updated":"2022-10-07T10:19:59.412Z","path":"404/index.html","comments":1,"_id":"cl8ye4pnm00003eld0dcx32ji","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2022-10-07T10:19:59.417Z","path":"categories/index.html","comments":1,"_id":"cl8ye4pns00023eld80cgcxyp","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2022-10-07T10:19:59.417Z","path":"contact/index.html","comments":1,"_id":"cl8ye4pnw00063eldc9spavac","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"friends","date":"2018-12-12T13:25:30.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2022-10-07T10:19:59.418Z","path":"friends/index.html","comments":1,"_id":"cl8ye4pnx00073eld4d4gbgx3","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2022-10-07T10:19:59.417Z","path":"about/index.html","comments":1,"_id":"cl8ye4pnx00083eldc1n5dly8","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-10T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-10 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2022-10-07T10:19:59.418Z","path":"tags/index.html","comments":1,"_id":"cl8ye4pnz000b3eld0q3u06j3","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""}],"Post":[{"title":"感受java8后lambda之美","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-04T01:41:09.000Z","password":null,"summary":"java8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。","_content":"\n\n一、引言\n\njava8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。总结就是：使用不可变值与函数，函数对不可变值进行处理，映射成另一个值。\n\n## 二、java重要的函数式接口 \n\n### 1、什么是函数式接口 \n\n函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。\n\n#### 1.1 java8自带的常用函数式接口。 \n\n![image_ec9c4260.png](感受java8后lambda之美/image_ec9c4260.png)\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Predicate<Integer> predicate = x -> x > 185;\n        Student student = new Student(\"9龙\", 23, 175);\n        System.out.println(\n            \"9龙的身高高于185吗？：\" + predicate.test(student.getStature()));\n\n        Consumer<String> consumer = System.out::println;\n        consumer.accept(\"命运由我不由天\");\n\n        Function<Student, String> function = Student::getName;\n        String name = function.apply(student);\n        System.out.println(name);\n\n        Supplier<Integer> supplier = \n            () -> Integer.valueOf(BigDecimal.TEN.toString());\n        System.out.println(supplier.get());\n\n        UnaryOperator<Boolean> unaryOperator = uglily -> !uglily;\n        Boolean apply2 = unaryOperator.apply(true);\n        System.out.println(apply2);\n\n        BinaryOperator<Integer> operator = (x, y) -> x * y;\n        Integer integer = operator.apply(2, 3);\n        System.out.println(integer);\n\n        test(() -> \"我是一个演示的函数式接口\");\n    }\n\n    /**\n     * 演示自定义函数式接口使用\n     *\n     * @param worker\n     */\n    public static void test(Worker worker) {\n        String work = worker.work();\n        System.out.println(work);\n    }\n\n    public interface Worker {\n        String work();\n    }\n}\n//9龙的身高高于185吗？：false\n//命运由我不由天\n//9龙\n//10\n//false\n//6\n//我是一个演示的函数式接口\n```\n\n以上演示了lambda接口的使用及自定义一个函数式接口并使用。下面，我们看看java8将函数式接口封装到流中如何高效的帮助我们处理集合。  \n\n\n注意：Student::getName例子中这种编写lambda表达式的方式称为方法引用。格式为ClassNmae::methodName。是不是很神奇，java8就是这么迷人。\n\n> 示例：本篇所有示例都基于以下三个类。OutstandingClass：班级；Student：学生；SpecialityEnum：特长。\n\n#### ![image_7771b4fe.png](感受java8后lambda之美/image_7771b4fe.png) \n\n#### 1.2 惰性求值与及早求值 \n\n惰性求值：只描述Stream，操作的结果也是Stream，这样的操作称为惰性求值。惰性求值可以像建造者模式一样链式使用，最后再使用及早求值得到最终结果。\n\n及早求值：得到最终的结果而不是Stream，这样的操作称为及早求值。\n\n### 2、常用的流 \n\n#### 2.1 collect(Collectors.toList()) \n\n将流转换为list。还有toSet()，toMap()等。及早求值。\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> studentList = Stream.of(new Student(\"路飞\", 22, 175),\n                new Student(\"红发\", 40, 180),\n                new Student(\"白胡子\", 50, 185)).collect(Collectors.toList());\n        System.out.println(studentList);\n    }\n}\n//输出结果\n//[Student{name='路飞', age=22, stature=175, specialities=null}, \n//Student{name='红发', age=40, stature=180, specialities=null}, \n//Student{name='白胡子', age=50, stature=185, specialities=null}]\n```\n\n#### 2.2 filter \n\n顾名思义，起过滤筛选的作用。内部就是Predicate接口。惰性求值。\n\n![image_eba0197b.png](感受java8后lambda之美/image_eba0197b.png)\n\n比如我们筛选出出身高小于180的同学。\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        List<Student> list = students.stream()\n            .filter(stu -> stu.getStature() < 180)\n            .collect(Collectors.toList());\n        System.out.println(list);\n    }\n}\n//输出结果\n//[Student{name='路飞', age=22, stature=175, specialities=null}]\n```\n\n#### 2.3 map    \n\n转换功能，内部就是Function接口。惰性求值\n\n![image_23fab375.png](感受java8后lambda之美/image_23fab375.png)\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        List<String> names = students.stream().map(student -> student.getName())\n                .collect(Collectors.toList());\n        System.out.println(names);\n    }\n}\n//输出结果\n//[路飞, 红发, 白胡子]\n```\n\n例子中将student对象转换为String对象，获取student的名字。  \n\n\n#### 2.4 flatMap \n\n将多个Stream合并为一个Stream。惰性求值\n\n![image_c1ac2536.png](感受java8后lambda之美/image_c1ac2536.png)\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        List<Student> studentList = Stream.of(students,\n                asList(new Student(\"艾斯\", 25, 183),\n                        new Student(\"雷利\", 48, 176)))\n                .flatMap(students1 -> students1.stream()).collect(Collectors.toList());\n        System.out.println(studentList);\n    }\n}\n//输出结果\n//[Student{name='路飞', age=22, stature=175, specialities=null}, \n//Student{name='红发', age=40, stature=180, specialities=null}, \n//Student{name='白胡子', age=50, stature=185, specialities=null}, \n//Student{name='艾斯', age=25, stature=183, specialities=null},\n//Student{name='雷利', age=48, stature=176, specialities=null}]\n```\n\n调用Stream.of的静态方法将两个list转换为Stream，再通过flatMap将两个流合并为一个。  \n\n\n#### 2.5 max和min \n\n我们经常会在集合中求最大或最小值，使用流就很方便。及早求值。\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        Optional<Student> max = students.stream()\n            .max(Comparator.comparing(stu -> stu.getAge()));\n        Optional<Student> min = students.stream()\n            .min(Comparator.comparing(stu -> stu.getAge()));\n        //判断是否有值\n        if (max.isPresent()) {\n            System.out.println(max.get());\n        }\n        if (min.isPresent()) {\n            System.out.println(min.get());\n        }\n    }\n}\n//输出结果\n//Student{name='白胡子', age=50, stature=185, specialities=null}\n//Student{name='路飞', age=22, stature=175, specialities=null}\n```\n\nmax、min接收一个Comparator（例子中使用java8自带的静态函数，只需要传进需要比较值即可。）并且返回一个Optional对象，该对象是java8新增的类，专门为了防止null引发的空指针异常。  \n\n\n可以使用max.isPresent()判断是否有值；可以使用max.orElse(new Student())，当值为null时就使用给定值；也可以使用max.orElseGet(() -> new Student());这需要传入一个Supplier的lambda表达式。\n\n#### 2.6 count \n\n统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        long count = students.stream().filter(s1 -> s1.getAge() < 45).count();\n        System.out.println(\"年龄小于45岁的人数是：\" + count);\n    }\n}\n//输出结果\n//年龄小于45岁的人数是：2\n```\n\n#### 2.7 reduce    \n\nreduce 操作可以实现从一组值中生成一个值。在上述例子中用到的 count 、 min 和 max 方法，因为常用而被纳入标准库中。事实上，这些方法都是 reduce 操作。及早求值。\n\n![image_9186bf98.png](感受java8后lambda之美/image_9186bf98.png)\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        Integer reduce = Stream.of(1, 2, 3, 4).reduce(0, (acc, x) -> acc+ x);\n        System.out.println(reduce);\n    }\n}\n//输出结果\n//10\n```\n\n我们看得reduce接收了一个初始值为0的累加器，依次取出值与累加器相加，最后累加器的值就是最终的结果。\n\n## 三、高级集合类及收集器 \n\n### 3.1 转换成值 \n\n收集器，一种通用的、从流生成复杂值的结构。只要将它传给 collect 方法，所有的流就都可以使用它了。标准类库已经提供了一些有用的收集器，以下示例代码中的收集器都是从 java.util.stream.Collectors 类中静态导入的。\n\n```java\npublic class CollectorsTest {\n    public static void main(String[] args) {\n        List<Student> students1 = new ArrayList<>(3);\n        students1.add(new Student(\"路飞\", 23, 175));\n        students1.add(new Student(\"红发\", 40, 180));\n        students1.add(new Student(\"白胡子\", 50, 185));\n\n        OutstandingClass ostClass1 = new OutstandingClass(\"一班\", students1);\n        //复制students1，并移除一个学生\n        List<Student> students2 = new ArrayList<>(students1);\n        students2.remove(1);\n        OutstandingClass ostClass2 = new OutstandingClass(\"二班\", students2);\n        //将ostClass1、ostClass2转换为Stream\n        Stream<OutstandingClass> classStream = Stream.of(ostClass1, ostClass2);\n        OutstandingClass outstandingClass = biggestGroup(classStream);\n        System.out.println(\"人数最多的班级是：\" + outstandingClass.getName());\n\n        System.out.println(\"一班平均年龄是：\" + averageNumberOfStudent(students1));\n    }\n\n    /**\n     * 获取人数最多的班级\n     */\n    private static OutstandingClass biggestGroup(Stream<OutstandingClass> outstandingClasses) {\n        return outstandingClasses.collect(\n                maxBy(comparing(ostClass -> ostClass.getStudents().size())))\n                .orElseGet(OutstandingClass::new);\n    }\n\n    /**\n     * 计算平均年龄\n     */\n    private static double averageNumberOfStudent(List<Student> students) {\n        return students.stream().collect(averagingInt(Student::getAge));\n    }\n}\n//输出结果\n//人数最多的班级是：一班\n//一班平均年龄是：37.666666666666664\n```\n\nmaxBy或者minBy就是求最大值与最小值。  \n\n\n### 3.2 转换成块 \n\n常用的流操作是将其分解成两个集合，Collectors.partitioningBy帮我们实现了，接收一个Predicate函数式接口。\n\n![image_16155432.png](感受java8后lambda之美/image_16155432.png)\n\n将示例学生分为会唱歌与不会唱歌的两个集合。\n\n```java\npublic class PartitioningByTest {\n    public static void main(String[] args) {\n        //省略List<student> students的初始化\n        Map<Boolean, List<Student>> listMap = students.stream().collect(\n            Collectors.partitioningBy(student -> student.getSpecialities().\n                                      contains(SpecialityEnum.SING)));\n    }\n}\n```\n\n### 3.3 数据分组 \n\n数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使用任意值对数据分组。Collectors.groupingBy接收一个Function做转换。\n\n![image_79d304da.png](感受java8后lambda之美/image_79d304da.png)\n\n如图，我们使用groupingBy将根据进行分组为圆形一组，三角形一组，正方形一组。\n\n例子：根据学生第一个特长进行分组\n\n```java\npublic class GroupingByTest {\n    public static void main(String[] args) {\n        //省略List<student> students的初始化\n         Map<SpecialityEnum, List<Student>> listMap = \n             students.stream().collect(\n             Collectors.groupingBy(student -> student.getSpecialities().get(0)));\n    }\n}\n```\n\nCollectors.groupingBy与SQL 中的 group by 操作是一样的。\n\n### 3.4 字符串拼接 \n\n如果将所有学生的名字拼接起来，怎么做呢？通常只能创建一个StringBuilder，循环拼接。使用Stream，使用Collectors.joining()简单容易。\n\n```java\npublic class JoiningTest {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n         String names = students.stream()\n             .map(Student::getName).collect(Collectors.joining(\",\",\"[\",\"]\"));\n        System.out.println(names);\n    }\n}\n//输出结果\n//[路飞,红发,白胡子]\n```\n\njoining接收三个参数，第一个是分界符，第二个是前缀符，第三个是结束符。也可以不传入参数Collectors.joining()，这样就是直接拼接。  \n\n\n## 四、总结 \n\n本篇主要从实际使用讲述了常用的方法及流，使用java8可以很清晰表达你要做什么，代码也很简洁。本篇例子主要是为了讲解较为简单，大家可以去使用java8重构自己现有的代码，自行领会lambda的奥妙。\n\n本文说的Stream要组合使用才会发挥更大的功能，链式调用很迷人，根据自己的业务去做吧。","source":"_posts/感受java8后lambda之美.md","raw":"\n---\ntitle: 感受java8后lambda之美\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-04 09:41:09\npassword:\nsummary: java8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。\ntags: \n    - jdk1.8\n    - lambda\n    - 函数式编程\ncategories:\n    - java\n---\n\n\n一、引言\n\njava8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。总结就是：使用不可变值与函数，函数对不可变值进行处理，映射成另一个值。\n\n## 二、java重要的函数式接口 \n\n### 1、什么是函数式接口 \n\n函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。\n\n#### 1.1 java8自带的常用函数式接口。 \n\n![image_ec9c4260.png](感受java8后lambda之美/image_ec9c4260.png)\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Predicate<Integer> predicate = x -> x > 185;\n        Student student = new Student(\"9龙\", 23, 175);\n        System.out.println(\n            \"9龙的身高高于185吗？：\" + predicate.test(student.getStature()));\n\n        Consumer<String> consumer = System.out::println;\n        consumer.accept(\"命运由我不由天\");\n\n        Function<Student, String> function = Student::getName;\n        String name = function.apply(student);\n        System.out.println(name);\n\n        Supplier<Integer> supplier = \n            () -> Integer.valueOf(BigDecimal.TEN.toString());\n        System.out.println(supplier.get());\n\n        UnaryOperator<Boolean> unaryOperator = uglily -> !uglily;\n        Boolean apply2 = unaryOperator.apply(true);\n        System.out.println(apply2);\n\n        BinaryOperator<Integer> operator = (x, y) -> x * y;\n        Integer integer = operator.apply(2, 3);\n        System.out.println(integer);\n\n        test(() -> \"我是一个演示的函数式接口\");\n    }\n\n    /**\n     * 演示自定义函数式接口使用\n     *\n     * @param worker\n     */\n    public static void test(Worker worker) {\n        String work = worker.work();\n        System.out.println(work);\n    }\n\n    public interface Worker {\n        String work();\n    }\n}\n//9龙的身高高于185吗？：false\n//命运由我不由天\n//9龙\n//10\n//false\n//6\n//我是一个演示的函数式接口\n```\n\n以上演示了lambda接口的使用及自定义一个函数式接口并使用。下面，我们看看java8将函数式接口封装到流中如何高效的帮助我们处理集合。  \n\n\n注意：Student::getName例子中这种编写lambda表达式的方式称为方法引用。格式为ClassNmae::methodName。是不是很神奇，java8就是这么迷人。\n\n> 示例：本篇所有示例都基于以下三个类。OutstandingClass：班级；Student：学生；SpecialityEnum：特长。\n\n#### ![image_7771b4fe.png](感受java8后lambda之美/image_7771b4fe.png) \n\n#### 1.2 惰性求值与及早求值 \n\n惰性求值：只描述Stream，操作的结果也是Stream，这样的操作称为惰性求值。惰性求值可以像建造者模式一样链式使用，最后再使用及早求值得到最终结果。\n\n及早求值：得到最终的结果而不是Stream，这样的操作称为及早求值。\n\n### 2、常用的流 \n\n#### 2.1 collect(Collectors.toList()) \n\n将流转换为list。还有toSet()，toMap()等。及早求值。\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> studentList = Stream.of(new Student(\"路飞\", 22, 175),\n                new Student(\"红发\", 40, 180),\n                new Student(\"白胡子\", 50, 185)).collect(Collectors.toList());\n        System.out.println(studentList);\n    }\n}\n//输出结果\n//[Student{name='路飞', age=22, stature=175, specialities=null}, \n//Student{name='红发', age=40, stature=180, specialities=null}, \n//Student{name='白胡子', age=50, stature=185, specialities=null}]\n```\n\n#### 2.2 filter \n\n顾名思义，起过滤筛选的作用。内部就是Predicate接口。惰性求值。\n\n![image_eba0197b.png](感受java8后lambda之美/image_eba0197b.png)\n\n比如我们筛选出出身高小于180的同学。\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        List<Student> list = students.stream()\n            .filter(stu -> stu.getStature() < 180)\n            .collect(Collectors.toList());\n        System.out.println(list);\n    }\n}\n//输出结果\n//[Student{name='路飞', age=22, stature=175, specialities=null}]\n```\n\n#### 2.3 map    \n\n转换功能，内部就是Function接口。惰性求值\n\n![image_23fab375.png](感受java8后lambda之美/image_23fab375.png)\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        List<String> names = students.stream().map(student -> student.getName())\n                .collect(Collectors.toList());\n        System.out.println(names);\n    }\n}\n//输出结果\n//[路飞, 红发, 白胡子]\n```\n\n例子中将student对象转换为String对象，获取student的名字。  \n\n\n#### 2.4 flatMap \n\n将多个Stream合并为一个Stream。惰性求值\n\n![image_c1ac2536.png](感受java8后lambda之美/image_c1ac2536.png)\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        List<Student> studentList = Stream.of(students,\n                asList(new Student(\"艾斯\", 25, 183),\n                        new Student(\"雷利\", 48, 176)))\n                .flatMap(students1 -> students1.stream()).collect(Collectors.toList());\n        System.out.println(studentList);\n    }\n}\n//输出结果\n//[Student{name='路飞', age=22, stature=175, specialities=null}, \n//Student{name='红发', age=40, stature=180, specialities=null}, \n//Student{name='白胡子', age=50, stature=185, specialities=null}, \n//Student{name='艾斯', age=25, stature=183, specialities=null},\n//Student{name='雷利', age=48, stature=176, specialities=null}]\n```\n\n调用Stream.of的静态方法将两个list转换为Stream，再通过flatMap将两个流合并为一个。  \n\n\n#### 2.5 max和min \n\n我们经常会在集合中求最大或最小值，使用流就很方便。及早求值。\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        Optional<Student> max = students.stream()\n            .max(Comparator.comparing(stu -> stu.getAge()));\n        Optional<Student> min = students.stream()\n            .min(Comparator.comparing(stu -> stu.getAge()));\n        //判断是否有值\n        if (max.isPresent()) {\n            System.out.println(max.get());\n        }\n        if (min.isPresent()) {\n            System.out.println(min.get());\n        }\n    }\n}\n//输出结果\n//Student{name='白胡子', age=50, stature=185, specialities=null}\n//Student{name='路飞', age=22, stature=175, specialities=null}\n```\n\nmax、min接收一个Comparator（例子中使用java8自带的静态函数，只需要传进需要比较值即可。）并且返回一个Optional对象，该对象是java8新增的类，专门为了防止null引发的空指针异常。  \n\n\n可以使用max.isPresent()判断是否有值；可以使用max.orElse(new Student())，当值为null时就使用给定值；也可以使用max.orElseGet(() -> new Student());这需要传入一个Supplier的lambda表达式。\n\n#### 2.6 count \n\n统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n        long count = students.stream().filter(s1 -> s1.getAge() < 45).count();\n        System.out.println(\"年龄小于45岁的人数是：\" + count);\n    }\n}\n//输出结果\n//年龄小于45岁的人数是：2\n```\n\n#### 2.7 reduce    \n\nreduce 操作可以实现从一组值中生成一个值。在上述例子中用到的 count 、 min 和 max 方法，因为常用而被纳入标准库中。事实上，这些方法都是 reduce 操作。及早求值。\n\n![image_9186bf98.png](感受java8后lambda之美/image_9186bf98.png)\n\n```java\npublic class TestCase {\n    public static void main(String[] args) {\n        Integer reduce = Stream.of(1, 2, 3, 4).reduce(0, (acc, x) -> acc+ x);\n        System.out.println(reduce);\n    }\n}\n//输出结果\n//10\n```\n\n我们看得reduce接收了一个初始值为0的累加器，依次取出值与累加器相加，最后累加器的值就是最终的结果。\n\n## 三、高级集合类及收集器 \n\n### 3.1 转换成值 \n\n收集器，一种通用的、从流生成复杂值的结构。只要将它传给 collect 方法，所有的流就都可以使用它了。标准类库已经提供了一些有用的收集器，以下示例代码中的收集器都是从 java.util.stream.Collectors 类中静态导入的。\n\n```java\npublic class CollectorsTest {\n    public static void main(String[] args) {\n        List<Student> students1 = new ArrayList<>(3);\n        students1.add(new Student(\"路飞\", 23, 175));\n        students1.add(new Student(\"红发\", 40, 180));\n        students1.add(new Student(\"白胡子\", 50, 185));\n\n        OutstandingClass ostClass1 = new OutstandingClass(\"一班\", students1);\n        //复制students1，并移除一个学生\n        List<Student> students2 = new ArrayList<>(students1);\n        students2.remove(1);\n        OutstandingClass ostClass2 = new OutstandingClass(\"二班\", students2);\n        //将ostClass1、ostClass2转换为Stream\n        Stream<OutstandingClass> classStream = Stream.of(ostClass1, ostClass2);\n        OutstandingClass outstandingClass = biggestGroup(classStream);\n        System.out.println(\"人数最多的班级是：\" + outstandingClass.getName());\n\n        System.out.println(\"一班平均年龄是：\" + averageNumberOfStudent(students1));\n    }\n\n    /**\n     * 获取人数最多的班级\n     */\n    private static OutstandingClass biggestGroup(Stream<OutstandingClass> outstandingClasses) {\n        return outstandingClasses.collect(\n                maxBy(comparing(ostClass -> ostClass.getStudents().size())))\n                .orElseGet(OutstandingClass::new);\n    }\n\n    /**\n     * 计算平均年龄\n     */\n    private static double averageNumberOfStudent(List<Student> students) {\n        return students.stream().collect(averagingInt(Student::getAge));\n    }\n}\n//输出结果\n//人数最多的班级是：一班\n//一班平均年龄是：37.666666666666664\n```\n\nmaxBy或者minBy就是求最大值与最小值。  \n\n\n### 3.2 转换成块 \n\n常用的流操作是将其分解成两个集合，Collectors.partitioningBy帮我们实现了，接收一个Predicate函数式接口。\n\n![image_16155432.png](感受java8后lambda之美/image_16155432.png)\n\n将示例学生分为会唱歌与不会唱歌的两个集合。\n\n```java\npublic class PartitioningByTest {\n    public static void main(String[] args) {\n        //省略List<student> students的初始化\n        Map<Boolean, List<Student>> listMap = students.stream().collect(\n            Collectors.partitioningBy(student -> student.getSpecialities().\n                                      contains(SpecialityEnum.SING)));\n    }\n}\n```\n\n### 3.3 数据分组 \n\n数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使用任意值对数据分组。Collectors.groupingBy接收一个Function做转换。\n\n![image_79d304da.png](感受java8后lambda之美/image_79d304da.png)\n\n如图，我们使用groupingBy将根据进行分组为圆形一组，三角形一组，正方形一组。\n\n例子：根据学生第一个特长进行分组\n\n```java\npublic class GroupingByTest {\n    public static void main(String[] args) {\n        //省略List<student> students的初始化\n         Map<SpecialityEnum, List<Student>> listMap = \n             students.stream().collect(\n             Collectors.groupingBy(student -> student.getSpecialities().get(0)));\n    }\n}\n```\n\nCollectors.groupingBy与SQL 中的 group by 操作是一样的。\n\n### 3.4 字符串拼接 \n\n如果将所有学生的名字拼接起来，怎么做呢？通常只能创建一个StringBuilder，循环拼接。使用Stream，使用Collectors.joining()简单容易。\n\n```java\npublic class JoiningTest {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>(3);\n        students.add(new Student(\"路飞\", 22, 175));\n        students.add(new Student(\"红发\", 40, 180));\n        students.add(new Student(\"白胡子\", 50, 185));\n\n         String names = students.stream()\n             .map(Student::getName).collect(Collectors.joining(\",\",\"[\",\"]\"));\n        System.out.println(names);\n    }\n}\n//输出结果\n//[路飞,红发,白胡子]\n```\n\njoining接收三个参数，第一个是分界符，第二个是前缀符，第三个是结束符。也可以不传入参数Collectors.joining()，这样就是直接拼接。  \n\n\n## 四、总结 \n\n本篇主要从实际使用讲述了常用的方法及流，使用java8可以很清晰表达你要做什么，代码也很简洁。本篇例子主要是为了讲解较为简单，大家可以去使用java8重构自己现有的代码，自行领会lambda的奥妙。\n\n本文说的Stream要组合使用才会发挥更大的功能，链式调用很迷人，根据自己的业务去做吧。","slug":"感受java8后lambda之美","published":1,"updated":"2022-11-04T01:58:12.493Z","_id":"cla1u1fni00004sld4m8lg8sb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一、引言</p>\n<p>java8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。总结就是：使用不可变值与函数，函数对不可变值进行处理，映射成另一个值。</p>\n<h2 id=\"二、java重要的函数式接口\"><a href=\"#二、java重要的函数式接口\" class=\"headerlink\" title=\"二、java重要的函数式接口\"></a>二、java重要的函数式接口</h2><h3 id=\"1、什么是函数式接口\"><a href=\"#1、什么是函数式接口\" class=\"headerlink\" title=\"1、什么是函数式接口\"></a>1、什么是函数式接口</h3><p>函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。</p>\n<h4 id=\"1-1-java8自带的常用函数式接口。\"><a href=\"#1-1-java8自带的常用函数式接口。\" class=\"headerlink\" title=\"1.1 java8自带的常用函数式接口。\"></a>1.1 java8自带的常用函数式接口。</h4><p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_ec9c4260.png\" alt=\"image_ec9c4260.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> predicate <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">></span> <span class=\"token number\">185</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9龙\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"9龙的身高高于185吗？：\"</span> <span class=\"token operator\">+</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getStature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span>\n        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"命运由我不由天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> function <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> supplier <span class=\"token operator\">=</span> \n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span>TEN<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> unaryOperator <span class=\"token operator\">=</span> uglily <span class=\"token operator\">-></span> <span class=\"token operator\">!</span>uglily<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Boolean</span> apply2 <span class=\"token operator\">=</span> unaryOperator<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>apply2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> operator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> integer <span class=\"token operator\">=</span> operator<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"我是一个演示的函数式接口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 演示自定义函数式接口使用\n     *\n     * @param worker\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Worker</span> worker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> work <span class=\"token operator\">=</span> worker<span class=\"token punctuation\">.</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Worker</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//9龙的身高高于185吗？：false</span>\n<span class=\"token comment\">//命运由我不由天</span>\n<span class=\"token comment\">//9龙</span>\n<span class=\"token comment\">//10</span>\n<span class=\"token comment\">//false</span>\n<span class=\"token comment\">//6</span>\n<span class=\"token comment\">//我是一个演示的函数式接口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上演示了lambda接口的使用及自定义一个函数式接口并使用。下面，我们看看java8将函数式接口封装到流中如何高效的帮助我们处理集合。  </p>\n<p>注意：Student::getName例子中这种编写lambda表达式的方式称为方法引用。格式为ClassNmae::methodName。是不是很神奇，java8就是这么迷人。</p>\n<blockquote>\n<p>示例：本篇所有示例都基于以下三个类。OutstandingClass：班级；Student：学生；SpecialityEnum：特长。</p>\n</blockquote>\n<h4 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_7771b4fe.png\" alt=\"image_7771b4fe.png\"></h4><h4 id=\"1-2-惰性求值与及早求值\"><a href=\"#1-2-惰性求值与及早求值\" class=\"headerlink\" title=\"1.2 惰性求值与及早求值\"></a>1.2 惰性求值与及早求值</h4><p>惰性求值：只描述Stream，操作的结果也是Stream，这样的操作称为惰性求值。惰性求值可以像建造者模式一样链式使用，最后再使用及早求值得到最终结果。</p>\n<p>及早求值：得到最终的结果而不是Stream，这样的操作称为及早求值。</p>\n<h3 id=\"2、常用的流\"><a href=\"#2、常用的流\" class=\"headerlink\" title=\"2、常用的流\"></a>2、常用的流</h3><h4 id=\"2-1-collect-Collectors-toList\"><a href=\"#2-1-collect-Collectors-toList\" class=\"headerlink\" title=\"2.1 collect(Collectors.toList())\"></a>2.1 collect(Collectors.toList())</h4><p>将流转换为list。还有toSet()，toMap()等。及早求值。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> studentList <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>studentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-filter\"><a href=\"#2-2-filter\" class=\"headerlink\" title=\"2.2 filter\"></a>2.2 filter</h4><p>顾名思义，起过滤筛选的作用。内部就是Predicate接口。惰性求值。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_eba0197b.png\" alt=\"image_eba0197b.png\"></p>\n<p>比如我们筛选出出身高小于180的同学。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getStature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-3-map\"><a href=\"#2-3-map\" class=\"headerlink\" title=\"2.3 map\"></a>2.3 map</h4><p>转换功能，内部就是Function接口。惰性求值</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_23fab375.png\" alt=\"image_23fab375.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> names <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[路飞, 红发, 白胡子]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例子中将student对象转换为String对象，获取student的名字。  </p>\n<h4 id=\"2-4-flatMap\"><a href=\"#2-4-flatMap\" class=\"headerlink\" title=\"2.4 flatMap\"></a>2.4 flatMap</h4><p>将多个Stream合并为一个Stream。惰性求值</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_c1ac2536.png\" alt=\"image_c1ac2536.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> studentList <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span>\n                <span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"艾斯\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">183</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"雷利\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">176</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>students1 <span class=\"token operator\">-></span> students1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>studentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='艾斯', age=25, stature=183, specialities=null&#125;,</span>\n<span class=\"token comment\">//Student&#123;name='雷利', age=48, stature=176, specialities=null&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>调用Stream.of的静态方法将两个list转换为Stream，再通过flatMap将两个流合并为一个。  </p>\n<h4 id=\"2-5-max和min\"><a href=\"#2-5-max和min\" class=\"headerlink\" title=\"2.5 max和min\"></a>2.5 max和min</h4><p>我们经常会在集合中求最大或最小值，使用流就很方便。及早求值。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> max <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> min <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//判断是否有值</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;</span>\n<span class=\"token comment\">//Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>max、min接收一个Comparator（例子中使用java8自带的静态函数，只需要传进需要比较值即可。）并且返回一个Optional对象，该对象是java8新增的类，专门为了防止null引发的空指针异常。  </p>\n<p>可以使用max.isPresent()判断是否有值；可以使用max.orElse(new Student())，当值为null时就使用给定值；也可以使用max.orElseGet(() -&gt; new Student());这需要传入一个Supplier的lambda表达式。</p>\n<h4 id=\"2-6-count\"><a href=\"#2-6-count\" class=\"headerlink\" title=\"2.6 count\"></a>2.6 count</h4><p>统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">-></span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年龄小于45岁的人数是：\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//年龄小于45岁的人数是：2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-7-reduce\"><a href=\"#2-7-reduce\" class=\"headerlink\" title=\"2.7 reduce\"></a>2.7 reduce</h4><p>reduce 操作可以实现从一组值中生成一个值。在上述例子中用到的 count 、 min 和 max 方法，因为常用而被纳入标准库中。事实上，这些方法都是 reduce 操作。及早求值。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_9186bf98.png\" alt=\"image_9186bf98.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Integer</span> reduce <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> acc<span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reduce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们看得reduce接收了一个初始值为0的累加器，依次取出值与累加器相加，最后累加器的值就是最终的结果。</p>\n<h2 id=\"三、高级集合类及收集器\"><a href=\"#三、高级集合类及收集器\" class=\"headerlink\" title=\"三、高级集合类及收集器\"></a>三、高级集合类及收集器</h2><h3 id=\"3-1-转换成值\"><a href=\"#3-1-转换成值\" class=\"headerlink\" title=\"3.1 转换成值\"></a>3.1 转换成值</h3><p>收集器，一种通用的、从流生成复杂值的结构。只要将它传给 collect 方法，所有的流就都可以使用它了。标准类库已经提供了一些有用的收集器，以下示例代码中的收集器都是从 java.util.stream.Collectors 类中静态导入的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CollectorsTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">OutstandingClass</span> ostClass1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一班\"</span><span class=\"token punctuation\">,</span> students1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//复制students1，并移除一个学生</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>students1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students2<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OutstandingClass</span> ostClass2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二班\"</span><span class=\"token punctuation\">,</span> students2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//将ostClass1、ostClass2转换为Stream</span>\n        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">></span></span> classStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>ostClass1<span class=\"token punctuation\">,</span> ostClass2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OutstandingClass</span> outstandingClass <span class=\"token operator\">=</span> <span class=\"token function\">biggestGroup</span><span class=\"token punctuation\">(</span>classStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"人数最多的班级是：\"</span> <span class=\"token operator\">+</span> outstandingClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一班平均年龄是：\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">averageNumberOfStudent</span><span class=\"token punctuation\">(</span>students1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 获取人数最多的班级\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">OutstandingClass</span> <span class=\"token function\">biggestGroup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">></span></span> outstandingClasses<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> outstandingClasses<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>ostClass <span class=\"token operator\">-></span> ostClass<span class=\"token punctuation\">.</span><span class=\"token function\">getStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElseGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OutstandingClass</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 计算平均年龄\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">averageNumberOfStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">averagingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//人数最多的班级是：一班</span>\n<span class=\"token comment\">//一班平均年龄是：37.666666666666664</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>maxBy或者minBy就是求最大值与最小值。  </p>\n<h3 id=\"3-2-转换成块\"><a href=\"#3-2-转换成块\" class=\"headerlink\" title=\"3.2 转换成块\"></a>3.2 转换成块</h3><p>常用的流操作是将其分解成两个集合，Collectors.partitioningBy帮我们实现了，接收一个Predicate函数式接口。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_16155432.png\" alt=\"image_16155432.png\"></p>\n<p>将示例学生分为会唱歌与不会唱歌的两个集合。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PartitioningByTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//省略List&lt;student> students的初始化</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> listMap <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">partitioningBy</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSpecialities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n                                      <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpecialityEnum</span><span class=\"token punctuation\">.</span>SING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-3-数据分组\"><a href=\"#3-3-数据分组\" class=\"headerlink\" title=\"3.3 数据分组\"></a>3.3 数据分组</h3><p>数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使用任意值对数据分组。Collectors.groupingBy接收一个Function做转换。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_79d304da.png\" alt=\"image_79d304da.png\"></p>\n<p>如图，我们使用groupingBy将根据进行分组为圆形一组，三角形一组，正方形一组。</p>\n<p>例子：根据学生第一个特长进行分组</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GroupingByTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//省略List&lt;student> students的初始化</span>\n         <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpecialityEnum</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> listMap <span class=\"token operator\">=</span> \n             students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n             <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSpecialities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Collectors.groupingBy与SQL 中的 group by 操作是一样的。</p>\n<h3 id=\"3-4-字符串拼接\"><a href=\"#3-4-字符串拼接\" class=\"headerlink\" title=\"3.4 字符串拼接\"></a>3.4 字符串拼接</h3><p>如果将所有学生的名字拼接起来，怎么做呢？通常只能创建一个StringBuilder，循环拼接。使用Stream，使用Collectors.joining()简单容易。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JoiningTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token class-name\">String</span> names <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[路飞,红发,白胡子]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>joining接收三个参数，第一个是分界符，第二个是前缀符，第三个是结束符。也可以不传入参数Collectors.joining()，这样就是直接拼接。  </p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>本篇主要从实际使用讲述了常用的方法及流，使用java8可以很清晰表达你要做什么，代码也很简洁。本篇例子主要是为了讲解较为简单，大家可以去使用java8重构自己现有的代码，自行领会lambda的奥妙。</p>\n<p>本文说的Stream要组合使用才会发挥更大的功能，链式调用很迷人，根据自己的业务去做吧。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>一、引言</p>\n<p>java8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。总结就是：使用不可变值与函数，函数对不可变值进行处理，映射成另一个值。</p>\n<h2 id=\"二、java重要的函数式接口\"><a href=\"#二、java重要的函数式接口\" class=\"headerlink\" title=\"二、java重要的函数式接口\"></a>二、java重要的函数式接口</h2><h3 id=\"1、什么是函数式接口\"><a href=\"#1、什么是函数式接口\" class=\"headerlink\" title=\"1、什么是函数式接口\"></a>1、什么是函数式接口</h3><p>函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。</p>\n<h4 id=\"1-1-java8自带的常用函数式接口。\"><a href=\"#1-1-java8自带的常用函数式接口。\" class=\"headerlink\" title=\"1.1 java8自带的常用函数式接口。\"></a>1.1 java8自带的常用函数式接口。</h4><p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_ec9c4260.png\" alt=\"image_ec9c4260.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> predicate <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">></span> <span class=\"token number\">185</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9龙\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"9龙的身高高于185吗？：\"</span> <span class=\"token operator\">+</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getStature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span>\n        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"命运由我不由天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> function <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> supplier <span class=\"token operator\">=</span> \n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span>TEN<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> unaryOperator <span class=\"token operator\">=</span> uglily <span class=\"token operator\">-></span> <span class=\"token operator\">!</span>uglily<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Boolean</span> apply2 <span class=\"token operator\">=</span> unaryOperator<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>apply2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> operator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> integer <span class=\"token operator\">=</span> operator<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"我是一个演示的函数式接口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 演示自定义函数式接口使用\n     *\n     * @param worker\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Worker</span> worker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> work <span class=\"token operator\">=</span> worker<span class=\"token punctuation\">.</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Worker</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//9龙的身高高于185吗？：false</span>\n<span class=\"token comment\">//命运由我不由天</span>\n<span class=\"token comment\">//9龙</span>\n<span class=\"token comment\">//10</span>\n<span class=\"token comment\">//false</span>\n<span class=\"token comment\">//6</span>\n<span class=\"token comment\">//我是一个演示的函数式接口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上演示了lambda接口的使用及自定义一个函数式接口并使用。下面，我们看看java8将函数式接口封装到流中如何高效的帮助我们处理集合。  </p>\n<p>注意：Student::getName例子中这种编写lambda表达式的方式称为方法引用。格式为ClassNmae::methodName。是不是很神奇，java8就是这么迷人。</p>\n<blockquote>\n<p>示例：本篇所有示例都基于以下三个类。OutstandingClass：班级；Student：学生；SpecialityEnum：特长。</p>\n</blockquote>\n<h4 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_7771b4fe.png\" alt=\"image_7771b4fe.png\"></h4><h4 id=\"1-2-惰性求值与及早求值\"><a href=\"#1-2-惰性求值与及早求值\" class=\"headerlink\" title=\"1.2 惰性求值与及早求值\"></a>1.2 惰性求值与及早求值</h4><p>惰性求值：只描述Stream，操作的结果也是Stream，这样的操作称为惰性求值。惰性求值可以像建造者模式一样链式使用，最后再使用及早求值得到最终结果。</p>\n<p>及早求值：得到最终的结果而不是Stream，这样的操作称为及早求值。</p>\n<h3 id=\"2、常用的流\"><a href=\"#2、常用的流\" class=\"headerlink\" title=\"2、常用的流\"></a>2、常用的流</h3><h4 id=\"2-1-collect-Collectors-toList\"><a href=\"#2-1-collect-Collectors-toList\" class=\"headerlink\" title=\"2.1 collect(Collectors.toList())\"></a>2.1 collect(Collectors.toList())</h4><p>将流转换为list。还有toSet()，toMap()等。及早求值。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> studentList <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>studentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-filter\"><a href=\"#2-2-filter\" class=\"headerlink\" title=\"2.2 filter\"></a>2.2 filter</h4><p>顾名思义，起过滤筛选的作用。内部就是Predicate接口。惰性求值。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_eba0197b.png\" alt=\"image_eba0197b.png\"></p>\n<p>比如我们筛选出出身高小于180的同学。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getStature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-3-map\"><a href=\"#2-3-map\" class=\"headerlink\" title=\"2.3 map\"></a>2.3 map</h4><p>转换功能，内部就是Function接口。惰性求值</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_23fab375.png\" alt=\"image_23fab375.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> names <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[路飞, 红发, 白胡子]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例子中将student对象转换为String对象，获取student的名字。  </p>\n<h4 id=\"2-4-flatMap\"><a href=\"#2-4-flatMap\" class=\"headerlink\" title=\"2.4 flatMap\"></a>2.4 flatMap</h4><p>将多个Stream合并为一个Stream。惰性求值</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_c1ac2536.png\" alt=\"image_c1ac2536.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> studentList <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span>\n                <span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"艾斯\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">183</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"雷利\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">176</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>students1 <span class=\"token operator\">-></span> students1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>studentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;, </span>\n<span class=\"token comment\">//Student&#123;name='艾斯', age=25, stature=183, specialities=null&#125;,</span>\n<span class=\"token comment\">//Student&#123;name='雷利', age=48, stature=176, specialities=null&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>调用Stream.of的静态方法将两个list转换为Stream，再通过flatMap将两个流合并为一个。  </p>\n<h4 id=\"2-5-max和min\"><a href=\"#2-5-max和min\" class=\"headerlink\" title=\"2.5 max和min\"></a>2.5 max和min</h4><p>我们经常会在集合中求最大或最小值，使用流就很方便。及早求值。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> max <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> min <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//判断是否有值</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;</span>\n<span class=\"token comment\">//Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>max、min接收一个Comparator（例子中使用java8自带的静态函数，只需要传进需要比较值即可。）并且返回一个Optional对象，该对象是java8新增的类，专门为了防止null引发的空指针异常。  </p>\n<p>可以使用max.isPresent()判断是否有值；可以使用max.orElse(new Student())，当值为null时就使用给定值；也可以使用max.orElseGet(() -&gt; new Student());这需要传入一个Supplier的lambda表达式。</p>\n<h4 id=\"2-6-count\"><a href=\"#2-6-count\" class=\"headerlink\" title=\"2.6 count\"></a>2.6 count</h4><p>统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">-></span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年龄小于45岁的人数是：\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//年龄小于45岁的人数是：2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-7-reduce\"><a href=\"#2-7-reduce\" class=\"headerlink\" title=\"2.7 reduce\"></a>2.7 reduce</h4><p>reduce 操作可以实现从一组值中生成一个值。在上述例子中用到的 count 、 min 和 max 方法，因为常用而被纳入标准库中。事实上，这些方法都是 reduce 操作。及早求值。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_9186bf98.png\" alt=\"image_9186bf98.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCase</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Integer</span> reduce <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> acc<span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reduce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们看得reduce接收了一个初始值为0的累加器，依次取出值与累加器相加，最后累加器的值就是最终的结果。</p>\n<h2 id=\"三、高级集合类及收集器\"><a href=\"#三、高级集合类及收集器\" class=\"headerlink\" title=\"三、高级集合类及收集器\"></a>三、高级集合类及收集器</h2><h3 id=\"3-1-转换成值\"><a href=\"#3-1-转换成值\" class=\"headerlink\" title=\"3.1 转换成值\"></a>3.1 转换成值</h3><p>收集器，一种通用的、从流生成复杂值的结构。只要将它传给 collect 方法，所有的流就都可以使用它了。标准类库已经提供了一些有用的收集器，以下示例代码中的收集器都是从 java.util.stream.Collectors 类中静态导入的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CollectorsTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">OutstandingClass</span> ostClass1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一班\"</span><span class=\"token punctuation\">,</span> students1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//复制students1，并移除一个学生</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>students1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students2<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OutstandingClass</span> ostClass2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二班\"</span><span class=\"token punctuation\">,</span> students2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//将ostClass1、ostClass2转换为Stream</span>\n        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">></span></span> classStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>ostClass1<span class=\"token punctuation\">,</span> ostClass2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OutstandingClass</span> outstandingClass <span class=\"token operator\">=</span> <span class=\"token function\">biggestGroup</span><span class=\"token punctuation\">(</span>classStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"人数最多的班级是：\"</span> <span class=\"token operator\">+</span> outstandingClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一班平均年龄是：\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">averageNumberOfStudent</span><span class=\"token punctuation\">(</span>students1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 获取人数最多的班级\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">OutstandingClass</span> <span class=\"token function\">biggestGroup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OutstandingClass</span><span class=\"token punctuation\">></span></span> outstandingClasses<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> outstandingClasses<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>ostClass <span class=\"token operator\">-></span> ostClass<span class=\"token punctuation\">.</span><span class=\"token function\">getStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElseGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OutstandingClass</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 计算平均年龄\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">averageNumberOfStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">averagingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//人数最多的班级是：一班</span>\n<span class=\"token comment\">//一班平均年龄是：37.666666666666664</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>maxBy或者minBy就是求最大值与最小值。  </p>\n<h3 id=\"3-2-转换成块\"><a href=\"#3-2-转换成块\" class=\"headerlink\" title=\"3.2 转换成块\"></a>3.2 转换成块</h3><p>常用的流操作是将其分解成两个集合，Collectors.partitioningBy帮我们实现了，接收一个Predicate函数式接口。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_16155432.png\" alt=\"image_16155432.png\"></p>\n<p>将示例学生分为会唱歌与不会唱歌的两个集合。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PartitioningByTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//省略List&lt;student> students的初始化</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> listMap <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">partitioningBy</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSpecialities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n                                      <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpecialityEnum</span><span class=\"token punctuation\">.</span>SING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-3-数据分组\"><a href=\"#3-3-数据分组\" class=\"headerlink\" title=\"3.3 数据分组\"></a>3.3 数据分组</h3><p>数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使用任意值对数据分组。Collectors.groupingBy接收一个Function做转换。</p>\n<p><img src=\"/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_79d304da.png\" alt=\"image_79d304da.png\"></p>\n<p>如图，我们使用groupingBy将根据进行分组为圆形一组，三角形一组，正方形一组。</p>\n<p>例子：根据学生第一个特长进行分组</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GroupingByTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//省略List&lt;student> students的初始化</span>\n         <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpecialityEnum</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> listMap <span class=\"token operator\">=</span> \n             students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n             <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-></span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSpecialities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Collectors.groupingBy与SQL 中的 group by 操作是一样的。</p>\n<h3 id=\"3-4-字符串拼接\"><a href=\"#3-4-字符串拼接\" class=\"headerlink\" title=\"3.4 字符串拼接\"></a>3.4 字符串拼接</h3><p>如果将所有学生的名字拼接起来，怎么做呢？通常只能创建一个StringBuilder，循环拼接。使用Stream，使用Collectors.joining()简单容易。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JoiningTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路飞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红发\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白胡子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token class-name\">String</span> names <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//[路飞,红发,白胡子]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>joining接收三个参数，第一个是分界符，第二个是前缀符，第三个是结束符。也可以不传入参数Collectors.joining()，这样就是直接拼接。  </p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>本篇主要从实际使用讲述了常用的方法及流，使用java8可以很清晰表达你要做什么，代码也很简洁。本篇例子主要是为了讲解较为简单，大家可以去使用java8重构自己现有的代码，自行领会lambda的奥妙。</p>\n<p>本文说的Stream要组合使用才会发挥更大的功能，链式调用很迷人，根据自己的业务去做吧。</p>\n"},{"title":"在hexo中无痛使用本地图片","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-04T01:57:08.000Z","password":null,"summary":"在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。","_content":"\n## 1 起因 \n\n在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。\n\n这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。\n\nhexo 下插入图片现在大概有几个方案\n\n### 1.1 放在根目录 \n\n早期大部分的方案是把图片放在 `source/img` 下，然后在 markdown 里写 `![img](/source/img/img.png)` 。显然这样在本地的编辑器里完全不能正确识别图片的位置。\n\n### 1.2 asset-image \n\n在 hexo 2.x 时出现的插件，后来被吸纳进 `hexo 3 core` ，用法的介绍见 [资源文件夹 | Hexo][_ Hexo] 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。\n\n## 2 解决方案 \n\n[CodeFalling/hexo-asset-image][CodeFalling_hexo-asset-image]\n\n### 2.1 使用 \n\n首先确认 `_config.yml` 中有 `post_asset_folder:true` 。\n\n在 hexo 目录，执行\n\n```java\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n\n假设在\n\n```java\nMacGesture2-Publish\n├── apppicker.jpg\n├── logo.jpg\n└── rules.jpg MacGesture2-Publish.md\n```\n\n这样的目录结构（目录名和文章名一致），只要使用 `![logo](MacGesture2-Publish/logo.jpg)`就可以插入图片。\n\n生成的结构为\n\n```java\npublic/2015/10/18/MacGesture2-Publish\n├── apppicker.jpg\n├── index.html\n├── logo.jpg\n└── rules.jpg\n```\n\n同时，生成的 html 是\n\n```java\n<img src=\"/2015/10/18/MacGesture2-Publish/logo.jpg\" alt=\"logo\">\n```\n\n而不是愚蠢的\n\n```java\n<img src=\"MacGesture2-Publish/logo.jpg\" alt=\"logo\">\n```\n\n值得一提的是，这个插件对于 [CodeFalling/hexo-renderer-org][CodeFalling_hexo-renderer-org] 同样有效。","source":"_posts/在hexo中无痛使用本地图片.md","raw":"---\ntitle: 在hexo中无痛使用本地图片\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-04 09:57:08\npassword:\nsummary: 在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。\ntags:\n    hexo\ncategories:\n    - hexo\n---\n\n## 1 起因 \n\n在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。\n\n这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。\n\nhexo 下插入图片现在大概有几个方案\n\n### 1.1 放在根目录 \n\n早期大部分的方案是把图片放在 `source/img` 下，然后在 markdown 里写 `![img](/source/img/img.png)` 。显然这样在本地的编辑器里完全不能正确识别图片的位置。\n\n### 1.2 asset-image \n\n在 hexo 2.x 时出现的插件，后来被吸纳进 `hexo 3 core` ，用法的介绍见 [资源文件夹 | Hexo][_ Hexo] 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。\n\n## 2 解决方案 \n\n[CodeFalling/hexo-asset-image][CodeFalling_hexo-asset-image]\n\n### 2.1 使用 \n\n首先确认 `_config.yml` 中有 `post_asset_folder:true` 。\n\n在 hexo 目录，执行\n\n```java\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n\n假设在\n\n```java\nMacGesture2-Publish\n├── apppicker.jpg\n├── logo.jpg\n└── rules.jpg MacGesture2-Publish.md\n```\n\n这样的目录结构（目录名和文章名一致），只要使用 `![logo](MacGesture2-Publish/logo.jpg)`就可以插入图片。\n\n生成的结构为\n\n```java\npublic/2015/10/18/MacGesture2-Publish\n├── apppicker.jpg\n├── index.html\n├── logo.jpg\n└── rules.jpg\n```\n\n同时，生成的 html 是\n\n```java\n<img src=\"/2015/10/18/MacGesture2-Publish/logo.jpg\" alt=\"logo\">\n```\n\n而不是愚蠢的\n\n```java\n<img src=\"MacGesture2-Publish/logo.jpg\" alt=\"logo\">\n```\n\n值得一提的是，这个插件对于 [CodeFalling/hexo-renderer-org][CodeFalling_hexo-renderer-org] 同样有效。","slug":"在hexo中无痛使用本地图片","published":1,"updated":"2022-11-04T02:04:35.062Z","_id":"cla1uku9k0000wwld3jap61ky","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-起因\"><a href=\"#1-起因\" class=\"headerlink\" title=\"1 起因\"></a>1 起因</h2><p>在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。</p>\n<p>这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。</p>\n<p>hexo 下插入图片现在大概有几个方案</p>\n<h3 id=\"1-1-放在根目录\"><a href=\"#1-1-放在根目录\" class=\"headerlink\" title=\"1.1 放在根目录\"></a>1.1 放在根目录</h3><p>早期大部分的方案是把图片放在 <code>source/img</code> 下，然后在 markdown 里写 <code>![img](/source/img/img.png)</code> 。显然这样在本地的编辑器里完全不能正确识别图片的位置。</p>\n<h3 id=\"1-2-asset-image\"><a href=\"#1-2-asset-image\" class=\"headerlink\" title=\"1.2 asset-image\"></a>1.2 asset-image</h3><p>在 hexo 2.x 时出现的插件，后来被吸纳进 <code>hexo 3 core</code> ，用法的介绍见 [资源文件夹 | Hexo][_ Hexo] 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。</p>\n<h2 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2 解决方案\"></a>2 解决方案</h2><p>[CodeFalling/hexo-asset-image][CodeFalling_hexo-asset-image]</p>\n<h3 id=\"2-1-使用\"><a href=\"#2-1-使用\" class=\"headerlink\" title=\"2.1 使用\"></a>2.1 使用</h3><p>首先确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code> 。</p>\n<p>在 hexo 目录，执行</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">npm install https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token class-name\">CodeFalling</span><span class=\"token operator\">/</span>hexo<span class=\"token operator\">-</span>asset<span class=\"token operator\">-</span>image <span class=\"token operator\">--</span>save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设在</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">MacGesture2</span><span class=\"token operator\">-</span><span class=\"token class-name\">Publish</span>\n├── apppicker<span class=\"token punctuation\">.</span>jpg\n├── logo<span class=\"token punctuation\">.</span>jpg\n└── rules<span class=\"token punctuation\">.</span>jpg <span class=\"token class-name\">MacGesture2</span><span class=\"token operator\">-</span><span class=\"token class-name\">Publish</span><span class=\"token punctuation\">.</span>md<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样的目录结构（目录名和文章名一致），只要使用 <code>![logo](MacGesture2-Publish/logo.jpg)</code>就可以插入图片。</p>\n<p>生成的结构为</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span><span class=\"token operator\">/</span><span class=\"token number\">2015</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">18</span><span class=\"token operator\">/</span><span class=\"token class-name\">MacGesture2</span><span class=\"token operator\">-</span><span class=\"token class-name\">Publish</span>\n├── apppicker<span class=\"token punctuation\">.</span>jpg\n├── index<span class=\"token punctuation\">.</span>html\n├── logo<span class=\"token punctuation\">.</span>jpg\n└── rules<span class=\"token punctuation\">.</span>jpg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同时，生成的 html 是</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"/2015/10/18/MacGesture2-Publish/logo.jpg\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>而不是愚蠢的</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"MacGesture2-Publish/logo.jpg\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>值得一提的是，这个插件对于 [CodeFalling/hexo-renderer-org][CodeFalling_hexo-renderer-org] 同样有效。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h2 id=\"1-起因\"><a href=\"#1-起因\" class=\"headerlink\" title=\"1 起因\"></a>1 起因</h2><p>在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。</p>\n<p>这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。</p>\n<p>hexo 下插入图片现在大概有几个方案</p>\n<h3 id=\"1-1-放在根目录\"><a href=\"#1-1-放在根目录\" class=\"headerlink\" title=\"1.1 放在根目录\"></a>1.1 放在根目录</h3><p>早期大部分的方案是把图片放在 <code>source/img</code> 下，然后在 markdown 里写 <code>![img](/source/img/img.png)</code> 。显然这样在本地的编辑器里完全不能正确识别图片的位置。</p>\n<h3 id=\"1-2-asset-image\"><a href=\"#1-2-asset-image\" class=\"headerlink\" title=\"1.2 asset-image\"></a>1.2 asset-image</h3><p>在 hexo 2.x 时出现的插件，后来被吸纳进 <code>hexo 3 core</code> ，用法的介绍见 [资源文件夹 | Hexo][_ Hexo] 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。</p>\n<h2 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2 解决方案\"></a>2 解决方案</h2><p>[CodeFalling/hexo-asset-image][CodeFalling_hexo-asset-image]</p>\n<h3 id=\"2-1-使用\"><a href=\"#2-1-使用\" class=\"headerlink\" title=\"2.1 使用\"></a>2.1 使用</h3><p>首先确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code> 。</p>\n<p>在 hexo 目录，执行</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">npm install https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token class-name\">CodeFalling</span><span class=\"token operator\">/</span>hexo<span class=\"token operator\">-</span>asset<span class=\"token operator\">-</span>image <span class=\"token operator\">--</span>save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设在</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">MacGesture2</span><span class=\"token operator\">-</span><span class=\"token class-name\">Publish</span>\n├── apppicker<span class=\"token punctuation\">.</span>jpg\n├── logo<span class=\"token punctuation\">.</span>jpg\n└── rules<span class=\"token punctuation\">.</span>jpg <span class=\"token class-name\">MacGesture2</span><span class=\"token operator\">-</span><span class=\"token class-name\">Publish</span><span class=\"token punctuation\">.</span>md<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样的目录结构（目录名和文章名一致），只要使用 <code>![logo](MacGesture2-Publish/logo.jpg)</code>就可以插入图片。</p>\n<p>生成的结构为</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span><span class=\"token operator\">/</span><span class=\"token number\">2015</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">18</span><span class=\"token operator\">/</span><span class=\"token class-name\">MacGesture2</span><span class=\"token operator\">-</span><span class=\"token class-name\">Publish</span>\n├── apppicker<span class=\"token punctuation\">.</span>jpg\n├── index<span class=\"token punctuation\">.</span>html\n├── logo<span class=\"token punctuation\">.</span>jpg\n└── rules<span class=\"token punctuation\">.</span>jpg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同时，生成的 html 是</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"/2015/10/18/MacGesture2-Publish/logo.jpg\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>而不是愚蠢的</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"MacGesture2-Publish/logo.jpg\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>值得一提的是，这个插件对于 [CodeFalling/hexo-renderer-org][CodeFalling_hexo-renderer-org] 同样有效。</p>\n"},{"title":"Java8Stream实战系列","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-04T02:02:54.000Z","password":null,"summary":null,"_content":"\n就目前而言，Java8之类的仍然是主流，即使用比较广泛，其次就是JDK11之类的，毕竟对于企业研发而言，求稳第一。  \n\n\n## 一、Java8有哪些新特性？ \n\n *  1.Lambda表达式；\n *  2.新的日期API；\n *  3.引入Optional；\n *  4.新增Base64加解密API；\n *  5.接口的默认方法和静态方法；\n *  6.新增方法引用格式；\n *  7.新增Stream类；\n *  8.注解相关的改变；\n *  9.支持并行数组；\n *  10.对并发类的扩展。\n\n这里不一一讲解，只讲Stream相关系列的实战和应用。\n\n## 二、我在实践应用Stream相关的是如何提高开发效率的？ \n\n以下以实用为主(实际应用比较多的)，进行分类划分。在实际中这些通常以组合的形式进行使用，不局限于单单使用某一个。这样做的目的就是为了提高研发效率以及更快更好的解决问题。不然，使用Stream这些新特性的意义也就不存在了。\n\n\n### 1.分组 \n\n\n```java\nMap<String, List<T>> groupMapData = originData.stream().collect(Collectors.groupingBy(T::getType));\n```\n\n### 2.条件筛选 \n\n\n```java\nList<T> filterList = originData.stream().filter(a -> a.getName().equals(\"YC\")).collect(Collectors.toList());\n```\n\n### 3.排序 \n\n```java\nList<T> filterOBDHourData = originData.stream()                       .sorted(Comparator.comparing(T::getId).reversed())                       .collect(Collectors.toList());\n```\n\n  \n\n\n### 4.去重 \n\n```java\nList<T> dataVOS = originData.stream().collect(        Collectors.collectingAndThen(            Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(T::getName))), ArrayList::new)\n```\n\n### 5.数组转List \n  \n\n```java\nList<String> codes = new ArrayList<>();String[] arr = target.trim().split(\",\");if (arr.length > 0) {  codes = Stream.of(arr).collect(Collectors.toList());}\n```\n\n### 6.数据合并(含去重以及不去重) \n\n\n```java\nList<String> result = Stream.of(Lists.newArrayList(\"A\", \"B\", \"C\"), Lists.newArrayList(\"A\", \"B\")).flatMap(Collection::stream).distinct().collect(Collectors.toList());\nList<String> result = Stream.of(Lists.newArrayList(\"A\", \"B\", \"C\"), Lists.newArrayList(\"A\", \"B\")).flatMap(Collection::stream).collect(Collectors.toList());\n```\n\n  \n\n\n### 7.分页 \n\n\n```java\nList<T> dataList = originData.stream().skip((dto.getPageNum() - 1) * dto.getPageSize()).limit(dto.getPageSize()).collect(Collectors.toList());\n```\n  \n### 8.统计 \n\n\n```java\n//求最大值BigDecimal max = dataList.stream().map(T::getPrice).max((x1, x2) -> x1.compareTo(x2)).get();\n//求最小值BigDecimal min = dataList.stream().map(T::getPrice).min((x1, x2) -> x1.compareTo(x2)).get();\n//求和 空指针异常排除BigDecimal sum = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);\n//求平均值BigDecimal average = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add).divide(BigDecimal.valueOf(dataList.size()), 2, BigDecimal.ROUND_HALF_UP);\n```\n\n### 9.拼接 \n\n```java\nString nameJoin = dataList.stream().map(T::getName).collect(Collectors.joining(\",\"));\n```\n\n### 10.归集 \n\n\n```java\nMap<String, T> mapNameObject = dataList.stream().collect(Collectors.toMap(T::getName, item -> item));\n```\n\n### 11.映射Map \n\n\n```java\nList<String> strList = Arrays.asList(\"1,2,3\", \"4,5,6\");List<String> newStrList = strList.stream().flatMap(item -> {  return Arrays.stream(item.split(\",\"));}).collect(Collectors.toList());\n```\n\n### 12.搜索 \n\n\n```java\noriginData.stream().filter(data -> Boolean.FALSE ? data.getName().equals(dto.getName()) :data.getName().contains(dto    .getName())).collect(Collectors.toList());\n```\n","source":"_posts/Java8Stream实战系列.md","raw":"---\ntitle: Java8Stream实战系列\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-04 10:02:54\npassword:\nsummary:\ntags:\n    - jdk1.8\n    - stream\n    - lambda操作\ncategories:\n    - java\n---\n\n就目前而言，Java8之类的仍然是主流，即使用比较广泛，其次就是JDK11之类的，毕竟对于企业研发而言，求稳第一。  \n\n\n## 一、Java8有哪些新特性？ \n\n *  1.Lambda表达式；\n *  2.新的日期API；\n *  3.引入Optional；\n *  4.新增Base64加解密API；\n *  5.接口的默认方法和静态方法；\n *  6.新增方法引用格式；\n *  7.新增Stream类；\n *  8.注解相关的改变；\n *  9.支持并行数组；\n *  10.对并发类的扩展。\n\n这里不一一讲解，只讲Stream相关系列的实战和应用。\n\n## 二、我在实践应用Stream相关的是如何提高开发效率的？ \n\n以下以实用为主(实际应用比较多的)，进行分类划分。在实际中这些通常以组合的形式进行使用，不局限于单单使用某一个。这样做的目的就是为了提高研发效率以及更快更好的解决问题。不然，使用Stream这些新特性的意义也就不存在了。\n\n\n### 1.分组 \n\n\n```java\nMap<String, List<T>> groupMapData = originData.stream().collect(Collectors.groupingBy(T::getType));\n```\n\n### 2.条件筛选 \n\n\n```java\nList<T> filterList = originData.stream().filter(a -> a.getName().equals(\"YC\")).collect(Collectors.toList());\n```\n\n### 3.排序 \n\n```java\nList<T> filterOBDHourData = originData.stream()                       .sorted(Comparator.comparing(T::getId).reversed())                       .collect(Collectors.toList());\n```\n\n  \n\n\n### 4.去重 \n\n```java\nList<T> dataVOS = originData.stream().collect(        Collectors.collectingAndThen(            Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(T::getName))), ArrayList::new)\n```\n\n### 5.数组转List \n  \n\n```java\nList<String> codes = new ArrayList<>();String[] arr = target.trim().split(\",\");if (arr.length > 0) {  codes = Stream.of(arr).collect(Collectors.toList());}\n```\n\n### 6.数据合并(含去重以及不去重) \n\n\n```java\nList<String> result = Stream.of(Lists.newArrayList(\"A\", \"B\", \"C\"), Lists.newArrayList(\"A\", \"B\")).flatMap(Collection::stream).distinct().collect(Collectors.toList());\nList<String> result = Stream.of(Lists.newArrayList(\"A\", \"B\", \"C\"), Lists.newArrayList(\"A\", \"B\")).flatMap(Collection::stream).collect(Collectors.toList());\n```\n\n  \n\n\n### 7.分页 \n\n\n```java\nList<T> dataList = originData.stream().skip((dto.getPageNum() - 1) * dto.getPageSize()).limit(dto.getPageSize()).collect(Collectors.toList());\n```\n  \n### 8.统计 \n\n\n```java\n//求最大值BigDecimal max = dataList.stream().map(T::getPrice).max((x1, x2) -> x1.compareTo(x2)).get();\n//求最小值BigDecimal min = dataList.stream().map(T::getPrice).min((x1, x2) -> x1.compareTo(x2)).get();\n//求和 空指针异常排除BigDecimal sum = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);\n//求平均值BigDecimal average = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add).divide(BigDecimal.valueOf(dataList.size()), 2, BigDecimal.ROUND_HALF_UP);\n```\n\n### 9.拼接 \n\n```java\nString nameJoin = dataList.stream().map(T::getName).collect(Collectors.joining(\",\"));\n```\n\n### 10.归集 \n\n\n```java\nMap<String, T> mapNameObject = dataList.stream().collect(Collectors.toMap(T::getName, item -> item));\n```\n\n### 11.映射Map \n\n\n```java\nList<String> strList = Arrays.asList(\"1,2,3\", \"4,5,6\");List<String> newStrList = strList.stream().flatMap(item -> {  return Arrays.stream(item.split(\",\"));}).collect(Collectors.toList());\n```\n\n### 12.搜索 \n\n\n```java\noriginData.stream().filter(data -> Boolean.FALSE ? data.getName().equals(dto.getName()) :data.getName().contains(dto    .getName())).collect(Collectors.toList());\n```\n","slug":"Java8Stream实战系列","published":1,"updated":"2022-11-04T02:04:32.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla1ut5bv00006llddor7gqde","content":"<p>就目前而言，Java8之类的仍然是主流，即使用比较广泛，其次就是JDK11之类的，毕竟对于企业研发而言，求稳第一。  </p>\n<h2 id=\"一、Java8有哪些新特性？\"><a href=\"#一、Java8有哪些新特性？\" class=\"headerlink\" title=\"一、Java8有哪些新特性？\"></a>一、Java8有哪些新特性？</h2><ul>\n<li> 1.Lambda表达式；</li>\n<li> 2.新的日期API；</li>\n<li> 3.引入Optional；</li>\n<li> 4.新增Base64加解密API；</li>\n<li> 5.接口的默认方法和静态方法；</li>\n<li> 6.新增方法引用格式；</li>\n<li> 7.新增Stream类；</li>\n<li> 8.注解相关的改变；</li>\n<li> 9.支持并行数组；</li>\n<li> 10.对并发类的扩展。</li>\n</ul>\n<p>这里不一一讲解，只讲Stream相关系列的实战和应用。</p>\n<h2 id=\"二、我在实践应用Stream相关的是如何提高开发效率的？\"><a href=\"#二、我在实践应用Stream相关的是如何提高开发效率的？\" class=\"headerlink\" title=\"二、我在实践应用Stream相关的是如何提高开发效率的？\"></a>二、我在实践应用Stream相关的是如何提高开发效率的？</h2><p>以下以实用为主(实际应用比较多的)，进行分类划分。在实际中这些通常以组合的形式进行使用，不局限于单单使用某一个。这样做的目的就是为了提高研发效率以及更快更好的解决问题。不然，使用Stream这些新特性的意义也就不存在了。</p>\n<h3 id=\"1-分组\"><a href=\"#1-分组\" class=\"headerlink\" title=\"1.分组\"></a>1.分组</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> groupMapData <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-条件筛选\"><a href=\"#2-条件筛选\" class=\"headerlink\" title=\"2.条件筛选\"></a>2.条件筛选</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> filterList <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-排序\"><a href=\"#3-排序\" class=\"headerlink\" title=\"3.排序\"></a>3.排序</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> filterOBDHourData <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                       <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                       <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-去重\"><a href=\"#4-去重\" class=\"headerlink\" title=\"4.去重\"></a>4.去重</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataVOS <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>        <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">collectingAndThen</span><span class=\"token punctuation\">(</span>            <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-数组转List\"><a href=\"#5-数组转List\" class=\"headerlink\" title=\"5.数组转List\"></a>5.数组转List</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> codes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  codes <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-数据合并-含去重以及不去重\"><a href=\"#6-数据合并-含去重以及不去重\" class=\"headerlink\" title=\"6.数据合并(含去重以及不去重)\"></a>6.数据合并(含去重以及不去重)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-分页\"><a href=\"#7-分页\" class=\"headerlink\" title=\"7.分页\"></a>7.分页</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataList <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">.</span><span class=\"token function\">getPageNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> dto<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"8-统计\"><a href=\"#8-统计\" class=\"headerlink\" title=\"8.统计\"></a>8.统计</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//求最大值BigDecimal max = dataList.stream().map(T::getPrice).max((x1, x2) -> x1.compareTo(x2)).get();</span>\n<span class=\"token comment\">//求最小值BigDecimal min = dataList.stream().map(T::getPrice).min((x1, x2) -> x1.compareTo(x2)).get();</span>\n<span class=\"token comment\">//求和 空指针异常排除BigDecimal sum = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);</span>\n<span class=\"token comment\">//求平均值BigDecimal average = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add).divide(BigDecimal.valueOf(dataList.size()), 2, BigDecimal.ROUND_HALF_UP);</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9-拼接\"><a href=\"#9-拼接\" class=\"headerlink\" title=\"9.拼接\"></a>9.拼接</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> nameJoin <span class=\"token operator\">=</span> dataList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"10-归集\"><a href=\"#10-归集\" class=\"headerlink\" title=\"10.归集\"></a>10.归集</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> mapNameObject <span class=\"token operator\">=</span> dataList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> item <span class=\"token operator\">-></span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"11-映射Map\"><a href=\"#11-映射Map\" class=\"headerlink\" title=\"11.映射Map\"></a>11.映射Map</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strList <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1,2,3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4,5,6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> newStrList <span class=\"token operator\">=</span> strList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"12-搜索\"><a href=\"#12-搜索\" class=\"headerlink\" title=\"12.搜索\"></a>12.搜索</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>FALSE <span class=\"token operator\">?</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>dto    <span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>就目前而言，Java8之类的仍然是主流，即使用比较广泛，其次就是JDK11之类的，毕竟对于企业研发而言，求稳第一。  </p>\n<h2 id=\"一、Java8有哪些新特性？\"><a href=\"#一、Java8有哪些新特性？\" class=\"headerlink\" title=\"一、Java8有哪些新特性？\"></a>一、Java8有哪些新特性？</h2><ul>\n<li> 1.Lambda表达式；</li>\n<li> 2.新的日期API；</li>\n<li> 3.引入Optional；</li>\n<li> 4.新增Base64加解密API；</li>\n<li> 5.接口的默认方法和静态方法；</li>\n<li> 6.新增方法引用格式；</li>\n<li> 7.新增Stream类；</li>\n<li> 8.注解相关的改变；</li>\n<li> 9.支持并行数组；</li>\n<li> 10.对并发类的扩展。</li>\n</ul>\n<p>这里不一一讲解，只讲Stream相关系列的实战和应用。</p>\n<h2 id=\"二、我在实践应用Stream相关的是如何提高开发效率的？\"><a href=\"#二、我在实践应用Stream相关的是如何提高开发效率的？\" class=\"headerlink\" title=\"二、我在实践应用Stream相关的是如何提高开发效率的？\"></a>二、我在实践应用Stream相关的是如何提高开发效率的？</h2><p>以下以实用为主(实际应用比较多的)，进行分类划分。在实际中这些通常以组合的形式进行使用，不局限于单单使用某一个。这样做的目的就是为了提高研发效率以及更快更好的解决问题。不然，使用Stream这些新特性的意义也就不存在了。</p>\n<h3 id=\"1-分组\"><a href=\"#1-分组\" class=\"headerlink\" title=\"1.分组\"></a>1.分组</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> groupMapData <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-条件筛选\"><a href=\"#2-条件筛选\" class=\"headerlink\" title=\"2.条件筛选\"></a>2.条件筛选</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> filterList <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-排序\"><a href=\"#3-排序\" class=\"headerlink\" title=\"3.排序\"></a>3.排序</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> filterOBDHourData <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                       <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                       <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-去重\"><a href=\"#4-去重\" class=\"headerlink\" title=\"4.去重\"></a>4.去重</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataVOS <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>        <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">collectingAndThen</span><span class=\"token punctuation\">(</span>            <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-数组转List\"><a href=\"#5-数组转List\" class=\"headerlink\" title=\"5.数组转List\"></a>5.数组转List</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> codes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  codes <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-数据合并-含去重以及不去重\"><a href=\"#6-数据合并-含去重以及不去重\" class=\"headerlink\" title=\"6.数据合并(含去重以及不去重)\"></a>6.数据合并(含去重以及不去重)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-分页\"><a href=\"#7-分页\" class=\"headerlink\" title=\"7.分页\"></a>7.分页</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataList <span class=\"token operator\">=</span> originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">.</span><span class=\"token function\">getPageNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> dto<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"8-统计\"><a href=\"#8-统计\" class=\"headerlink\" title=\"8.统计\"></a>8.统计</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//求最大值BigDecimal max = dataList.stream().map(T::getPrice).max((x1, x2) -> x1.compareTo(x2)).get();</span>\n<span class=\"token comment\">//求最小值BigDecimal min = dataList.stream().map(T::getPrice).min((x1, x2) -> x1.compareTo(x2)).get();</span>\n<span class=\"token comment\">//求和 空指针异常排除BigDecimal sum = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);</span>\n<span class=\"token comment\">//求平均值BigDecimal average = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add).divide(BigDecimal.valueOf(dataList.size()), 2, BigDecimal.ROUND_HALF_UP);</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9-拼接\"><a href=\"#9-拼接\" class=\"headerlink\" title=\"9.拼接\"></a>9.拼接</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> nameJoin <span class=\"token operator\">=</span> dataList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"10-归集\"><a href=\"#10-归集\" class=\"headerlink\" title=\"10.归集\"></a>10.归集</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> mapNameObject <span class=\"token operator\">=</span> dataList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> item <span class=\"token operator\">-></span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"11-映射Map\"><a href=\"#11-映射Map\" class=\"headerlink\" title=\"11.映射Map\"></a>11.映射Map</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strList <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1,2,3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4,5,6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> newStrList <span class=\"token operator\">=</span> strList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"12-搜索\"><a href=\"#12-搜索\" class=\"headerlink\" title=\"12.搜索\"></a>12.搜索</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">originData<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>FALSE <span class=\"token operator\">?</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>dto    <span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"45个日常用git合代码的经典操作场景","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-04T02:49:16.000Z","password":null,"summary":"下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。","_content":"  \n\n\ngit对于大家应该都不太陌生，熟练使用git已经成为程序员的一项基本技能，尽管在工作中有诸如 `Sourcetree`这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的git命令。  \n\n\n下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。  \n\n\n### 我刚才提交了什么? \n\n如果你用 `git commit -a` 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前`HEAD`上的最近一次的提交(commit):\n\n```java\n(main)$ git show\n```\n\n或者\n\n```java\n$ git log -n1 -p\n```\n\n### 我的提交信息(commit message)写错了 \n\n如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):\n\n```java\n$ git commit --amend --only\n```\n\n这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:\n\n```java\n$ git commit --amend --only -m 'xxxxxxx'\n```\n\n如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。\n\n### 我提交(commit)里的用户名和邮箱不对 \n\n如果这只是单个提交(commit)，修改它：\n\n```java\n$ git commit --amend --author \"New Authorname <authoremail@mydomain.com>\"\n```\n\n如果你需要修改所有历史, 参考 'git filter-branch'的指南页.\n\n### 我想从一个提交(commit)里移除一个文件 \n\n通过下面的方法，从一个提交(commit)里移除一个文件:\n\n```java\n$ git checkout HEAD^ myfile\n$ git add -A\n$ git commit --amend\n```\n\n这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。\n\n### 我想删除我的的最后一次提交(commit) \n\n如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。\n\n```java\n$ git reset HEAD^ --hard\n$ git push -f [remote] [branch]\n```\n\n如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):\n\n```java\n(my-branch*)$ git reset --soft HEAD@{1}\n```\n\n这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 `git revert SHAofBadCommit`， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 `git push -f`。\n\n### 删除任意提交(commit) \n\n同样的警告：不到万不得已的时候不要这么做.\n\n```java\n$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT\n$ git push -f [remote] [branch]\n```\n\n或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。\n\n### 我尝试推一个修正后的提交(amended commit)到远程，但是报错： \n\n```java\nTo https://github.com/yourusername/repo.git\n! [rejected]        mybranch -> mybranch (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/tanay1337/webmaker.org.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n\n注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (`-f`)。注意 – 总是 确保你指明一个分支!\n\n```java\n(my-branch)$ git push origin mybranch -f\n```\n\n一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。\n\n### 我意外的做了一次硬重置(hard reset)，我想找回我的内容 \n\n如果你意外的做了 `git reset --hard`, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。\n\n```java\n(main)$ git reflog\n```\n\n你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:\n\n```java\n(main)$ git reset --hard SHA1234\n```\n\n这样就完成了。\n\n## 暂存(Staging) \n\n### 我需要把暂存的内容添加到上一次的提交(commit) \n\n```java\n(my-branch*)$ git commit --amend\n```\n\n### 我想要暂存一个新文件的一部分，而不是这个文件的全部 \n\n一般来说, 如果你想暂存一个文件的一部分, 你可这样做:\n\n```java\n$ git add --patch filename.x\n```\n\n`-p` 简写。这会打开交互模式， 你将能够用 `s` 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:\n\n```java\n$ git add -N filename.x\n```\n\n然后, 你需要用 `e` 选项来手动选择需要添加的行，执行 `git diff --cached` 将会显示哪些行暂存了哪些行只是保存在本地了。\n\n### 我想把在一个文件里的变化(changes)加到两个提交(commit)里 \n\n`git add` 会把整个文件加入到一个提交. `git add -p` 允许交互式的选择你想要提交的部分.\n\n### 我想把暂存的内容变成未暂存，把未暂存的内容暂存起来 \n\n多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。\n\n```java\n$ git commit -m \"WIP\"\n$ git add .\n$ git stash\n$ git reset HEAD^\n$ git stash pop --index 0\n```\n\n注意1: 这里使用`pop`仅仅是因为想尽可能保持幂等。注意2: 假如你不加上`--index`你会把暂存的文件标记为为存储。\n\n## 未暂存(Unstaged)的内容 \n\n### 我想把未暂存的内容移动到一个新分支 \n\n```java\n$ git checkout -b my-branch\n```\n\n### 我想把未暂存的内容移动到另一个已存在的分支 \n\n```java\n$ git stash\n$ git checkout my-branch\n$ git stash pop\n```\n\n### 我想丢弃本地未提交的变化(uncommitted changes) \n\n如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：\n\n```java\n# one commit\n(my-branch)$ git reset --hard HEAD^\n# two commits\n(my-branch)$ git reset --hard HEAD^^\n# four commits\n(my-branch)$ git reset --hard HEAD~4\n# or\n(main)$ git checkout -f\n```\n\n重置某个特殊的文件, 你可以用文件名做为参数:\n\n```java\n$ git reset filename\n```\n\n### 我想丢弃某些未暂存的内容 \n\n如果你想丢弃工作拷贝中的一部分内容，而不是全部。\n\n签出(checkout)不需要的内容，保留需要的。\n\n```java\n$ git checkout -p\n# Answer y to all of the snippets you want to drop\n```\n\n另外一个方法是使用 `stash`， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。\n\n```java\n$ git stash -p\n# Select all of the snippets you want to save\n$ git reset --hard\n$ git stash pop\n```\n\n或者, stash 你不需要的部分, 然后stash drop。\n\n```java\n$ git stash -p\n# Select all of the snippets you don't want to save\n$ git stash drop\n```\n\n## 分支(Branches) \n\n### 我从错误的分支拉取了内容，或把内容拉取到了错误的分支 \n\n这是另外一种使用 `git reflog` 情况，找到在这次错误拉(pull) 之前HEAD的指向。\n\n```java\n(main)$ git reflog\nab7555f HEAD@{0}: pull origin wrong-branch: Fast-forward\nc5bc55a HEAD@{1}: checkout: checkout message goes here\n```\n\n重置分支到你所需的提交(desired commit):\n\n```java\n$ git reset --hard c5bc55a\n```\n\n完成。\n\n### 我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致 \n\n先确认你没有推(push)你的内容到远程。\n\n`git status` 会显示你领先(ahead)源(origin)多少个提交:\n\n```java\n(my-branch)$ git status\n# On branch my-branch\n# Your branch is ahead of 'origin/my-branch' by 2 commits.\n#   (use \"git push\" to publish your local commits)\n#\n```\n\n一种方法是:\n\n```java\n(main)$ git reset --hard origin/my-branch\n```\n\n### 我需要提交到一个新分支，但错误的提交到了main \n\n在main下创建一个新分支，不切换到新分支,仍在main下:\n\n```java\n(main)$ git branch my-branch\n```\n\n把main分支重置到前一个提交:\n\n```java\n(main)$ git reset --hard HEAD^\n```\n\n`HEAD^` 是 `HEAD^1` 的简写，你可以通过指定要设置的`HEAD`来进一步重置。\n\n或者, 如果你不想使用 `HEAD^`, 找到你想重置到的提交(commit)的hash(`git log` 能够完成)， 然后重置到这个hash。使用`git push` 同步内容到远程。\n\n例如, main分支想重置到的提交的hash为`a13b85e`:\n\n```java\n(main)$ git reset --hard a13b85e\nHEAD is now at a13b85e\n```\n\n签出(checkout)刚才新建的分支继续工作:\n\n```java\n(main)$ git checkout my-branch\n```\n\n### 我想保留来自另外一个ref-ish的整个文件 \n\n假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:微信搜索公众号：Java后端编程，回复：java 领取资料 。\n\n```java\n(solution)$ git add -A && git commit -m \"Adding all changes from this spike into one big commit.\"\n```\n\n当你想要把它放到一个分支里 (可能是`feature`, 或者 `develop`), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。\n\n假设你有:\n\n *  分支 `solution`, 拥有原型方案， 领先 `develop` 分支。\n *  分支 `develop`, 在这里你应用原型方案的一些内容。\n\n我去可以通过把内容拿到你的分支里，来解决这个问题:\n\n```java\n(develop)$ git checkout solution -- file1.txt\n```\n\n这会把这个文件内容从分支 `solution` 拿到分支 `develop` 里来:\n\n```java\n# On branch develop\n# Your branch is up-to-date with 'origin/develop'.\n# Changes to be committed:\n#  (use \"git reset HEAD <file>...\" to unstage)\n#\n#        modified:   file1.txt\n```\n\n然后, 正常提交。\n\nNote: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.\n\n### 我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里 \n\n假设你有一个`main`分支， 执行`git log`, 你看到你做过两次提交:\n\n```java\n(main)$ git log\n\ncommit e3851e817c451cc36f2e6f3049db528415e3c114\nAuthor: Alex Lee <alexlee@example.com>\nDate:   Tue Jul 22 15:39:27 2014 -0400\n\n    Bug #21 - Added CSRF protection\n\ncommit 5ea51731d150f7ddc4a365437931cd8be3bf3131\nAuthor: Alex Lee <alexlee@example.com>\nDate:   Tue Jul 22 15:39:12 2014 -0400\n\n    Bug #14 - Fixed spacing on title\n\ncommit a13b85e984171c6e2a1729bb061994525f626d14\nAuthor: Aki Rose <akirose@example.com>\nDate:   Tue Jul 21 01:12:48 2014 -0400\n\n    First commit\n```\n\n让我们用提交hash(commit hash)标记bug (`e3851e8` for \\#21, `5ea5173` for \\#14).\n\n首先, 我们把`main`分支重置到正确的提交(`a13b85e`):\n\n```java\n(main)$ git reset --hard a13b85e\nHEAD is now at a13b85e\n```\n\n现在, 我们对 bug \\#21 创建一个新的分支:\n\n```java\n(main)$ git checkout -b 21\n(21)$\n```\n\n接着, 我们用 cherry-pick 把对bug \\#21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。\n\n```java\n(21)$ git cherry-pick e3851e8\n```\n\n这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.\n\n再者， 我们为bug \\#14 创建一个新的分支, 也基于`main`分支\n\n```java\n(21)$ git checkout main\n(main)$ git checkout -b 14\n(14)$\n```\n\n最后, 为 bug \\#14 执行 `cherry-pick`:\n\n```java\n(14)$ git cherry-pick 5ea5173\n```\n\n### 我想删除上游(upstream)分支被删除了的本地分支 \n\n一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（[IDEA 中玩转 Git][IDEA _ Git]）。\n\n```java\n$ git fetch -p\n```\n\n### 我不小心删除了我的分支 \n\n如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:\n\n```java\n(main)$ git checkout -b my-branch\n(my-branch)$ git branch\n(my-branch)$ touch foo.txt\n(my-branch)$ ls\nREADME.md foo.txt\n```\n\n添加文件并做一次提交\n\n```java\n(my-branch)$ git add .\n(my-branch)$ git commit -m 'foo.txt added'\n(my-branch)$ foo.txt added\n 1 files changed, 1 insertions(+)\n create mode 100644 foo.txt\n(my-branch)$ git log\n\ncommit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012\nAuthor: siemiatj <siemiatj@example.com>\nDate:   Wed Jul 30 00:34:10 2014 +0200\n\n    foo.txt added\n\ncommit 69204cdf0acbab201619d95ad8295928e7f411d5\nAuthor: Kate Hudson <katehudson@example.com>\nDate:   Tue Jul 29 13:14:46 2014 -0400\n\n    Fixes #6: Force pushing after amending commits\n```\n\n现在我们切回到主(main)分支，‘不小心的’删除`my-branch`分支\n\n```java\n(my-branch)$ git checkout main\nSwitched to branch 'main'\nYour branch is up-to-date with 'origin/main'.\n(main)$ git branch -D my-branch\nDeleted branch my-branch (was 4e3cd85).\n(main)$ echo oh noes, deleted my branch!\noh noes, deleted my branch!\n```\n\n在这时候你应该想起了`reflog`, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。\n\n```java\n(main)$ git reflog\n69204cd HEAD@{0}: checkout: moving from my-branch to main\n4e3cd85 HEAD@{1}: commit: foo.txt added\n69204cd HEAD@{2}: checkout: moving from main to my-branch\n```\n\n正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。\n\n```java\n(main)$ git checkout -b my-branch-help\nSwitched to a new branch 'my-branch-help'\n(my-branch-help)$ git reset --hard 4e3cd85\nHEAD is now at 4e3cd85 foo.txt added\n(my-branch-help)$ ls\nREADME.md foo.txt\n```\n\n看! 我们把删除的文件找回来了。Git的 `reflog` 在rebasing出错的时候也是同样有用的。\n\n### 我想删除一个分支 \n\n删除一个远程分支:\n\n```java\n(main)$ git push origin --delete my-branch\n```\n\n你也可以:\n\n```java\n(main)$ git push origin :my-branch\n```\n\n删除一个本地分支:\n\n```java\n(main)$ git branch -D my-branch\n```\n\n### 我想从别人正在工作的远程分支签出(checkout)一个分支 \n\n首先, 从远程拉取(fetch) 所有分支:\n\n```java\n(main)$ git fetch --all\n```\n\n假设你想要从远程的`daves`分支签出到本地的`daves`\n\n```java\n(main)$ git checkout --track origin/daves\nBranch daves set up to track remote branch daves from origin.\nSwitched to a new branch 'daves'\n```\n\n(`--track` 是 `git checkout -b [branch] [remotename]/[branch]` 的简写)\n\n这样就得到了一个`daves`分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.\n\n## Rebasing 和合并(Merging) \n\n### 我想撤销rebase/merge \n\n你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG\\_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。\n\n```java\n(my-branch)$ git reset --hard ORIG_HEAD\n```\n\n### 我已经rebase过, 但是我不想强推(force push) \n\n不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:\n\n```java\n(main)$ git checkout my-branch\n(my-branch)$ git rebase -i main\n(my-branch)$ git checkout main\n(main)$ git merge --ff-only my-branch\n```\n\n### 我需要组合(combine)几个提交(commit) \n\n假设你的工作分支将会做对于 `main` 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:\n\n```java\n(my-branch)$ git reset --soft main\n(my-branch)$ git commit -am \"New awesome feature\"\n```\n\n如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):\n\n```java\n(my-branch)$ git rebase -i main\n```\n\n如果没有相对的其它分支， 你将不得不相对自己的`HEAD` 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于`HEAD~2` 进行rebase， 组合最近3次提交(commit), 相对于`HEAD~3`, 等等。\n\n```java\n(main)$ git rebase -i HEAD~2\n```\n\n在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:\n\n```java\npick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\npick b729ad5 fixup\npick e3851e8 another fix\n\n# Rebase 8074d12..b729ad5 onto 8074d12\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n\n所有以 `#` 开头的行都是注释, 不会影响 rebase.\n\n然后，你可以用任何上面命令列表的命令替换 `pick`, 你也可以通过删除对应的行来删除一个提交(commit)。\n\n例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 `f`:\n\n```java\npick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\nf b729ad5 fixup\nf e3851e8 another fix\n```\n\n如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个`r`，或者更简单的用`s` 替代 `f`:\n\n```java\npick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\ns b729ad5 fixup\ns e3851e8 another fix\n```\n\n你可以在接下来弹出的文本提示框里重命名提交(commit)。\n\n```java\nNewer, awesomer features\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# rebase in progress; onto 8074d12\n# You are currently editing a commit while rebasing branch 'main' on '8074d12'.\n#\n# Changes to be committed:\n#\tmodified:   README.md\n#\n```\n\n如果成功了, 你应该看到类似下面的内容:\n\n```java\n(main)$ Successfully rebased and updated refs/heads/main.\n```\n\n#### 安全合并(merging)策略 \n\n`--no-commit` 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。`no-ff` 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多Git资料，参见[IDEA 中如何完成 Git 版本回退？][IDEA _ Git 1]）。\n\n```java\n(main)$ git merge --no-ff --no-commit my-branch\n```\n\n#### 我需要将一个分支合并成一个提交(commit) \n\n```java\n(main)$ git merge --squash my-branch\n```\n\n#### 我只想组合(combine)未推的提交(unpushed commit) \n\n有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。\n\n```java\n(main)$ git rebase -i @{u}\n```\n\n这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。\n\n### 检查是否分支上的所有提交(commit)都合并(merge)过了 \n\n检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:\n\n```java\n(main)$ git log --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll\n```\n\n这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:\n\n```java\n(main)$ git log main ^feature/120-on-scroll --no-merges\n```\n\n### 交互式rebase(interactive rebase)可能出现的问题 \n\n#### 这个rebase 编辑屏幕出现'noop' \n\n如果你看到的是这样:\n\n```java\nnoop\n```\n\n这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:\n\n *  检查确保主(main)分支没有问题\n *  rebase `HEAD~2` 或者更早\n\n#### 有冲突的情况 \n\n如果你不能成功的完成rebase, 你可能必须要解决冲突。\n\n首先执行 `git status` 找出哪些文件有冲突:\n\n```java\n(my-branch)$ git status\nOn branch my-branch\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n modified:   README.md\n```\n\n在这个例子里面, `README.md` 有冲突。打开这个文件找到类似下面的内容:\n\n```java\n<<<<<<< HEAD\n   some code\n   =========\n   some code\n   >>>>>>> new-commit\n```\n\n你需要解决新提交的代码(示例里, 从中间`==`线到`new-commit`的地方)与`HEAD` 之间不一样的地方.\n\n有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):\n\n```java\n(main*)$ git mergetool -t opendiff\n```\n\n在你解决完所有冲突和测试过后, `git add` 变化了的(changed)文件, 然后用`git rebase --continue` 继续rebase。\n\n```java\n(my-branch)$ git add README.md\n(my-branch)$ git rebase --continue\n```\n\n如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行`git rebase --skip`。\n\n任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:\n\n```java\n(my-branch)$ git rebase --abort\n```\n\n## Stash \n\n### 暂存所有改动 \n\n暂存你工作目录下的所有改动\n\n```java\n$ git stash\n```\n\n你可以使用`-u`来排除一些文件\n\n```java\n$ git stash -u\n```\n\n### 暂存指定文件 \n\n假设你只想暂存某一个文件\n\n```java\n$ git stash push working-directory-path/filename.ext\n```\n\n假设你想暂存多个文件\n\n```java\n$ git stash push working-directory-path/filename1.ext working-directory-path/filename2.ext\n```\n\n### 暂存时记录消息 \n\n这样你可以在`list`时看到它\n\n```java\n$ git stash save <message>\n```\n\n或\n\n```java\n$ git stash push -m <message>\n```\n\n### 使用某个指定暂存 \n\n首先你可以查看你的`stash`记录\n\n```java\n$ git stash list\n```\n\n然后你可以`apply`某个`stash`\n\n```java\n$ git stash apply \"stash@{n}\"\n```\n\n此处， 'n'是`stash`在栈中的位置，最上层的`stash`会是0\n\n除此之外，也可以使用时间标记(假如你能记得的话)。\n\n```java\n$ git stash apply \"stash@{2.hours.ago}\"\n```\n\n### 暂存时保留未暂存的内容 \n\n你需要手动create一个`stash commit`， 然后使用`git stash store`。\n\n```java\n$ git stash create\n$ git stash store -m \"commit-message\" CREATED_SHA1\n```\n\n## 杂项(Miscellaneous Objects) \n\n### 克隆所有子模块 \n\n```java\n$ git clone --recursive git://github.com/foo/bar.git\n```\n\n如果已经克隆了:\n\n```java\n$ git submodule update --init --recursive\n```\n\n### 删除标签(tag) \n\n```java\n$ git tag -d <tag_name>\n$ git push <remote> :refs/tags/<tag_name>\n```\n\n### 恢复已删除标签(tag) \n\n如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):\n\n```java\n$ git fsck --unreachable | grep tag\n```\n\n记下这个标签(tag)的hash，然后用Git的 update-ref\n\n```java\n$ git update-ref refs/tags/<tag_name> <hash>\n```\n\n这时你的标签(tag)应该已经恢复了。\n\n### 已删除补丁(patch) \n\n如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 `git am`。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。\n\n做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。\n\n## 跟踪文件(Tracking Files) \n\n### 我只想改变一个文件名字的大小写，而不修改内容 \n\n```java\n(main)$ git mv --force myfile MyFile\n```\n\n### 我想从Git删除一个文件，但保留该文件 \n\n```java\n(main)$ git rm --cached log.txt\n```\n\n## 配置(Configuration) \n\n### 我想给一些Git命令添加别名(alias) \n\n在 OS X 和 Linux 下, 你的 Git的配置文件储存在 `~/.gitconfig`。我在`[alias]` 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:\n\n```java\n[alias]\n    a = add\n    amend = commit --amend\n    c = commit\n    ca = commit --amend\n    ci = commit -a\n    co = checkout\n    d = diff\n    dc = diff --changed\n    ds = diff --staged\n    f = fetch\n    loll = log --graph --decorate --pretty=oneline --abbrev-commit\n    m = merge\n    one = log --pretty=oneline\n    outstanding = rebase -i @{u}\n    s = status\n    unpushed = log @{u}\n    wc = whatchanged\n    wip = rebase -i @{u}\n    zap = fetch -p\n```\n\n### 我想缓存一个仓库(repository)的用户名和密码 \n\n你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。\n\n```java\n$ git config --global credential.helper cache\n# Set git to use the credential memory cache\n```\n\n```java\n$ git config --global credential.helper 'cache --timeout=3600'\n# Set the cache to timeout after 1 hour (setting is in seconds)\n```\n\n### 我不知道我做错了些什么 \n\n你把事情搞砸了：你 `重置(reset)` 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。\n\n这就是 `git reflog` 的目的， `reflog` 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到`reflog`。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。\n\n```java\n(main)$ git reflog\n0a2e358 HEAD@{0}: reset: moving to HEAD~2\n0254ea7 HEAD@{1}: checkout: moving from 2.2 to main\nc10f740 HEAD@{2}: checkout: moving from main to 2.2\n```\n\n上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 `HEAD@{0}`标识.\n\n如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。\n\n```java\n$ git reset --hard 0254ea7\n```\n\n然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。","source":"_posts/45个日常用git合代码的经典操作场景.md","raw":"---\ntitle: 45个日常用git合代码的经典操作场景\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-04 10:49:16\npassword:\nsummary: 下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。\ntags:\n    - git\n    - 代码合并\ncategories:\n    - git\n---\n  \n\n\ngit对于大家应该都不太陌生，熟练使用git已经成为程序员的一项基本技能，尽管在工作中有诸如 `Sourcetree`这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的git命令。  \n\n\n下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。  \n\n\n### 我刚才提交了什么? \n\n如果你用 `git commit -a` 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前`HEAD`上的最近一次的提交(commit):\n\n```java\n(main)$ git show\n```\n\n或者\n\n```java\n$ git log -n1 -p\n```\n\n### 我的提交信息(commit message)写错了 \n\n如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):\n\n```java\n$ git commit --amend --only\n```\n\n这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:\n\n```java\n$ git commit --amend --only -m 'xxxxxxx'\n```\n\n如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。\n\n### 我提交(commit)里的用户名和邮箱不对 \n\n如果这只是单个提交(commit)，修改它：\n\n```java\n$ git commit --amend --author \"New Authorname <authoremail@mydomain.com>\"\n```\n\n如果你需要修改所有历史, 参考 'git filter-branch'的指南页.\n\n### 我想从一个提交(commit)里移除一个文件 \n\n通过下面的方法，从一个提交(commit)里移除一个文件:\n\n```java\n$ git checkout HEAD^ myfile\n$ git add -A\n$ git commit --amend\n```\n\n这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。\n\n### 我想删除我的的最后一次提交(commit) \n\n如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。\n\n```java\n$ git reset HEAD^ --hard\n$ git push -f [remote] [branch]\n```\n\n如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):\n\n```java\n(my-branch*)$ git reset --soft HEAD@{1}\n```\n\n这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 `git revert SHAofBadCommit`， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 `git push -f`。\n\n### 删除任意提交(commit) \n\n同样的警告：不到万不得已的时候不要这么做.\n\n```java\n$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT\n$ git push -f [remote] [branch]\n```\n\n或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。\n\n### 我尝试推一个修正后的提交(amended commit)到远程，但是报错： \n\n```java\nTo https://github.com/yourusername/repo.git\n! [rejected]        mybranch -> mybranch (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/tanay1337/webmaker.org.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n\n注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (`-f`)。注意 – 总是 确保你指明一个分支!\n\n```java\n(my-branch)$ git push origin mybranch -f\n```\n\n一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。\n\n### 我意外的做了一次硬重置(hard reset)，我想找回我的内容 \n\n如果你意外的做了 `git reset --hard`, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。\n\n```java\n(main)$ git reflog\n```\n\n你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:\n\n```java\n(main)$ git reset --hard SHA1234\n```\n\n这样就完成了。\n\n## 暂存(Staging) \n\n### 我需要把暂存的内容添加到上一次的提交(commit) \n\n```java\n(my-branch*)$ git commit --amend\n```\n\n### 我想要暂存一个新文件的一部分，而不是这个文件的全部 \n\n一般来说, 如果你想暂存一个文件的一部分, 你可这样做:\n\n```java\n$ git add --patch filename.x\n```\n\n`-p` 简写。这会打开交互模式， 你将能够用 `s` 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:\n\n```java\n$ git add -N filename.x\n```\n\n然后, 你需要用 `e` 选项来手动选择需要添加的行，执行 `git diff --cached` 将会显示哪些行暂存了哪些行只是保存在本地了。\n\n### 我想把在一个文件里的变化(changes)加到两个提交(commit)里 \n\n`git add` 会把整个文件加入到一个提交. `git add -p` 允许交互式的选择你想要提交的部分.\n\n### 我想把暂存的内容变成未暂存，把未暂存的内容暂存起来 \n\n多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。\n\n```java\n$ git commit -m \"WIP\"\n$ git add .\n$ git stash\n$ git reset HEAD^\n$ git stash pop --index 0\n```\n\n注意1: 这里使用`pop`仅仅是因为想尽可能保持幂等。注意2: 假如你不加上`--index`你会把暂存的文件标记为为存储。\n\n## 未暂存(Unstaged)的内容 \n\n### 我想把未暂存的内容移动到一个新分支 \n\n```java\n$ git checkout -b my-branch\n```\n\n### 我想把未暂存的内容移动到另一个已存在的分支 \n\n```java\n$ git stash\n$ git checkout my-branch\n$ git stash pop\n```\n\n### 我想丢弃本地未提交的变化(uncommitted changes) \n\n如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：\n\n```java\n# one commit\n(my-branch)$ git reset --hard HEAD^\n# two commits\n(my-branch)$ git reset --hard HEAD^^\n# four commits\n(my-branch)$ git reset --hard HEAD~4\n# or\n(main)$ git checkout -f\n```\n\n重置某个特殊的文件, 你可以用文件名做为参数:\n\n```java\n$ git reset filename\n```\n\n### 我想丢弃某些未暂存的内容 \n\n如果你想丢弃工作拷贝中的一部分内容，而不是全部。\n\n签出(checkout)不需要的内容，保留需要的。\n\n```java\n$ git checkout -p\n# Answer y to all of the snippets you want to drop\n```\n\n另外一个方法是使用 `stash`， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。\n\n```java\n$ git stash -p\n# Select all of the snippets you want to save\n$ git reset --hard\n$ git stash pop\n```\n\n或者, stash 你不需要的部分, 然后stash drop。\n\n```java\n$ git stash -p\n# Select all of the snippets you don't want to save\n$ git stash drop\n```\n\n## 分支(Branches) \n\n### 我从错误的分支拉取了内容，或把内容拉取到了错误的分支 \n\n这是另外一种使用 `git reflog` 情况，找到在这次错误拉(pull) 之前HEAD的指向。\n\n```java\n(main)$ git reflog\nab7555f HEAD@{0}: pull origin wrong-branch: Fast-forward\nc5bc55a HEAD@{1}: checkout: checkout message goes here\n```\n\n重置分支到你所需的提交(desired commit):\n\n```java\n$ git reset --hard c5bc55a\n```\n\n完成。\n\n### 我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致 \n\n先确认你没有推(push)你的内容到远程。\n\n`git status` 会显示你领先(ahead)源(origin)多少个提交:\n\n```java\n(my-branch)$ git status\n# On branch my-branch\n# Your branch is ahead of 'origin/my-branch' by 2 commits.\n#   (use \"git push\" to publish your local commits)\n#\n```\n\n一种方法是:\n\n```java\n(main)$ git reset --hard origin/my-branch\n```\n\n### 我需要提交到一个新分支，但错误的提交到了main \n\n在main下创建一个新分支，不切换到新分支,仍在main下:\n\n```java\n(main)$ git branch my-branch\n```\n\n把main分支重置到前一个提交:\n\n```java\n(main)$ git reset --hard HEAD^\n```\n\n`HEAD^` 是 `HEAD^1` 的简写，你可以通过指定要设置的`HEAD`来进一步重置。\n\n或者, 如果你不想使用 `HEAD^`, 找到你想重置到的提交(commit)的hash(`git log` 能够完成)， 然后重置到这个hash。使用`git push` 同步内容到远程。\n\n例如, main分支想重置到的提交的hash为`a13b85e`:\n\n```java\n(main)$ git reset --hard a13b85e\nHEAD is now at a13b85e\n```\n\n签出(checkout)刚才新建的分支继续工作:\n\n```java\n(main)$ git checkout my-branch\n```\n\n### 我想保留来自另外一个ref-ish的整个文件 \n\n假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:微信搜索公众号：Java后端编程，回复：java 领取资料 。\n\n```java\n(solution)$ git add -A && git commit -m \"Adding all changes from this spike into one big commit.\"\n```\n\n当你想要把它放到一个分支里 (可能是`feature`, 或者 `develop`), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。\n\n假设你有:\n\n *  分支 `solution`, 拥有原型方案， 领先 `develop` 分支。\n *  分支 `develop`, 在这里你应用原型方案的一些内容。\n\n我去可以通过把内容拿到你的分支里，来解决这个问题:\n\n```java\n(develop)$ git checkout solution -- file1.txt\n```\n\n这会把这个文件内容从分支 `solution` 拿到分支 `develop` 里来:\n\n```java\n# On branch develop\n# Your branch is up-to-date with 'origin/develop'.\n# Changes to be committed:\n#  (use \"git reset HEAD <file>...\" to unstage)\n#\n#        modified:   file1.txt\n```\n\n然后, 正常提交。\n\nNote: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.\n\n### 我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里 \n\n假设你有一个`main`分支， 执行`git log`, 你看到你做过两次提交:\n\n```java\n(main)$ git log\n\ncommit e3851e817c451cc36f2e6f3049db528415e3c114\nAuthor: Alex Lee <alexlee@example.com>\nDate:   Tue Jul 22 15:39:27 2014 -0400\n\n    Bug #21 - Added CSRF protection\n\ncommit 5ea51731d150f7ddc4a365437931cd8be3bf3131\nAuthor: Alex Lee <alexlee@example.com>\nDate:   Tue Jul 22 15:39:12 2014 -0400\n\n    Bug #14 - Fixed spacing on title\n\ncommit a13b85e984171c6e2a1729bb061994525f626d14\nAuthor: Aki Rose <akirose@example.com>\nDate:   Tue Jul 21 01:12:48 2014 -0400\n\n    First commit\n```\n\n让我们用提交hash(commit hash)标记bug (`e3851e8` for \\#21, `5ea5173` for \\#14).\n\n首先, 我们把`main`分支重置到正确的提交(`a13b85e`):\n\n```java\n(main)$ git reset --hard a13b85e\nHEAD is now at a13b85e\n```\n\n现在, 我们对 bug \\#21 创建一个新的分支:\n\n```java\n(main)$ git checkout -b 21\n(21)$\n```\n\n接着, 我们用 cherry-pick 把对bug \\#21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。\n\n```java\n(21)$ git cherry-pick e3851e8\n```\n\n这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.\n\n再者， 我们为bug \\#14 创建一个新的分支, 也基于`main`分支\n\n```java\n(21)$ git checkout main\n(main)$ git checkout -b 14\n(14)$\n```\n\n最后, 为 bug \\#14 执行 `cherry-pick`:\n\n```java\n(14)$ git cherry-pick 5ea5173\n```\n\n### 我想删除上游(upstream)分支被删除了的本地分支 \n\n一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（[IDEA 中玩转 Git][IDEA _ Git]）。\n\n```java\n$ git fetch -p\n```\n\n### 我不小心删除了我的分支 \n\n如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:\n\n```java\n(main)$ git checkout -b my-branch\n(my-branch)$ git branch\n(my-branch)$ touch foo.txt\n(my-branch)$ ls\nREADME.md foo.txt\n```\n\n添加文件并做一次提交\n\n```java\n(my-branch)$ git add .\n(my-branch)$ git commit -m 'foo.txt added'\n(my-branch)$ foo.txt added\n 1 files changed, 1 insertions(+)\n create mode 100644 foo.txt\n(my-branch)$ git log\n\ncommit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012\nAuthor: siemiatj <siemiatj@example.com>\nDate:   Wed Jul 30 00:34:10 2014 +0200\n\n    foo.txt added\n\ncommit 69204cdf0acbab201619d95ad8295928e7f411d5\nAuthor: Kate Hudson <katehudson@example.com>\nDate:   Tue Jul 29 13:14:46 2014 -0400\n\n    Fixes #6: Force pushing after amending commits\n```\n\n现在我们切回到主(main)分支，‘不小心的’删除`my-branch`分支\n\n```java\n(my-branch)$ git checkout main\nSwitched to branch 'main'\nYour branch is up-to-date with 'origin/main'.\n(main)$ git branch -D my-branch\nDeleted branch my-branch (was 4e3cd85).\n(main)$ echo oh noes, deleted my branch!\noh noes, deleted my branch!\n```\n\n在这时候你应该想起了`reflog`, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。\n\n```java\n(main)$ git reflog\n69204cd HEAD@{0}: checkout: moving from my-branch to main\n4e3cd85 HEAD@{1}: commit: foo.txt added\n69204cd HEAD@{2}: checkout: moving from main to my-branch\n```\n\n正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。\n\n```java\n(main)$ git checkout -b my-branch-help\nSwitched to a new branch 'my-branch-help'\n(my-branch-help)$ git reset --hard 4e3cd85\nHEAD is now at 4e3cd85 foo.txt added\n(my-branch-help)$ ls\nREADME.md foo.txt\n```\n\n看! 我们把删除的文件找回来了。Git的 `reflog` 在rebasing出错的时候也是同样有用的。\n\n### 我想删除一个分支 \n\n删除一个远程分支:\n\n```java\n(main)$ git push origin --delete my-branch\n```\n\n你也可以:\n\n```java\n(main)$ git push origin :my-branch\n```\n\n删除一个本地分支:\n\n```java\n(main)$ git branch -D my-branch\n```\n\n### 我想从别人正在工作的远程分支签出(checkout)一个分支 \n\n首先, 从远程拉取(fetch) 所有分支:\n\n```java\n(main)$ git fetch --all\n```\n\n假设你想要从远程的`daves`分支签出到本地的`daves`\n\n```java\n(main)$ git checkout --track origin/daves\nBranch daves set up to track remote branch daves from origin.\nSwitched to a new branch 'daves'\n```\n\n(`--track` 是 `git checkout -b [branch] [remotename]/[branch]` 的简写)\n\n这样就得到了一个`daves`分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.\n\n## Rebasing 和合并(Merging) \n\n### 我想撤销rebase/merge \n\n你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG\\_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。\n\n```java\n(my-branch)$ git reset --hard ORIG_HEAD\n```\n\n### 我已经rebase过, 但是我不想强推(force push) \n\n不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:\n\n```java\n(main)$ git checkout my-branch\n(my-branch)$ git rebase -i main\n(my-branch)$ git checkout main\n(main)$ git merge --ff-only my-branch\n```\n\n### 我需要组合(combine)几个提交(commit) \n\n假设你的工作分支将会做对于 `main` 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:\n\n```java\n(my-branch)$ git reset --soft main\n(my-branch)$ git commit -am \"New awesome feature\"\n```\n\n如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):\n\n```java\n(my-branch)$ git rebase -i main\n```\n\n如果没有相对的其它分支， 你将不得不相对自己的`HEAD` 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于`HEAD~2` 进行rebase， 组合最近3次提交(commit), 相对于`HEAD~3`, 等等。\n\n```java\n(main)$ git rebase -i HEAD~2\n```\n\n在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:\n\n```java\npick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\npick b729ad5 fixup\npick e3851e8 another fix\n\n# Rebase 8074d12..b729ad5 onto 8074d12\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n\n所有以 `#` 开头的行都是注释, 不会影响 rebase.\n\n然后，你可以用任何上面命令列表的命令替换 `pick`, 你也可以通过删除对应的行来删除一个提交(commit)。\n\n例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 `f`:\n\n```java\npick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\nf b729ad5 fixup\nf e3851e8 another fix\n```\n\n如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个`r`，或者更简单的用`s` 替代 `f`:\n\n```java\npick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\ns b729ad5 fixup\ns e3851e8 another fix\n```\n\n你可以在接下来弹出的文本提示框里重命名提交(commit)。\n\n```java\nNewer, awesomer features\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# rebase in progress; onto 8074d12\n# You are currently editing a commit while rebasing branch 'main' on '8074d12'.\n#\n# Changes to be committed:\n#\tmodified:   README.md\n#\n```\n\n如果成功了, 你应该看到类似下面的内容:\n\n```java\n(main)$ Successfully rebased and updated refs/heads/main.\n```\n\n#### 安全合并(merging)策略 \n\n`--no-commit` 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。`no-ff` 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多Git资料，参见[IDEA 中如何完成 Git 版本回退？][IDEA _ Git 1]）。\n\n```java\n(main)$ git merge --no-ff --no-commit my-branch\n```\n\n#### 我需要将一个分支合并成一个提交(commit) \n\n```java\n(main)$ git merge --squash my-branch\n```\n\n#### 我只想组合(combine)未推的提交(unpushed commit) \n\n有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。\n\n```java\n(main)$ git rebase -i @{u}\n```\n\n这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。\n\n### 检查是否分支上的所有提交(commit)都合并(merge)过了 \n\n检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:\n\n```java\n(main)$ git log --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll\n```\n\n这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:\n\n```java\n(main)$ git log main ^feature/120-on-scroll --no-merges\n```\n\n### 交互式rebase(interactive rebase)可能出现的问题 \n\n#### 这个rebase 编辑屏幕出现'noop' \n\n如果你看到的是这样:\n\n```java\nnoop\n```\n\n这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:\n\n *  检查确保主(main)分支没有问题\n *  rebase `HEAD~2` 或者更早\n\n#### 有冲突的情况 \n\n如果你不能成功的完成rebase, 你可能必须要解决冲突。\n\n首先执行 `git status` 找出哪些文件有冲突:\n\n```java\n(my-branch)$ git status\nOn branch my-branch\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n modified:   README.md\n```\n\n在这个例子里面, `README.md` 有冲突。打开这个文件找到类似下面的内容:\n\n```java\n<<<<<<< HEAD\n   some code\n   =========\n   some code\n   >>>>>>> new-commit\n```\n\n你需要解决新提交的代码(示例里, 从中间`==`线到`new-commit`的地方)与`HEAD` 之间不一样的地方.\n\n有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):\n\n```java\n(main*)$ git mergetool -t opendiff\n```\n\n在你解决完所有冲突和测试过后, `git add` 变化了的(changed)文件, 然后用`git rebase --continue` 继续rebase。\n\n```java\n(my-branch)$ git add README.md\n(my-branch)$ git rebase --continue\n```\n\n如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行`git rebase --skip`。\n\n任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:\n\n```java\n(my-branch)$ git rebase --abort\n```\n\n## Stash \n\n### 暂存所有改动 \n\n暂存你工作目录下的所有改动\n\n```java\n$ git stash\n```\n\n你可以使用`-u`来排除一些文件\n\n```java\n$ git stash -u\n```\n\n### 暂存指定文件 \n\n假设你只想暂存某一个文件\n\n```java\n$ git stash push working-directory-path/filename.ext\n```\n\n假设你想暂存多个文件\n\n```java\n$ git stash push working-directory-path/filename1.ext working-directory-path/filename2.ext\n```\n\n### 暂存时记录消息 \n\n这样你可以在`list`时看到它\n\n```java\n$ git stash save <message>\n```\n\n或\n\n```java\n$ git stash push -m <message>\n```\n\n### 使用某个指定暂存 \n\n首先你可以查看你的`stash`记录\n\n```java\n$ git stash list\n```\n\n然后你可以`apply`某个`stash`\n\n```java\n$ git stash apply \"stash@{n}\"\n```\n\n此处， 'n'是`stash`在栈中的位置，最上层的`stash`会是0\n\n除此之外，也可以使用时间标记(假如你能记得的话)。\n\n```java\n$ git stash apply \"stash@{2.hours.ago}\"\n```\n\n### 暂存时保留未暂存的内容 \n\n你需要手动create一个`stash commit`， 然后使用`git stash store`。\n\n```java\n$ git stash create\n$ git stash store -m \"commit-message\" CREATED_SHA1\n```\n\n## 杂项(Miscellaneous Objects) \n\n### 克隆所有子模块 \n\n```java\n$ git clone --recursive git://github.com/foo/bar.git\n```\n\n如果已经克隆了:\n\n```java\n$ git submodule update --init --recursive\n```\n\n### 删除标签(tag) \n\n```java\n$ git tag -d <tag_name>\n$ git push <remote> :refs/tags/<tag_name>\n```\n\n### 恢复已删除标签(tag) \n\n如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):\n\n```java\n$ git fsck --unreachable | grep tag\n```\n\n记下这个标签(tag)的hash，然后用Git的 update-ref\n\n```java\n$ git update-ref refs/tags/<tag_name> <hash>\n```\n\n这时你的标签(tag)应该已经恢复了。\n\n### 已删除补丁(patch) \n\n如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 `git am`。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。\n\n做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。\n\n## 跟踪文件(Tracking Files) \n\n### 我只想改变一个文件名字的大小写，而不修改内容 \n\n```java\n(main)$ git mv --force myfile MyFile\n```\n\n### 我想从Git删除一个文件，但保留该文件 \n\n```java\n(main)$ git rm --cached log.txt\n```\n\n## 配置(Configuration) \n\n### 我想给一些Git命令添加别名(alias) \n\n在 OS X 和 Linux 下, 你的 Git的配置文件储存在 `~/.gitconfig`。我在`[alias]` 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:\n\n```java\n[alias]\n    a = add\n    amend = commit --amend\n    c = commit\n    ca = commit --amend\n    ci = commit -a\n    co = checkout\n    d = diff\n    dc = diff --changed\n    ds = diff --staged\n    f = fetch\n    loll = log --graph --decorate --pretty=oneline --abbrev-commit\n    m = merge\n    one = log --pretty=oneline\n    outstanding = rebase -i @{u}\n    s = status\n    unpushed = log @{u}\n    wc = whatchanged\n    wip = rebase -i @{u}\n    zap = fetch -p\n```\n\n### 我想缓存一个仓库(repository)的用户名和密码 \n\n你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。\n\n```java\n$ git config --global credential.helper cache\n# Set git to use the credential memory cache\n```\n\n```java\n$ git config --global credential.helper 'cache --timeout=3600'\n# Set the cache to timeout after 1 hour (setting is in seconds)\n```\n\n### 我不知道我做错了些什么 \n\n你把事情搞砸了：你 `重置(reset)` 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。\n\n这就是 `git reflog` 的目的， `reflog` 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到`reflog`。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。\n\n```java\n(main)$ git reflog\n0a2e358 HEAD@{0}: reset: moving to HEAD~2\n0254ea7 HEAD@{1}: checkout: moving from 2.2 to main\nc10f740 HEAD@{2}: checkout: moving from main to 2.2\n```\n\n上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 `HEAD@{0}`标识.\n\n如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。\n\n```java\n$ git reset --hard 0254ea7\n```\n\n然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。","slug":"45个日常用git合代码的经典操作场景","published":1,"updated":"2022-11-04T02:50:07.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla1wfs1m0000hzld2zuj5k6i","content":"<p>git对于大家应该都不太陌生，熟练使用git已经成为程序员的一项基本技能，尽管在工作中有诸如 <code>Sourcetree</code>这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的git命令。  </p>\n<p>下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。  </p>\n<h3 id=\"我刚才提交了什么\"><a href=\"#我刚才提交了什么\" class=\"headerlink\" title=\"我刚才提交了什么?\"></a>我刚才提交了什么?</h3><p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git show<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git log <span class=\"token operator\">-</span>n1 <span class=\"token operator\">-</span>p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我的提交信息-commit-message-写错了\"><a href=\"#我的提交信息-commit-message-写错了\" class=\"headerlink\" title=\"我的提交信息(commit message)写错了\"></a>我的提交信息(commit message)写错了</h3><p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">--</span>amend <span class=\"token operator\">--</span>only<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">--</span>amend <span class=\"token operator\">--</span>only <span class=\"token operator\">-</span>m <span class=\"token string\">'xxxxxxx'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p>\n<h3 id=\"我提交-commit-里的用户名和邮箱不对\"><a href=\"#我提交-commit-里的用户名和邮箱不对\" class=\"headerlink\" title=\"我提交(commit)里的用户名和邮箱不对\"></a>我提交(commit)里的用户名和邮箱不对</h3><p>如果这只是单个提交(commit)，修改它：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">--</span>amend <span class=\"token operator\">--</span>author <span class=\"token string\">\"New Authorname &lt;authoremail@mydomain.com>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.</p>\n<h3 id=\"我想从一个提交-commit-里移除一个文件\"><a href=\"#我想从一个提交-commit-里移除一个文件\" class=\"headerlink\" title=\"我想从一个提交(commit)里移除一个文件\"></a>我想从一个提交(commit)里移除一个文件</h3><p>通过下面的方法，从一个提交(commit)里移除一个文件:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git checkout HEAD<span class=\"token operator\">^</span> myfile\n$ git add <span class=\"token operator\">-</span><span class=\"token class-name\">A</span>\n$ git commit <span class=\"token operator\">--</span>amend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</p>\n<h3 id=\"我想删除我的的最后一次提交-commit\"><a href=\"#我想删除我的的最后一次提交-commit\" class=\"headerlink\" title=\"我想删除我的的最后一次提交(commit)\"></a>我想删除我的的最后一次提交(commit)</h3><p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset HEAD<span class=\"token operator\">^</span> <span class=\"token operator\">--</span>hard\n$ git push <span class=\"token operator\">-</span>f <span class=\"token punctuation\">[</span>remote<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>soft HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>。</p>\n<h3 id=\"删除任意提交-commit\"><a href=\"#删除任意提交-commit\" class=\"headerlink\" title=\"删除任意提交(commit)\"></a>删除任意提交(commit)</h3><p>同样的警告：不到万不得已的时候不要这么做.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git rebase <span class=\"token operator\">--</span>onto SHA1_OF_BAD_COMMIT<span class=\"token operator\">^</span> SHA1_OF_BAD_COMMIT\n$ git push <span class=\"token operator\">-</span>f <span class=\"token punctuation\">[</span>remote<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。</p>\n<h3 id=\"我尝试推一个修正后的提交-amended-commit-到远程，但是报错：\"><a href=\"#我尝试推一个修正后的提交-amended-commit-到远程，但是报错：\" class=\"headerlink\" title=\"我尝试推一个修正后的提交(amended commit)到远程，但是报错：\"></a>我尝试推一个修正后的提交(amended commit)到远程，但是报错：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">To</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>yourusername<span class=\"token operator\">/</span>repo<span class=\"token punctuation\">.</span>git\n<span class=\"token operator\">!</span> <span class=\"token punctuation\">[</span>rejected<span class=\"token punctuation\">]</span>        mybranch <span class=\"token operator\">-></span> mybranch <span class=\"token punctuation\">(</span>non<span class=\"token operator\">-</span>fast<span class=\"token operator\">-</span>forward<span class=\"token punctuation\">)</span>\nerror<span class=\"token operator\">:</span> failed <span class=\"token keyword\">to</span> <span class=\"token namespace\">push</span> some refs <span class=\"token keyword\">to</span> <span class=\"token string\">'https://github.com/tanay1337/webmaker.org.git'</span>\nhint<span class=\"token operator\">:</span> <span class=\"token class-name\">Updates</span> were rejected because the tip of your current branch is behind\nhint<span class=\"token operator\">:</span> its remote <span class=\"token class-name\"><span class=\"token namespace\">counterpart<span class=\"token punctuation\">.</span></span> Integrate</span> the remote changes <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>\nhint<span class=\"token operator\">:</span> <span class=\"token string\">'git pull ...'</span><span class=\"token punctuation\">)</span> before pushing again<span class=\"token punctuation\">.</span>\nhint<span class=\"token operator\">:</span> <span class=\"token class-name\">See</span> the <span class=\"token string\">'Note about fast-forwards'</span> in <span class=\"token string\">'git push --help'</span> <span class=\"token keyword\">for</span> details<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。注意 – 总是 确保你指明一个分支!</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git push origin mybranch <span class=\"token operator\">-</span>f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p>\n<h3 id=\"我意外的做了一次硬重置-hard-reset-，我想找回我的内容\"><a href=\"#我意外的做了一次硬重置-hard-reset-，我想找回我的内容\" class=\"headerlink\" title=\"我意外的做了一次硬重置(hard reset)，我想找回我的内容\"></a>我意外的做了一次硬重置(hard reset)，我想找回我的内容</h3><p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard SHA1234<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样就完成了。</p>\n<h2 id=\"暂存-Staging\"><a href=\"#暂存-Staging\" class=\"headerlink\" title=\"暂存(Staging)\"></a>暂存(Staging)</h2><h3 id=\"我需要把暂存的内容添加到上一次的提交-commit\"><a href=\"#我需要把暂存的内容添加到上一次的提交-commit\" class=\"headerlink\" title=\"我需要把暂存的内容添加到上一次的提交(commit)\"></a>我需要把暂存的内容添加到上一次的提交(commit)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ git commit <span class=\"token operator\">--</span>amend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想要暂存一个新文件的一部分，而不是这个文件的全部\"><a href=\"#我想要暂存一个新文件的一部分，而不是这个文件的全部\" class=\"headerlink\" title=\"我想要暂存一个新文件的一部分，而不是这个文件的全部\"></a>我想要暂存一个新文件的一部分，而不是这个文件的全部</h3><p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git add <span class=\"token operator\">--</span>patch filename<span class=\"token punctuation\">.</span>x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git add <span class=\"token operator\">-</span><span class=\"token class-name\">N</span> filename<span class=\"token punctuation\">.</span>x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p>\n<h3 id=\"我想把在一个文件里的变化-changes-加到两个提交-commit-里\"><a href=\"#我想把在一个文件里的变化-changes-加到两个提交-commit-里\" class=\"headerlink\" title=\"我想把在一个文件里的变化(changes)加到两个提交(commit)里\"></a>我想把在一个文件里的变化(changes)加到两个提交(commit)里</h3><p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p>\n<h3 id=\"我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\"><a href=\"#我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\" class=\"headerlink\" title=\"我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\"></a>我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3><p>多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"WIP\"</span>\n$ git add <span class=\"token punctuation\">.</span>\n$ git stash\n$ git reset HEAD<span class=\"token operator\">^</span>\n$ git stash pop <span class=\"token operator\">--</span>index <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意1: 这里使用<code>pop</code>仅仅是因为想尽可能保持幂等。注意2: 假如你不加上<code>--index</code>你会把暂存的文件标记为为存储。</p>\n<h2 id=\"未暂存-Unstaged-的内容\"><a href=\"#未暂存-Unstaged-的内容\" class=\"headerlink\" title=\"未暂存(Unstaged)的内容\"></a>未暂存(Unstaged)的内容</h2><h3 id=\"我想把未暂存的内容移动到一个新分支\"><a href=\"#我想把未暂存的内容移动到一个新分支\" class=\"headerlink\" title=\"我想把未暂存的内容移动到一个新分支\"></a>我想把未暂存的内容移动到一个新分支</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git checkout <span class=\"token operator\">-</span>b my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想把未暂存的内容移动到另一个已存在的分支\"><a href=\"#我想把未暂存的内容移动到另一个已存在的分支\" class=\"headerlink\" title=\"我想把未暂存的内容移动到另一个已存在的分支\"></a>我想把未暂存的内容移动到另一个已存在的分支</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash\n$ git checkout my<span class=\"token operator\">-</span>branch\n$ git stash pop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"我想丢弃本地未提交的变化-uncommitted-changes\"><a href=\"#我想丢弃本地未提交的变化-uncommitted-changes\" class=\"headerlink\" title=\"我想丢弃本地未提交的变化(uncommitted changes)\"></a>我想丢弃本地未提交的变化(uncommitted changes)</h3><p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"># one commit\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">^</span>\n# two commits\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">^</span><span class=\"token operator\">^</span>\n# four commits\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">~</span><span class=\"token number\">4</span>\n# or\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重置某个特殊的文件, 你可以用文件名做为参数:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想丢弃某些未暂存的内容\"><a href=\"#我想丢弃某些未暂存的内容\" class=\"headerlink\" title=\"我想丢弃某些未暂存的内容\"></a>我想丢弃某些未暂存的内容</h3><p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p>\n<p>签出(checkout)不需要的内容，保留需要的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git checkout <span class=\"token operator\">-</span>p\n# <span class=\"token class-name\">Answer</span> y <span class=\"token keyword\">to</span> <span class=\"token namespace\">all</span> of the snippets you want <span class=\"token keyword\">to</span> <span class=\"token namespace\">drop</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>另外一个方法是使用 <code>stash</code>， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash <span class=\"token operator\">-</span>p\n# <span class=\"token class-name\">Select</span> all of the snippets you want <span class=\"token keyword\">to</span> <span class=\"token namespace\">save</span>\n$ git reset <span class=\"token operator\">--</span>hard\n$ git stash pop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>或者, stash 你不需要的部分, 然后stash drop。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash <span class=\"token operator\">-</span>p\n# <span class=\"token class-name\">Select</span> all of the snippets you don't want <span class=\"token keyword\">to</span> <span class=\"token namespace\">save</span>\n$ git stash drop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"分支-Branches\"><a href=\"#分支-Branches\" class=\"headerlink\" title=\"分支(Branches)\"></a>分支(Branches)</h2><h3 id=\"我从错误的分支拉取了内容，或把内容拉取到了错误的分支\"><a href=\"#我从错误的分支拉取了内容，或把内容拉取到了错误的分支\" class=\"headerlink\" title=\"我从错误的分支拉取了内容，或把内容拉取到了错误的分支\"></a>我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3><p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前HEAD的指向。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog\nab7555f HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> pull origin wrong<span class=\"token operator\">-</span>branch<span class=\"token operator\">:</span> <span class=\"token class-name\">Fast</span><span class=\"token operator\">-</span>forward\nc5bc55a HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> checkout message goes here<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>重置分支到你所需的提交(desired commit):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset <span class=\"token operator\">--</span>hard c5bc55a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>完成。</p>\n<h3 id=\"我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致\"><a href=\"#我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致\" class=\"headerlink\" title=\"我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致\"></a>我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3><p>先确认你没有推(push)你的内容到远程。</p>\n<p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git status\n# <span class=\"token class-name\">On</span> branch my<span class=\"token operator\">-</span>branch\n# <span class=\"token class-name\">Your</span> branch is ahead of <span class=\"token string\">'origin/my-branch'</span> by <span class=\"token number\">2</span> commits<span class=\"token punctuation\">.</span>\n#   <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git push\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">publish</span> your local commits<span class=\"token punctuation\">)</span>\n#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一种方法是:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard origin<span class=\"token operator\">/</span>my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我需要提交到一个新分支，但错误的提交到了main\"><a href=\"#我需要提交到一个新分支，但错误的提交到了main\" class=\"headerlink\" title=\"我需要提交到一个新分支，但错误的提交到了main\"></a>我需要提交到一个新分支，但错误的提交到了main</h3><p>在main下创建一个新分支，不切换到新分支,仍在main下:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git branch my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>把main分支重置到前一个提交:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">^</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p>\n<p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的hash(<code>git log</code> 能够完成)， 然后重置到这个hash。使用<code>git push</code> 同步内容到远程。</p>\n<p>例如, main分支想重置到的提交的hash为<code>a13b85e</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard a13b85e\nHEAD is now at a13b85e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>签出(checkout)刚才新建的分支继续工作:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想保留来自另外一个ref-ish的整个文件\"><a href=\"#我想保留来自另外一个ref-ish的整个文件\" class=\"headerlink\" title=\"我想保留来自另外一个ref-ish的整个文件\"></a>我想保留来自另外一个ref-ish的整个文件</h3><p>假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:微信搜索公众号：Java后端编程，回复：java 领取资料 。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>solution<span class=\"token punctuation\">)</span>$ git add <span class=\"token operator\">-</span><span class=\"token class-name\">A</span> <span class=\"token operator\">&amp;&amp;</span> git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"Adding all changes from this spike into one big commit.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p>\n<p>假设你有:</p>\n<ul>\n<li> 分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li>\n<li> 分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li>\n</ul>\n<p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>develop<span class=\"token punctuation\">)</span>$ git checkout solution <span class=\"token operator\">--</span> file1<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"># <span class=\"token class-name\">On</span> branch develop\n# <span class=\"token class-name\">Your</span> branch is up<span class=\"token operator\">-</span><span class=\"token keyword\">to</span><span class=\"token operator\">-</span>date <span class=\"token keyword\">with</span> <span class=\"token string\">'origin/develop'</span><span class=\"token punctuation\">.</span>\n# <span class=\"token class-name\">Changes</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">be</span> committed<span class=\"token operator\">:</span>\n#  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file>...\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">unstage</span><span class=\"token punctuation\">)</span>\n#\n#        modified<span class=\"token operator\">:</span>   file1<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后, 正常提交。</p>\n<p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.</p>\n<h3 id=\"我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里\"><a href=\"#我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里\" class=\"headerlink\" title=\"我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里\"></a>我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3><p>假设你有一个<code>main</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git log\n\ncommit e3851e817c451cc36f2e6f3049db528415e3c114\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Alex</span> <span class=\"token class-name\">Lee</span> <span class=\"token operator\">&lt;</span>alexlee<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">39</span><span class=\"token operator\">:</span><span class=\"token number\">27</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">Bug</span> #<span class=\"token number\">21</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Added</span> CSRF protection\n\ncommit <span class=\"token number\">5</span>ea51731d150f7ddc4a365437931cd8be3bf3131\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Alex</span> <span class=\"token class-name\">Lee</span> <span class=\"token operator\">&lt;</span>alexlee<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">39</span><span class=\"token operator\">:</span><span class=\"token number\">12</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">Bug</span> #<span class=\"token number\">14</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Fixed</span> spacing on title\n\ncommit a13b85e984171c6e2a1729bb061994525f626d14\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Aki</span> <span class=\"token class-name\">Rose</span> <span class=\"token operator\">&lt;</span>akirose<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">21</span> <span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token operator\">:</span><span class=\"token number\">48</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">First</span> commit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>让我们用提交hash(commit hash)标记bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p>\n<p>首先, 我们把<code>main</code>分支重置到正确的提交(<code>a13b85e</code>):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard a13b85e\nHEAD is now at a13b85e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>现在, 我们对 bug #21 创建一个新的分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b <span class=\"token number\">21</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>接着, 我们用 cherry-pick 把对bug #21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>$ git cherry<span class=\"token operator\">-</span>pick e3851e8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.</p>\n<p>再者， 我们为bug #14 创建一个新的分支, 也基于<code>main</code>分支</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>$ git checkout main\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b <span class=\"token number\">14</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>$ git cherry<span class=\"token operator\">-</span>pick <span class=\"token number\">5</span>ea5173<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想删除上游-upstream-分支被删除了的本地分支\"><a href=\"#我想删除上游-upstream-分支被删除了的本地分支\" class=\"headerlink\" title=\"我想删除上游(upstream)分支被删除了的本地分支\"></a>我想删除上游(upstream)分支被删除了的本地分支</h3><p>一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（[IDEA 中玩转 Git][IDEA _ Git]）。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git fetch <span class=\"token operator\">-</span>p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我不小心删除了我的分支\"><a href=\"#我不小心删除了我的分支\" class=\"headerlink\" title=\"我不小心删除了我的分支\"></a>我不小心删除了我的分支</h3><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b my<span class=\"token operator\">-</span>branch\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git branch\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ touch foo<span class=\"token punctuation\">.</span>txt\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ ls\nREADME<span class=\"token punctuation\">.</span>md foo<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加文件并做一次提交</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git add <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git commit <span class=\"token operator\">-</span>m <span class=\"token string\">'foo.txt added'</span>\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ foo<span class=\"token punctuation\">.</span>txt added\n <span class=\"token number\">1</span> files changed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token function\">insertions</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\n create mode <span class=\"token number\">100644</span> foo<span class=\"token punctuation\">.</span>txt\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git log\n\ncommit <span class=\"token number\">4e3</span>cd85a670ced7cc17a2b5d8d3d809ac88d5012\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> siemiatj <span class=\"token operator\">&lt;</span>siemiatj<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Wed</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">30</span> <span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">34</span><span class=\"token operator\">:</span><span class=\"token number\">10</span> <span class=\"token number\">2014</span> <span class=\"token operator\">+</span><span class=\"token number\">0200</span>\n\n    foo<span class=\"token punctuation\">.</span>txt added\n\ncommit <span class=\"token number\">69204</span>cdf0acbab201619d95ad8295928e7f411d5\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Kate</span> <span class=\"token class-name\">Hudson</span> <span class=\"token operator\">&lt;</span>katehudson<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">29</span> <span class=\"token number\">13</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">46</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">Fixes</span> #<span class=\"token number\">6</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Force</span> pushing after amending commits<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在我们切回到主(main)分支，‘不小心的’删除<code>my-branch</code>分支</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git checkout main\n<span class=\"token class-name\">Switched</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">branch</span> <span class=\"token string\">'main'</span>\n<span class=\"token class-name\">Your</span> branch is up<span class=\"token operator\">-</span><span class=\"token keyword\">to</span><span class=\"token operator\">-</span>date <span class=\"token keyword\">with</span> <span class=\"token string\">'origin/main'</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git branch <span class=\"token operator\">-</span><span class=\"token class-name\">D</span> my<span class=\"token operator\">-</span>branch\n<span class=\"token class-name\">Deleted</span> branch my<span class=\"token operator\">-</span>branch <span class=\"token punctuation\">(</span>was <span class=\"token number\">4e3</span>cd85<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ echo oh noes<span class=\"token punctuation\">,</span> deleted my branch<span class=\"token operator\">!</span>\noh noes<span class=\"token punctuation\">,</span> deleted my branch<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog\n<span class=\"token number\">69204</span>cd HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from my<span class=\"token operator\">-</span>branch <span class=\"token keyword\">to</span> <span class=\"token namespace\">main</span>\n<span class=\"token number\">4e3</span>cd85 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> commit<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">.</span>txt added\n<span class=\"token number\">69204</span>cd HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from main <span class=\"token keyword\">to</span> <span class=\"token namespace\">my</span><span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b my<span class=\"token operator\">-</span>branch<span class=\"token operator\">-</span>help\n<span class=\"token class-name\">Switched</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">a</span> <span class=\"token keyword\">new</span> branch <span class=\"token string\">'my-branch-help'</span>\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">-</span>help<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard <span class=\"token number\">4e3</span>cd85\nHEAD is now at <span class=\"token number\">4e3</span>cd85 foo<span class=\"token punctuation\">.</span>txt added\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">-</span>help<span class=\"token punctuation\">)</span>$ ls\nREADME<span class=\"token punctuation\">.</span>md foo<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看! 我们把删除的文件找回来了。Git的 <code>reflog</code> 在rebasing出错的时候也是同样有用的。</p>\n<h3 id=\"我想删除一个分支\"><a href=\"#我想删除一个分支\" class=\"headerlink\" title=\"我想删除一个分支\"></a>我想删除一个分支</h3><p>删除一个远程分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git push origin <span class=\"token operator\">--</span>delete my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你也可以:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git push origin <span class=\"token operator\">:</span>my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除一个本地分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git branch <span class=\"token operator\">-</span><span class=\"token class-name\">D</span> my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想从别人正在工作的远程分支签出-checkout-一个分支\"><a href=\"#我想从别人正在工作的远程分支签出-checkout-一个分支\" class=\"headerlink\" title=\"我想从别人正在工作的远程分支签出(checkout)一个分支\"></a>我想从别人正在工作的远程分支签出(checkout)一个分支</h3><p>首先, 从远程拉取(fetch) 所有分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git fetch <span class=\"token operator\">--</span>all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">--</span>track origin<span class=\"token operator\">/</span>daves\n<span class=\"token class-name\">Branch</span> daves set up <span class=\"token keyword\">to</span> <span class=\"token namespace\">track</span> remote branch daves from <span class=\"token class-name\"><span class=\"token namespace\">origin<span class=\"token punctuation\">.</span></span>\nSwitched</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">a</span> <span class=\"token keyword\">new</span> branch <span class=\"token string\">'daves'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p>\n<p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p>\n<h2 id=\"Rebasing-和合并-Merging\"><a href=\"#Rebasing-和合并-Merging\" class=\"headerlink\" title=\"Rebasing 和合并(Merging)\"></a>Rebasing 和合并(Merging)</h2><h3 id=\"我想撤销rebase-merge\"><a href=\"#我想撤销rebase-merge\" class=\"headerlink\" title=\"我想撤销rebase/merge\"></a>我想撤销rebase/merge</h3><p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard ORIG_HEAD<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我已经rebase过-但是我不想强推-force-push\"><a href=\"#我已经rebase过-但是我不想强推-force-push\" class=\"headerlink\" title=\"我已经rebase过, 但是我不想强推(force push)\"></a>我已经rebase过, 但是我不想强推(force push)</h3><p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout my<span class=\"token operator\">-</span>branch\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i main\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git checkout main\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git merge <span class=\"token operator\">--</span>ff<span class=\"token operator\">-</span>only my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"我需要组合-combine-几个提交-commit\"><a href=\"#我需要组合-combine-几个提交-commit\" class=\"headerlink\" title=\"我需要组合(combine)几个提交(commit)\"></a>我需要组合(combine)几个提交(commit)</h3><p>假设你的工作分支将会做对于 <code>main</code> 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>soft main\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git commit <span class=\"token operator\">-</span>am <span class=\"token string\">\"New awesome feature\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行rebase， 组合最近3次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i HEAD<span class=\"token operator\">~</span><span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pick a9c8a1d <span class=\"token class-name\">Some</span> refactoring\npick <span class=\"token number\">01</span>b2fd8 <span class=\"token class-name\">New</span> awesome feature\npick b729ad5 fixup\npick e3851e8 another fix\n\n# <span class=\"token class-name\">Rebase</span> <span class=\"token number\">8074d</span><span class=\"token number\">12.</span><span class=\"token punctuation\">.</span>b729ad5 onto <span class=\"token number\">8074d</span><span class=\"token number\">12</span>\n#\n# <span class=\"token class-name\">Commands</span><span class=\"token operator\">:</span>\n#  p<span class=\"token punctuation\">,</span> pick <span class=\"token operator\">=</span> use commit\n#  r<span class=\"token punctuation\">,</span> reword <span class=\"token operator\">=</span> use commit<span class=\"token punctuation\">,</span> but edit the commit message\n#  e<span class=\"token punctuation\">,</span> edit <span class=\"token operator\">=</span> use commit<span class=\"token punctuation\">,</span> but stop <span class=\"token keyword\">for</span> amending\n#  s<span class=\"token punctuation\">,</span> squash <span class=\"token operator\">=</span> use commit<span class=\"token punctuation\">,</span> but meld into previous commit\n#  f<span class=\"token punctuation\">,</span> fixup <span class=\"token operator\">=</span> like <span class=\"token string\">\"squash\"</span><span class=\"token punctuation\">,</span> but discard <span class=\"token keyword\">this</span> commit's log message\n#  x<span class=\"token punctuation\">,</span> exec <span class=\"token operator\">=</span> run command <span class=\"token punctuation\">(</span>the rest of the line<span class=\"token punctuation\">)</span> using shell\n#\n# <span class=\"token class-name\">These</span> lines can be re<span class=\"token operator\">-</span>ordered<span class=\"token punctuation\">;</span> they are executed from top <span class=\"token keyword\">to</span> <span class=\"token namespace\">bottom<span class=\"token punctuation\">.</span></span>\n#\n# <span class=\"token class-name\">If</span> you remove a line here THAT COMMIT WILL BE LOST<span class=\"token punctuation\">.</span>\n#\n# <span class=\"token class-name\">However</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span> you remove everything<span class=\"token punctuation\">,</span> the rebase will be aborted<span class=\"token punctuation\">.</span>\n#\n# <span class=\"token class-name\">Note</span> that empty commits are commented out<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p>\n<p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p>\n<p>例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pick a9c8a1d <span class=\"token class-name\">Some</span> refactoring\npick <span class=\"token number\">01</span>b2fd8 <span class=\"token class-name\">New</span> awesome feature\nf b729ad5 fixup\nf e3851e8 another fix<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pick a9c8a1d <span class=\"token class-name\">Some</span> refactoring\npick <span class=\"token number\">01</span>b2fd8 <span class=\"token class-name\">New</span> awesome feature\ns b729ad5 fixup\ns e3851e8 another fix<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Newer</span><span class=\"token punctuation\">,</span> awesomer features\n\n# <span class=\"token class-name\">Please</span> enter the commit message <span class=\"token keyword\">for</span> your <span class=\"token class-name\"><span class=\"token namespace\">changes<span class=\"token punctuation\">.</span></span> Lines</span> starting\n# <span class=\"token keyword\">with</span> <span class=\"token string\">'#'</span> will be ignored<span class=\"token punctuation\">,</span> and an empty message aborts the commit<span class=\"token punctuation\">.</span>\n# rebase in progress<span class=\"token punctuation\">;</span> onto <span class=\"token number\">8074d</span><span class=\"token number\">12</span>\n# <span class=\"token class-name\">You</span> are currently editing a commit <span class=\"token keyword\">while</span> rebasing branch <span class=\"token string\">'main'</span> on <span class=\"token string\">'8074d12'</span><span class=\"token punctuation\">.</span>\n#\n# <span class=\"token class-name\">Changes</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">be</span> committed<span class=\"token operator\">:</span>\n#\tmodified<span class=\"token operator\">:</span>   README<span class=\"token punctuation\">.</span>md\n#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果成功了, 你应该看到类似下面的内容:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ <span class=\"token class-name\">Successfully</span> rebased and updated refs<span class=\"token operator\">/</span>heads<span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"安全合并-merging-策略\"><a href=\"#安全合并-merging-策略\" class=\"headerlink\" title=\"安全合并(merging)策略\"></a>安全合并(merging)策略</h4><p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。<code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多Git资料，参见[IDEA 中如何完成 Git 版本回退？][IDEA _ Git 1]）。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git merge <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>ff <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>commit my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"我需要将一个分支合并成一个提交-commit\"><a href=\"#我需要将一个分支合并成一个提交-commit\" class=\"headerlink\" title=\"我需要将一个分支合并成一个提交(commit)\"></a>我需要将一个分支合并成一个提交(commit)</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git merge <span class=\"token operator\">--</span>squash my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"我只想组合-combine-未推的提交-unpushed-commit\"><a href=\"#我只想组合-combine-未推的提交-unpushed-commit\" class=\"headerlink\" title=\"我只想组合(combine)未推的提交(unpushed commit)\"></a>我只想组合(combine)未推的提交(unpushed commit)</h4><p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。</p>\n<h3 id=\"检查是否分支上的所有提交-commit-都合并-merge-过了\"><a href=\"#检查是否分支上的所有提交-commit-都合并-merge-过了\" class=\"headerlink\" title=\"检查是否分支上的所有提交(commit)都合并(merge)过了\"></a>检查是否分支上的所有提交(commit)都合并(merge)过了</h3><p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git log <span class=\"token operator\">--</span>graph <span class=\"token operator\">--</span>left<span class=\"token operator\">-</span>right <span class=\"token operator\">--</span>cherry<span class=\"token operator\">-</span>pick <span class=\"token operator\">--</span>oneline HEAD<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>feature<span class=\"token operator\">/</span><span class=\"token number\">120</span><span class=\"token operator\">-</span>on<span class=\"token operator\">-</span>scroll<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git log main <span class=\"token operator\">^</span>feature<span class=\"token operator\">/</span><span class=\"token number\">120</span><span class=\"token operator\">-</span>on<span class=\"token operator\">-</span>scroll <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>merges<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"交互式rebase-interactive-rebase-可能出现的问题\"><a href=\"#交互式rebase-interactive-rebase-可能出现的问题\" class=\"headerlink\" title=\"交互式rebase(interactive rebase)可能出现的问题\"></a>交互式rebase(interactive rebase)可能出现的问题</h3><h4 id=\"这个rebase-编辑屏幕出现’noop’\"><a href=\"#这个rebase-编辑屏幕出现’noop’\" class=\"headerlink\" title=\"这个rebase 编辑屏幕出现’noop’\"></a>这个rebase 编辑屏幕出现’noop’</h4><p>如果你看到的是这样:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">noop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:</p>\n<ul>\n<li> 检查确保主(main)分支没有问题</li>\n<li> rebase <code>HEAD~2</code> 或者更早</li>\n</ul>\n<h4 id=\"有冲突的情况\"><a href=\"#有冲突的情况\" class=\"headerlink\" title=\"有冲突的情况\"></a>有冲突的情况</h4><p>如果你不能成功的完成rebase, 你可能必须要解决冲突。</p>\n<p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git status\n<span class=\"token class-name\">On</span> branch my<span class=\"token operator\">-</span>branch\n<span class=\"token class-name\">Changes</span> not staged <span class=\"token keyword\">for</span> commit<span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">update</span> what will be committed<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout -- &lt;file>...\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">discard</span> changes in working directory<span class=\"token punctuation\">)</span>\n\n modified<span class=\"token operator\">:</span>   README<span class=\"token punctuation\">.</span>md<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这个例子里面, <code>README.md</code> 有冲突。打开这个文件找到类似下面的内容:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;</span> HEAD\n   some code\n   <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n   some code\n   <span class=\"token operator\">>>></span><span class=\"token operator\">>>></span><span class=\"token operator\">></span> <span class=\"token keyword\">new</span><span class=\"token operator\">-</span>commit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p>\n<p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ git mergetool <span class=\"token operator\">-</span>t opendiff<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续rebase。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git add README<span class=\"token punctuation\">.</span>md\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">--</span><span class=\"token keyword\">continue</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p>\n<p>任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">--</span>abort<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Stash\"><a href=\"#Stash\" class=\"headerlink\" title=\"Stash\"></a>Stash</h2><h3 id=\"暂存所有改动\"><a href=\"#暂存所有改动\" class=\"headerlink\" title=\"暂存所有改动\"></a>暂存所有改动</h3><p>暂存你工作目录下的所有改动</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你可以使用<code>-u</code>来排除一些文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash <span class=\"token operator\">-</span>u<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"暂存指定文件\"><a href=\"#暂存指定文件\" class=\"headerlink\" title=\"暂存指定文件\"></a>暂存指定文件</h3><p>假设你只想暂存某一个文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash push working<span class=\"token operator\">-</span>directory<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span>filename<span class=\"token punctuation\">.</span>ext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设你想暂存多个文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash push working<span class=\"token operator\">-</span>directory<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span>filename1<span class=\"token punctuation\">.</span>ext working<span class=\"token operator\">-</span>directory<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span>filename2<span class=\"token punctuation\">.</span>ext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"暂存时记录消息\"><a href=\"#暂存时记录消息\" class=\"headerlink\" title=\"暂存时记录消息\"></a>暂存时记录消息</h3><p>这样你可以在<code>list</code>时看到它</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash save <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>message<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash push <span class=\"token operator\">-</span>m <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>message<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"使用某个指定暂存\"><a href=\"#使用某个指定暂存\" class=\"headerlink\" title=\"使用某个指定暂存\"></a>使用某个指定暂存</h3><p>首先你可以查看你的<code>stash</code>记录</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后你可以<code>apply</code>某个<code>stash</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash apply <span class=\"token string\">\"stash@&#123;n&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此处， ‘n’是<code>stash</code>在栈中的位置，最上层的<code>stash</code>会是0</p>\n<p>除此之外，也可以使用时间标记(假如你能记得的话)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash apply <span class=\"token string\">\"stash@&#123;2.hours.ago&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"暂存时保留未暂存的内容\"><a href=\"#暂存时保留未暂存的内容\" class=\"headerlink\" title=\"暂存时保留未暂存的内容\"></a>暂存时保留未暂存的内容</h3><p>你需要手动create一个<code>stash commit</code>， 然后使用<code>git stash store</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash create\n$ git stash store <span class=\"token operator\">-</span>m <span class=\"token string\">\"commit-message\"</span> CREATED_SHA1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"杂项-Miscellaneous-Objects\"><a href=\"#杂项-Miscellaneous-Objects\" class=\"headerlink\" title=\"杂项(Miscellaneous Objects)\"></a>杂项(Miscellaneous Objects)</h2><h3 id=\"克隆所有子模块\"><a href=\"#克隆所有子模块\" class=\"headerlink\" title=\"克隆所有子模块\"></a>克隆所有子模块</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git clone <span class=\"token operator\">--</span>recursive git<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>foo<span class=\"token operator\">/</span>bar<span class=\"token punctuation\">.</span>git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果已经克隆了:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git submodule update <span class=\"token operator\">--</span>init <span class=\"token operator\">--</span>recursive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"删除标签-tag\"><a href=\"#删除标签-tag\" class=\"headerlink\" title=\"删除标签(tag)\"></a>删除标签(tag)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git tag <span class=\"token operator\">-</span>d <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>tag_name<span class=\"token punctuation\">></span></span>\n$ git push <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>remote<span class=\"token punctuation\">></span></span> <span class=\"token operator\">:</span>refs<span class=\"token operator\">/</span>tags<span class=\"token operator\">/</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>tag_name<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"恢复已删除标签-tag\"><a href=\"#恢复已删除标签-tag\" class=\"headerlink\" title=\"恢复已删除标签(tag)\"></a>恢复已删除标签(tag)</h3><p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git fsck <span class=\"token operator\">--</span>unreachable <span class=\"token operator\">|</span> grep tag<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>记下这个标签(tag)的hash，然后用Git的 update-ref</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git update<span class=\"token operator\">-</span>ref refs<span class=\"token operator\">/</span>tags<span class=\"token operator\">/</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>tag_name<span class=\"token punctuation\">></span></span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>hash<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这时你的标签(tag)应该已经恢复了。</p>\n<h3 id=\"已删除补丁-patch\"><a href=\"#已删除补丁-patch\" class=\"headerlink\" title=\"已删除补丁(patch)\"></a>已删除补丁(patch)</h3><p>如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p>\n<p>做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。</p>\n<h2 id=\"跟踪文件-Tracking-Files\"><a href=\"#跟踪文件-Tracking-Files\" class=\"headerlink\" title=\"跟踪文件(Tracking Files)\"></a>跟踪文件(Tracking Files)</h2><h3 id=\"我只想改变一个文件名字的大小写，而不修改内容\"><a href=\"#我只想改变一个文件名字的大小写，而不修改内容\" class=\"headerlink\" title=\"我只想改变一个文件名字的大小写，而不修改内容\"></a>我只想改变一个文件名字的大小写，而不修改内容</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git mv <span class=\"token operator\">--</span>force myfile <span class=\"token class-name\">MyFile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想从Git删除一个文件，但保留该文件\"><a href=\"#我想从Git删除一个文件，但保留该文件\" class=\"headerlink\" title=\"我想从Git删除一个文件，但保留该文件\"></a>我想从Git删除一个文件，但保留该文件</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git rm <span class=\"token operator\">--</span>cached log<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"配置-Configuration\"><a href=\"#配置-Configuration\" class=\"headerlink\" title=\"配置(Configuration)\"></a>配置(Configuration)</h2><h3 id=\"我想给一些Git命令添加别名-alias\"><a href=\"#我想给一些Git命令添加别名-alias\" class=\"headerlink\" title=\"我想给一些Git命令添加别名(alias)\"></a>我想给一些Git命令添加别名(alias)</h3><p>在 OS X 和 Linux 下, 你的 Git的配置文件储存在 <code>~/.gitconfig</code>。我在<code>[alias]</code> 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span>alias<span class=\"token punctuation\">]</span>\n    a <span class=\"token operator\">=</span> add\n    amend <span class=\"token operator\">=</span> commit <span class=\"token operator\">--</span>amend\n    c <span class=\"token operator\">=</span> commit\n    ca <span class=\"token operator\">=</span> commit <span class=\"token operator\">--</span>amend\n    ci <span class=\"token operator\">=</span> commit <span class=\"token operator\">-</span>a\n    co <span class=\"token operator\">=</span> checkout\n    d <span class=\"token operator\">=</span> diff\n    dc <span class=\"token operator\">=</span> diff <span class=\"token operator\">--</span>changed\n    ds <span class=\"token operator\">=</span> diff <span class=\"token operator\">--</span>staged\n    f <span class=\"token operator\">=</span> fetch\n    loll <span class=\"token operator\">=</span> log <span class=\"token operator\">--</span>graph <span class=\"token operator\">--</span>decorate <span class=\"token operator\">--</span>pretty<span class=\"token operator\">=</span>oneline <span class=\"token operator\">--</span>abbrev<span class=\"token operator\">-</span>commit\n    m <span class=\"token operator\">=</span> merge\n    one <span class=\"token operator\">=</span> log <span class=\"token operator\">--</span>pretty<span class=\"token operator\">=</span>oneline\n    outstanding <span class=\"token operator\">=</span> rebase <span class=\"token operator\">-</span>i @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span>\n    s <span class=\"token operator\">=</span> status\n    unpushed <span class=\"token operator\">=</span> log @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span>\n    wc <span class=\"token operator\">=</span> whatchanged\n    wip <span class=\"token operator\">=</span> rebase <span class=\"token operator\">-</span>i @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span>\n    zap <span class=\"token operator\">=</span> fetch <span class=\"token operator\">-</span>p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"我想缓存一个仓库-repository-的用户名和密码\"><a href=\"#我想缓存一个仓库-repository-的用户名和密码\" class=\"headerlink\" title=\"我想缓存一个仓库(repository)的用户名和密码\"></a>我想缓存一个仓库(repository)的用户名和密码</h3><p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git config <span class=\"token operator\">--</span>global credential<span class=\"token punctuation\">.</span>helper cache\n# <span class=\"token class-name\">Set</span> git <span class=\"token keyword\">to</span> <span class=\"token namespace\">use</span> the credential memory cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git config <span class=\"token operator\">--</span>global credential<span class=\"token punctuation\">.</span>helper <span class=\"token string\">'cache --timeout=3600'</span>\n# <span class=\"token class-name\">Set</span> the cache <span class=\"token keyword\">to</span> <span class=\"token namespace\">timeout</span> after <span class=\"token number\">1</span> hour <span class=\"token punctuation\">(</span>setting is in seconds<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"我不知道我做错了些什么\"><a href=\"#我不知道我做错了些什么\" class=\"headerlink\" title=\"我不知道我做错了些什么\"></a>我不知道我做错了些什么</h3><p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p>\n<p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog\n<span class=\"token number\">0</span>a2e358 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> reset<span class=\"token operator\">:</span> moving <span class=\"token keyword\">to</span> HEAD<span class=\"token operator\">~</span><span class=\"token number\">2</span>\n<span class=\"token number\">0254</span>ea7 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from <span class=\"token number\">2.2</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">main</span>\nc10f740 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from main <span class=\"token keyword\">to</span> <span class=\"token number\">2.2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@&#123;0&#125;</code>标识.</p>\n<p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset <span class=\"token operator\">--</span>hard <span class=\"token number\">0254</span>ea7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>git对于大家应该都不太陌生，熟练使用git已经成为程序员的一项基本技能，尽管在工作中有诸如 <code>Sourcetree</code>这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的git命令。  </p>\n<p>下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。  </p>\n<h3 id=\"我刚才提交了什么\"><a href=\"#我刚才提交了什么\" class=\"headerlink\" title=\"我刚才提交了什么?\"></a>我刚才提交了什么?</h3><p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git show<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git log <span class=\"token operator\">-</span>n1 <span class=\"token operator\">-</span>p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我的提交信息-commit-message-写错了\"><a href=\"#我的提交信息-commit-message-写错了\" class=\"headerlink\" title=\"我的提交信息(commit message)写错了\"></a>我的提交信息(commit message)写错了</h3><p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">--</span>amend <span class=\"token operator\">--</span>only<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">--</span>amend <span class=\"token operator\">--</span>only <span class=\"token operator\">-</span>m <span class=\"token string\">'xxxxxxx'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p>\n<h3 id=\"我提交-commit-里的用户名和邮箱不对\"><a href=\"#我提交-commit-里的用户名和邮箱不对\" class=\"headerlink\" title=\"我提交(commit)里的用户名和邮箱不对\"></a>我提交(commit)里的用户名和邮箱不对</h3><p>如果这只是单个提交(commit)，修改它：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">--</span>amend <span class=\"token operator\">--</span>author <span class=\"token string\">\"New Authorname &lt;authoremail@mydomain.com>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.</p>\n<h3 id=\"我想从一个提交-commit-里移除一个文件\"><a href=\"#我想从一个提交-commit-里移除一个文件\" class=\"headerlink\" title=\"我想从一个提交(commit)里移除一个文件\"></a>我想从一个提交(commit)里移除一个文件</h3><p>通过下面的方法，从一个提交(commit)里移除一个文件:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git checkout HEAD<span class=\"token operator\">^</span> myfile\n$ git add <span class=\"token operator\">-</span><span class=\"token class-name\">A</span>\n$ git commit <span class=\"token operator\">--</span>amend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</p>\n<h3 id=\"我想删除我的的最后一次提交-commit\"><a href=\"#我想删除我的的最后一次提交-commit\" class=\"headerlink\" title=\"我想删除我的的最后一次提交(commit)\"></a>我想删除我的的最后一次提交(commit)</h3><p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset HEAD<span class=\"token operator\">^</span> <span class=\"token operator\">--</span>hard\n$ git push <span class=\"token operator\">-</span>f <span class=\"token punctuation\">[</span>remote<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>soft HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>。</p>\n<h3 id=\"删除任意提交-commit\"><a href=\"#删除任意提交-commit\" class=\"headerlink\" title=\"删除任意提交(commit)\"></a>删除任意提交(commit)</h3><p>同样的警告：不到万不得已的时候不要这么做.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git rebase <span class=\"token operator\">--</span>onto SHA1_OF_BAD_COMMIT<span class=\"token operator\">^</span> SHA1_OF_BAD_COMMIT\n$ git push <span class=\"token operator\">-</span>f <span class=\"token punctuation\">[</span>remote<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。</p>\n<h3 id=\"我尝试推一个修正后的提交-amended-commit-到远程，但是报错：\"><a href=\"#我尝试推一个修正后的提交-amended-commit-到远程，但是报错：\" class=\"headerlink\" title=\"我尝试推一个修正后的提交(amended commit)到远程，但是报错：\"></a>我尝试推一个修正后的提交(amended commit)到远程，但是报错：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">To</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>yourusername<span class=\"token operator\">/</span>repo<span class=\"token punctuation\">.</span>git\n<span class=\"token operator\">!</span> <span class=\"token punctuation\">[</span>rejected<span class=\"token punctuation\">]</span>        mybranch <span class=\"token operator\">-></span> mybranch <span class=\"token punctuation\">(</span>non<span class=\"token operator\">-</span>fast<span class=\"token operator\">-</span>forward<span class=\"token punctuation\">)</span>\nerror<span class=\"token operator\">:</span> failed <span class=\"token keyword\">to</span> <span class=\"token namespace\">push</span> some refs <span class=\"token keyword\">to</span> <span class=\"token string\">'https://github.com/tanay1337/webmaker.org.git'</span>\nhint<span class=\"token operator\">:</span> <span class=\"token class-name\">Updates</span> were rejected because the tip of your current branch is behind\nhint<span class=\"token operator\">:</span> its remote <span class=\"token class-name\"><span class=\"token namespace\">counterpart<span class=\"token punctuation\">.</span></span> Integrate</span> the remote changes <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>\nhint<span class=\"token operator\">:</span> <span class=\"token string\">'git pull ...'</span><span class=\"token punctuation\">)</span> before pushing again<span class=\"token punctuation\">.</span>\nhint<span class=\"token operator\">:</span> <span class=\"token class-name\">See</span> the <span class=\"token string\">'Note about fast-forwards'</span> in <span class=\"token string\">'git push --help'</span> <span class=\"token keyword\">for</span> details<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。注意 – 总是 确保你指明一个分支!</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git push origin mybranch <span class=\"token operator\">-</span>f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p>\n<h3 id=\"我意外的做了一次硬重置-hard-reset-，我想找回我的内容\"><a href=\"#我意外的做了一次硬重置-hard-reset-，我想找回我的内容\" class=\"headerlink\" title=\"我意外的做了一次硬重置(hard reset)，我想找回我的内容\"></a>我意外的做了一次硬重置(hard reset)，我想找回我的内容</h3><p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard SHA1234<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样就完成了。</p>\n<h2 id=\"暂存-Staging\"><a href=\"#暂存-Staging\" class=\"headerlink\" title=\"暂存(Staging)\"></a>暂存(Staging)</h2><h3 id=\"我需要把暂存的内容添加到上一次的提交-commit\"><a href=\"#我需要把暂存的内容添加到上一次的提交-commit\" class=\"headerlink\" title=\"我需要把暂存的内容添加到上一次的提交(commit)\"></a>我需要把暂存的内容添加到上一次的提交(commit)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ git commit <span class=\"token operator\">--</span>amend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想要暂存一个新文件的一部分，而不是这个文件的全部\"><a href=\"#我想要暂存一个新文件的一部分，而不是这个文件的全部\" class=\"headerlink\" title=\"我想要暂存一个新文件的一部分，而不是这个文件的全部\"></a>我想要暂存一个新文件的一部分，而不是这个文件的全部</h3><p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git add <span class=\"token operator\">--</span>patch filename<span class=\"token punctuation\">.</span>x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git add <span class=\"token operator\">-</span><span class=\"token class-name\">N</span> filename<span class=\"token punctuation\">.</span>x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p>\n<h3 id=\"我想把在一个文件里的变化-changes-加到两个提交-commit-里\"><a href=\"#我想把在一个文件里的变化-changes-加到两个提交-commit-里\" class=\"headerlink\" title=\"我想把在一个文件里的变化(changes)加到两个提交(commit)里\"></a>我想把在一个文件里的变化(changes)加到两个提交(commit)里</h3><p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p>\n<h3 id=\"我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\"><a href=\"#我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\" class=\"headerlink\" title=\"我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\"></a>我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3><p>多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"WIP\"</span>\n$ git add <span class=\"token punctuation\">.</span>\n$ git stash\n$ git reset HEAD<span class=\"token operator\">^</span>\n$ git stash pop <span class=\"token operator\">--</span>index <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意1: 这里使用<code>pop</code>仅仅是因为想尽可能保持幂等。注意2: 假如你不加上<code>--index</code>你会把暂存的文件标记为为存储。</p>\n<h2 id=\"未暂存-Unstaged-的内容\"><a href=\"#未暂存-Unstaged-的内容\" class=\"headerlink\" title=\"未暂存(Unstaged)的内容\"></a>未暂存(Unstaged)的内容</h2><h3 id=\"我想把未暂存的内容移动到一个新分支\"><a href=\"#我想把未暂存的内容移动到一个新分支\" class=\"headerlink\" title=\"我想把未暂存的内容移动到一个新分支\"></a>我想把未暂存的内容移动到一个新分支</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git checkout <span class=\"token operator\">-</span>b my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想把未暂存的内容移动到另一个已存在的分支\"><a href=\"#我想把未暂存的内容移动到另一个已存在的分支\" class=\"headerlink\" title=\"我想把未暂存的内容移动到另一个已存在的分支\"></a>我想把未暂存的内容移动到另一个已存在的分支</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash\n$ git checkout my<span class=\"token operator\">-</span>branch\n$ git stash pop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"我想丢弃本地未提交的变化-uncommitted-changes\"><a href=\"#我想丢弃本地未提交的变化-uncommitted-changes\" class=\"headerlink\" title=\"我想丢弃本地未提交的变化(uncommitted changes)\"></a>我想丢弃本地未提交的变化(uncommitted changes)</h3><p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"># one commit\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">^</span>\n# two commits\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">^</span><span class=\"token operator\">^</span>\n# four commits\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">~</span><span class=\"token number\">4</span>\n# or\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重置某个特殊的文件, 你可以用文件名做为参数:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想丢弃某些未暂存的内容\"><a href=\"#我想丢弃某些未暂存的内容\" class=\"headerlink\" title=\"我想丢弃某些未暂存的内容\"></a>我想丢弃某些未暂存的内容</h3><p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p>\n<p>签出(checkout)不需要的内容，保留需要的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git checkout <span class=\"token operator\">-</span>p\n# <span class=\"token class-name\">Answer</span> y <span class=\"token keyword\">to</span> <span class=\"token namespace\">all</span> of the snippets you want <span class=\"token keyword\">to</span> <span class=\"token namespace\">drop</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>另外一个方法是使用 <code>stash</code>， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash <span class=\"token operator\">-</span>p\n# <span class=\"token class-name\">Select</span> all of the snippets you want <span class=\"token keyword\">to</span> <span class=\"token namespace\">save</span>\n$ git reset <span class=\"token operator\">--</span>hard\n$ git stash pop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>或者, stash 你不需要的部分, 然后stash drop。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash <span class=\"token operator\">-</span>p\n# <span class=\"token class-name\">Select</span> all of the snippets you don't want <span class=\"token keyword\">to</span> <span class=\"token namespace\">save</span>\n$ git stash drop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"分支-Branches\"><a href=\"#分支-Branches\" class=\"headerlink\" title=\"分支(Branches)\"></a>分支(Branches)</h2><h3 id=\"我从错误的分支拉取了内容，或把内容拉取到了错误的分支\"><a href=\"#我从错误的分支拉取了内容，或把内容拉取到了错误的分支\" class=\"headerlink\" title=\"我从错误的分支拉取了内容，或把内容拉取到了错误的分支\"></a>我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3><p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前HEAD的指向。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog\nab7555f HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> pull origin wrong<span class=\"token operator\">-</span>branch<span class=\"token operator\">:</span> <span class=\"token class-name\">Fast</span><span class=\"token operator\">-</span>forward\nc5bc55a HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> checkout message goes here<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>重置分支到你所需的提交(desired commit):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset <span class=\"token operator\">--</span>hard c5bc55a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>完成。</p>\n<h3 id=\"我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致\"><a href=\"#我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致\" class=\"headerlink\" title=\"我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致\"></a>我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3><p>先确认你没有推(push)你的内容到远程。</p>\n<p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git status\n# <span class=\"token class-name\">On</span> branch my<span class=\"token operator\">-</span>branch\n# <span class=\"token class-name\">Your</span> branch is ahead of <span class=\"token string\">'origin/my-branch'</span> by <span class=\"token number\">2</span> commits<span class=\"token punctuation\">.</span>\n#   <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git push\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">publish</span> your local commits<span class=\"token punctuation\">)</span>\n#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一种方法是:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard origin<span class=\"token operator\">/</span>my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我需要提交到一个新分支，但错误的提交到了main\"><a href=\"#我需要提交到一个新分支，但错误的提交到了main\" class=\"headerlink\" title=\"我需要提交到一个新分支，但错误的提交到了main\"></a>我需要提交到一个新分支，但错误的提交到了main</h3><p>在main下创建一个新分支，不切换到新分支,仍在main下:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git branch my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>把main分支重置到前一个提交:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard HEAD<span class=\"token operator\">^</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p>\n<p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的hash(<code>git log</code> 能够完成)， 然后重置到这个hash。使用<code>git push</code> 同步内容到远程。</p>\n<p>例如, main分支想重置到的提交的hash为<code>a13b85e</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard a13b85e\nHEAD is now at a13b85e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>签出(checkout)刚才新建的分支继续工作:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想保留来自另外一个ref-ish的整个文件\"><a href=\"#我想保留来自另外一个ref-ish的整个文件\" class=\"headerlink\" title=\"我想保留来自另外一个ref-ish的整个文件\"></a>我想保留来自另外一个ref-ish的整个文件</h3><p>假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:微信搜索公众号：Java后端编程，回复：java 领取资料 。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>solution<span class=\"token punctuation\">)</span>$ git add <span class=\"token operator\">-</span><span class=\"token class-name\">A</span> <span class=\"token operator\">&amp;&amp;</span> git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"Adding all changes from this spike into one big commit.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p>\n<p>假设你有:</p>\n<ul>\n<li> 分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li>\n<li> 分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li>\n</ul>\n<p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>develop<span class=\"token punctuation\">)</span>$ git checkout solution <span class=\"token operator\">--</span> file1<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"># <span class=\"token class-name\">On</span> branch develop\n# <span class=\"token class-name\">Your</span> branch is up<span class=\"token operator\">-</span><span class=\"token keyword\">to</span><span class=\"token operator\">-</span>date <span class=\"token keyword\">with</span> <span class=\"token string\">'origin/develop'</span><span class=\"token punctuation\">.</span>\n# <span class=\"token class-name\">Changes</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">be</span> committed<span class=\"token operator\">:</span>\n#  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file>...\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">unstage</span><span class=\"token punctuation\">)</span>\n#\n#        modified<span class=\"token operator\">:</span>   file1<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后, 正常提交。</p>\n<p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.</p>\n<h3 id=\"我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里\"><a href=\"#我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里\" class=\"headerlink\" title=\"我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里\"></a>我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3><p>假设你有一个<code>main</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git log\n\ncommit e3851e817c451cc36f2e6f3049db528415e3c114\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Alex</span> <span class=\"token class-name\">Lee</span> <span class=\"token operator\">&lt;</span>alexlee<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">39</span><span class=\"token operator\">:</span><span class=\"token number\">27</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">Bug</span> #<span class=\"token number\">21</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Added</span> CSRF protection\n\ncommit <span class=\"token number\">5</span>ea51731d150f7ddc4a365437931cd8be3bf3131\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Alex</span> <span class=\"token class-name\">Lee</span> <span class=\"token operator\">&lt;</span>alexlee<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">39</span><span class=\"token operator\">:</span><span class=\"token number\">12</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">Bug</span> #<span class=\"token number\">14</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Fixed</span> spacing on title\n\ncommit a13b85e984171c6e2a1729bb061994525f626d14\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Aki</span> <span class=\"token class-name\">Rose</span> <span class=\"token operator\">&lt;</span>akirose<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">21</span> <span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token operator\">:</span><span class=\"token number\">48</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">First</span> commit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>让我们用提交hash(commit hash)标记bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p>\n<p>首先, 我们把<code>main</code>分支重置到正确的提交(<code>a13b85e</code>):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard a13b85e\nHEAD is now at a13b85e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>现在, 我们对 bug #21 创建一个新的分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b <span class=\"token number\">21</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>接着, 我们用 cherry-pick 把对bug #21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>$ git cherry<span class=\"token operator\">-</span>pick e3851e8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.</p>\n<p>再者， 我们为bug #14 创建一个新的分支, 也基于<code>main</code>分支</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>$ git checkout main\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b <span class=\"token number\">14</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>$ git cherry<span class=\"token operator\">-</span>pick <span class=\"token number\">5</span>ea5173<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想删除上游-upstream-分支被删除了的本地分支\"><a href=\"#我想删除上游-upstream-分支被删除了的本地分支\" class=\"headerlink\" title=\"我想删除上游(upstream)分支被删除了的本地分支\"></a>我想删除上游(upstream)分支被删除了的本地分支</h3><p>一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（[IDEA 中玩转 Git][IDEA _ Git]）。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git fetch <span class=\"token operator\">-</span>p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我不小心删除了我的分支\"><a href=\"#我不小心删除了我的分支\" class=\"headerlink\" title=\"我不小心删除了我的分支\"></a>我不小心删除了我的分支</h3><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b my<span class=\"token operator\">-</span>branch\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git branch\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ touch foo<span class=\"token punctuation\">.</span>txt\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ ls\nREADME<span class=\"token punctuation\">.</span>md foo<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加文件并做一次提交</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git add <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git commit <span class=\"token operator\">-</span>m <span class=\"token string\">'foo.txt added'</span>\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ foo<span class=\"token punctuation\">.</span>txt added\n <span class=\"token number\">1</span> files changed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token function\">insertions</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\n create mode <span class=\"token number\">100644</span> foo<span class=\"token punctuation\">.</span>txt\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git log\n\ncommit <span class=\"token number\">4e3</span>cd85a670ced7cc17a2b5d8d3d809ac88d5012\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> siemiatj <span class=\"token operator\">&lt;</span>siemiatj<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Wed</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">30</span> <span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">34</span><span class=\"token operator\">:</span><span class=\"token number\">10</span> <span class=\"token number\">2014</span> <span class=\"token operator\">+</span><span class=\"token number\">0200</span>\n\n    foo<span class=\"token punctuation\">.</span>txt added\n\ncommit <span class=\"token number\">69204</span>cdf0acbab201619d95ad8295928e7f411d5\n<span class=\"token class-name\">Author</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Kate</span> <span class=\"token class-name\">Hudson</span> <span class=\"token operator\">&lt;</span>katehudson<span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span>\n<span class=\"token class-name\">Date</span><span class=\"token operator\">:</span>   <span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">29</span> <span class=\"token number\">13</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">46</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span><span class=\"token number\">0400</span>\n\n    <span class=\"token class-name\">Fixes</span> #<span class=\"token number\">6</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Force</span> pushing after amending commits<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在我们切回到主(main)分支，‘不小心的’删除<code>my-branch</code>分支</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git checkout main\n<span class=\"token class-name\">Switched</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">branch</span> <span class=\"token string\">'main'</span>\n<span class=\"token class-name\">Your</span> branch is up<span class=\"token operator\">-</span><span class=\"token keyword\">to</span><span class=\"token operator\">-</span>date <span class=\"token keyword\">with</span> <span class=\"token string\">'origin/main'</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git branch <span class=\"token operator\">-</span><span class=\"token class-name\">D</span> my<span class=\"token operator\">-</span>branch\n<span class=\"token class-name\">Deleted</span> branch my<span class=\"token operator\">-</span>branch <span class=\"token punctuation\">(</span>was <span class=\"token number\">4e3</span>cd85<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ echo oh noes<span class=\"token punctuation\">,</span> deleted my branch<span class=\"token operator\">!</span>\noh noes<span class=\"token punctuation\">,</span> deleted my branch<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog\n<span class=\"token number\">69204</span>cd HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from my<span class=\"token operator\">-</span>branch <span class=\"token keyword\">to</span> <span class=\"token namespace\">main</span>\n<span class=\"token number\">4e3</span>cd85 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> commit<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">.</span>txt added\n<span class=\"token number\">69204</span>cd HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from main <span class=\"token keyword\">to</span> <span class=\"token namespace\">my</span><span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">-</span>b my<span class=\"token operator\">-</span>branch<span class=\"token operator\">-</span>help\n<span class=\"token class-name\">Switched</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">a</span> <span class=\"token keyword\">new</span> branch <span class=\"token string\">'my-branch-help'</span>\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">-</span>help<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard <span class=\"token number\">4e3</span>cd85\nHEAD is now at <span class=\"token number\">4e3</span>cd85 foo<span class=\"token punctuation\">.</span>txt added\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token operator\">-</span>help<span class=\"token punctuation\">)</span>$ ls\nREADME<span class=\"token punctuation\">.</span>md foo<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看! 我们把删除的文件找回来了。Git的 <code>reflog</code> 在rebasing出错的时候也是同样有用的。</p>\n<h3 id=\"我想删除一个分支\"><a href=\"#我想删除一个分支\" class=\"headerlink\" title=\"我想删除一个分支\"></a>我想删除一个分支</h3><p>删除一个远程分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git push origin <span class=\"token operator\">--</span>delete my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你也可以:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git push origin <span class=\"token operator\">:</span>my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除一个本地分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git branch <span class=\"token operator\">-</span><span class=\"token class-name\">D</span> my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想从别人正在工作的远程分支签出-checkout-一个分支\"><a href=\"#我想从别人正在工作的远程分支签出-checkout-一个分支\" class=\"headerlink\" title=\"我想从别人正在工作的远程分支签出(checkout)一个分支\"></a>我想从别人正在工作的远程分支签出(checkout)一个分支</h3><p>首先, 从远程拉取(fetch) 所有分支:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git fetch <span class=\"token operator\">--</span>all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout <span class=\"token operator\">--</span>track origin<span class=\"token operator\">/</span>daves\n<span class=\"token class-name\">Branch</span> daves set up <span class=\"token keyword\">to</span> <span class=\"token namespace\">track</span> remote branch daves from <span class=\"token class-name\"><span class=\"token namespace\">origin<span class=\"token punctuation\">.</span></span>\nSwitched</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">a</span> <span class=\"token keyword\">new</span> branch <span class=\"token string\">'daves'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p>\n<p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p>\n<h2 id=\"Rebasing-和合并-Merging\"><a href=\"#Rebasing-和合并-Merging\" class=\"headerlink\" title=\"Rebasing 和合并(Merging)\"></a>Rebasing 和合并(Merging)</h2><h3 id=\"我想撤销rebase-merge\"><a href=\"#我想撤销rebase-merge\" class=\"headerlink\" title=\"我想撤销rebase/merge\"></a>我想撤销rebase/merge</h3><p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>hard ORIG_HEAD<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我已经rebase过-但是我不想强推-force-push\"><a href=\"#我已经rebase过-但是我不想强推-force-push\" class=\"headerlink\" title=\"我已经rebase过, 但是我不想强推(force push)\"></a>我已经rebase过, 但是我不想强推(force push)</h3><p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git checkout my<span class=\"token operator\">-</span>branch\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i main\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git checkout main\n<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git merge <span class=\"token operator\">--</span>ff<span class=\"token operator\">-</span>only my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"我需要组合-combine-几个提交-commit\"><a href=\"#我需要组合-combine-几个提交-commit\" class=\"headerlink\" title=\"我需要组合(combine)几个提交(commit)\"></a>我需要组合(combine)几个提交(commit)</h3><p>假设你的工作分支将会做对于 <code>main</code> 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git reset <span class=\"token operator\">--</span>soft main\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git commit <span class=\"token operator\">-</span>am <span class=\"token string\">\"New awesome feature\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行rebase， 组合最近3次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i HEAD<span class=\"token operator\">~</span><span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pick a9c8a1d <span class=\"token class-name\">Some</span> refactoring\npick <span class=\"token number\">01</span>b2fd8 <span class=\"token class-name\">New</span> awesome feature\npick b729ad5 fixup\npick e3851e8 another fix\n\n# <span class=\"token class-name\">Rebase</span> <span class=\"token number\">8074d</span><span class=\"token number\">12.</span><span class=\"token punctuation\">.</span>b729ad5 onto <span class=\"token number\">8074d</span><span class=\"token number\">12</span>\n#\n# <span class=\"token class-name\">Commands</span><span class=\"token operator\">:</span>\n#  p<span class=\"token punctuation\">,</span> pick <span class=\"token operator\">=</span> use commit\n#  r<span class=\"token punctuation\">,</span> reword <span class=\"token operator\">=</span> use commit<span class=\"token punctuation\">,</span> but edit the commit message\n#  e<span class=\"token punctuation\">,</span> edit <span class=\"token operator\">=</span> use commit<span class=\"token punctuation\">,</span> but stop <span class=\"token keyword\">for</span> amending\n#  s<span class=\"token punctuation\">,</span> squash <span class=\"token operator\">=</span> use commit<span class=\"token punctuation\">,</span> but meld into previous commit\n#  f<span class=\"token punctuation\">,</span> fixup <span class=\"token operator\">=</span> like <span class=\"token string\">\"squash\"</span><span class=\"token punctuation\">,</span> but discard <span class=\"token keyword\">this</span> commit's log message\n#  x<span class=\"token punctuation\">,</span> exec <span class=\"token operator\">=</span> run command <span class=\"token punctuation\">(</span>the rest of the line<span class=\"token punctuation\">)</span> using shell\n#\n# <span class=\"token class-name\">These</span> lines can be re<span class=\"token operator\">-</span>ordered<span class=\"token punctuation\">;</span> they are executed from top <span class=\"token keyword\">to</span> <span class=\"token namespace\">bottom<span class=\"token punctuation\">.</span></span>\n#\n# <span class=\"token class-name\">If</span> you remove a line here THAT COMMIT WILL BE LOST<span class=\"token punctuation\">.</span>\n#\n# <span class=\"token class-name\">However</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span> you remove everything<span class=\"token punctuation\">,</span> the rebase will be aborted<span class=\"token punctuation\">.</span>\n#\n# <span class=\"token class-name\">Note</span> that empty commits are commented out<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p>\n<p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p>\n<p>例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pick a9c8a1d <span class=\"token class-name\">Some</span> refactoring\npick <span class=\"token number\">01</span>b2fd8 <span class=\"token class-name\">New</span> awesome feature\nf b729ad5 fixup\nf e3851e8 another fix<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pick a9c8a1d <span class=\"token class-name\">Some</span> refactoring\npick <span class=\"token number\">01</span>b2fd8 <span class=\"token class-name\">New</span> awesome feature\ns b729ad5 fixup\ns e3851e8 another fix<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Newer</span><span class=\"token punctuation\">,</span> awesomer features\n\n# <span class=\"token class-name\">Please</span> enter the commit message <span class=\"token keyword\">for</span> your <span class=\"token class-name\"><span class=\"token namespace\">changes<span class=\"token punctuation\">.</span></span> Lines</span> starting\n# <span class=\"token keyword\">with</span> <span class=\"token string\">'#'</span> will be ignored<span class=\"token punctuation\">,</span> and an empty message aborts the commit<span class=\"token punctuation\">.</span>\n# rebase in progress<span class=\"token punctuation\">;</span> onto <span class=\"token number\">8074d</span><span class=\"token number\">12</span>\n# <span class=\"token class-name\">You</span> are currently editing a commit <span class=\"token keyword\">while</span> rebasing branch <span class=\"token string\">'main'</span> on <span class=\"token string\">'8074d12'</span><span class=\"token punctuation\">.</span>\n#\n# <span class=\"token class-name\">Changes</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">be</span> committed<span class=\"token operator\">:</span>\n#\tmodified<span class=\"token operator\">:</span>   README<span class=\"token punctuation\">.</span>md\n#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果成功了, 你应该看到类似下面的内容:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ <span class=\"token class-name\">Successfully</span> rebased and updated refs<span class=\"token operator\">/</span>heads<span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"安全合并-merging-策略\"><a href=\"#安全合并-merging-策略\" class=\"headerlink\" title=\"安全合并(merging)策略\"></a>安全合并(merging)策略</h4><p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。<code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多Git资料，参见[IDEA 中如何完成 Git 版本回退？][IDEA _ Git 1]）。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git merge <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>ff <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>commit my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"我需要将一个分支合并成一个提交-commit\"><a href=\"#我需要将一个分支合并成一个提交-commit\" class=\"headerlink\" title=\"我需要将一个分支合并成一个提交(commit)\"></a>我需要将一个分支合并成一个提交(commit)</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git merge <span class=\"token operator\">--</span>squash my<span class=\"token operator\">-</span>branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"我只想组合-combine-未推的提交-unpushed-commit\"><a href=\"#我只想组合-combine-未推的提交-unpushed-commit\" class=\"headerlink\" title=\"我只想组合(combine)未推的提交(unpushed commit)\"></a>我只想组合(combine)未推的提交(unpushed commit)</h4><p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">-</span>i @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。</p>\n<h3 id=\"检查是否分支上的所有提交-commit-都合并-merge-过了\"><a href=\"#检查是否分支上的所有提交-commit-都合并-merge-过了\" class=\"headerlink\" title=\"检查是否分支上的所有提交(commit)都合并(merge)过了\"></a>检查是否分支上的所有提交(commit)都合并(merge)过了</h3><p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git log <span class=\"token operator\">--</span>graph <span class=\"token operator\">--</span>left<span class=\"token operator\">-</span>right <span class=\"token operator\">--</span>cherry<span class=\"token operator\">-</span>pick <span class=\"token operator\">--</span>oneline HEAD<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>feature<span class=\"token operator\">/</span><span class=\"token number\">120</span><span class=\"token operator\">-</span>on<span class=\"token operator\">-</span>scroll<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git log main <span class=\"token operator\">^</span>feature<span class=\"token operator\">/</span><span class=\"token number\">120</span><span class=\"token operator\">-</span>on<span class=\"token operator\">-</span>scroll <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>merges<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"交互式rebase-interactive-rebase-可能出现的问题\"><a href=\"#交互式rebase-interactive-rebase-可能出现的问题\" class=\"headerlink\" title=\"交互式rebase(interactive rebase)可能出现的问题\"></a>交互式rebase(interactive rebase)可能出现的问题</h3><h4 id=\"这个rebase-编辑屏幕出现’noop’\"><a href=\"#这个rebase-编辑屏幕出现’noop’\" class=\"headerlink\" title=\"这个rebase 编辑屏幕出现’noop’\"></a>这个rebase 编辑屏幕出现’noop’</h4><p>如果你看到的是这样:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">noop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:</p>\n<ul>\n<li> 检查确保主(main)分支没有问题</li>\n<li> rebase <code>HEAD~2</code> 或者更早</li>\n</ul>\n<h4 id=\"有冲突的情况\"><a href=\"#有冲突的情况\" class=\"headerlink\" title=\"有冲突的情况\"></a>有冲突的情况</h4><p>如果你不能成功的完成rebase, 你可能必须要解决冲突。</p>\n<p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git status\n<span class=\"token class-name\">On</span> branch my<span class=\"token operator\">-</span>branch\n<span class=\"token class-name\">Changes</span> not staged <span class=\"token keyword\">for</span> commit<span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">update</span> what will be committed<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout -- &lt;file>...\"</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">discard</span> changes in working directory<span class=\"token punctuation\">)</span>\n\n modified<span class=\"token operator\">:</span>   README<span class=\"token punctuation\">.</span>md<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这个例子里面, <code>README.md</code> 有冲突。打开这个文件找到类似下面的内容:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;</span> HEAD\n   some code\n   <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n   some code\n   <span class=\"token operator\">>>></span><span class=\"token operator\">>>></span><span class=\"token operator\">></span> <span class=\"token keyword\">new</span><span class=\"token operator\">-</span>commit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p>\n<p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ git mergetool <span class=\"token operator\">-</span>t opendiff<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续rebase。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git add README<span class=\"token punctuation\">.</span>md\n<span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">--</span><span class=\"token keyword\">continue</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p>\n<p>任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>my<span class=\"token operator\">-</span>branch<span class=\"token punctuation\">)</span>$ git rebase <span class=\"token operator\">--</span>abort<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Stash\"><a href=\"#Stash\" class=\"headerlink\" title=\"Stash\"></a>Stash</h2><h3 id=\"暂存所有改动\"><a href=\"#暂存所有改动\" class=\"headerlink\" title=\"暂存所有改动\"></a>暂存所有改动</h3><p>暂存你工作目录下的所有改动</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你可以使用<code>-u</code>来排除一些文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash <span class=\"token operator\">-</span>u<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"暂存指定文件\"><a href=\"#暂存指定文件\" class=\"headerlink\" title=\"暂存指定文件\"></a>暂存指定文件</h3><p>假设你只想暂存某一个文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash push working<span class=\"token operator\">-</span>directory<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span>filename<span class=\"token punctuation\">.</span>ext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设你想暂存多个文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash push working<span class=\"token operator\">-</span>directory<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span>filename1<span class=\"token punctuation\">.</span>ext working<span class=\"token operator\">-</span>directory<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span>filename2<span class=\"token punctuation\">.</span>ext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"暂存时记录消息\"><a href=\"#暂存时记录消息\" class=\"headerlink\" title=\"暂存时记录消息\"></a>暂存时记录消息</h3><p>这样你可以在<code>list</code>时看到它</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash save <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>message<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash push <span class=\"token operator\">-</span>m <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>message<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"使用某个指定暂存\"><a href=\"#使用某个指定暂存\" class=\"headerlink\" title=\"使用某个指定暂存\"></a>使用某个指定暂存</h3><p>首先你可以查看你的<code>stash</code>记录</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后你可以<code>apply</code>某个<code>stash</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash apply <span class=\"token string\">\"stash@&#123;n&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此处， ‘n’是<code>stash</code>在栈中的位置，最上层的<code>stash</code>会是0</p>\n<p>除此之外，也可以使用时间标记(假如你能记得的话)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash apply <span class=\"token string\">\"stash@&#123;2.hours.ago&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"暂存时保留未暂存的内容\"><a href=\"#暂存时保留未暂存的内容\" class=\"headerlink\" title=\"暂存时保留未暂存的内容\"></a>暂存时保留未暂存的内容</h3><p>你需要手动create一个<code>stash commit</code>， 然后使用<code>git stash store</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git stash create\n$ git stash store <span class=\"token operator\">-</span>m <span class=\"token string\">\"commit-message\"</span> CREATED_SHA1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"杂项-Miscellaneous-Objects\"><a href=\"#杂项-Miscellaneous-Objects\" class=\"headerlink\" title=\"杂项(Miscellaneous Objects)\"></a>杂项(Miscellaneous Objects)</h2><h3 id=\"克隆所有子模块\"><a href=\"#克隆所有子模块\" class=\"headerlink\" title=\"克隆所有子模块\"></a>克隆所有子模块</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git clone <span class=\"token operator\">--</span>recursive git<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>foo<span class=\"token operator\">/</span>bar<span class=\"token punctuation\">.</span>git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果已经克隆了:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git submodule update <span class=\"token operator\">--</span>init <span class=\"token operator\">--</span>recursive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"删除标签-tag\"><a href=\"#删除标签-tag\" class=\"headerlink\" title=\"删除标签(tag)\"></a>删除标签(tag)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git tag <span class=\"token operator\">-</span>d <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>tag_name<span class=\"token punctuation\">></span></span>\n$ git push <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>remote<span class=\"token punctuation\">></span></span> <span class=\"token operator\">:</span>refs<span class=\"token operator\">/</span>tags<span class=\"token operator\">/</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>tag_name<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"恢复已删除标签-tag\"><a href=\"#恢复已删除标签-tag\" class=\"headerlink\" title=\"恢复已删除标签(tag)\"></a>恢复已删除标签(tag)</h3><p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git fsck <span class=\"token operator\">--</span>unreachable <span class=\"token operator\">|</span> grep tag<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>记下这个标签(tag)的hash，然后用Git的 update-ref</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git update<span class=\"token operator\">-</span>ref refs<span class=\"token operator\">/</span>tags<span class=\"token operator\">/</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>tag_name<span class=\"token punctuation\">></span></span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>hash<span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这时你的标签(tag)应该已经恢复了。</p>\n<h3 id=\"已删除补丁-patch\"><a href=\"#已删除补丁-patch\" class=\"headerlink\" title=\"已删除补丁(patch)\"></a>已删除补丁(patch)</h3><p>如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p>\n<p>做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。</p>\n<h2 id=\"跟踪文件-Tracking-Files\"><a href=\"#跟踪文件-Tracking-Files\" class=\"headerlink\" title=\"跟踪文件(Tracking Files)\"></a>跟踪文件(Tracking Files)</h2><h3 id=\"我只想改变一个文件名字的大小写，而不修改内容\"><a href=\"#我只想改变一个文件名字的大小写，而不修改内容\" class=\"headerlink\" title=\"我只想改变一个文件名字的大小写，而不修改内容\"></a>我只想改变一个文件名字的大小写，而不修改内容</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git mv <span class=\"token operator\">--</span>force myfile <span class=\"token class-name\">MyFile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"我想从Git删除一个文件，但保留该文件\"><a href=\"#我想从Git删除一个文件，但保留该文件\" class=\"headerlink\" title=\"我想从Git删除一个文件，但保留该文件\"></a>我想从Git删除一个文件，但保留该文件</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git rm <span class=\"token operator\">--</span>cached log<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"配置-Configuration\"><a href=\"#配置-Configuration\" class=\"headerlink\" title=\"配置(Configuration)\"></a>配置(Configuration)</h2><h3 id=\"我想给一些Git命令添加别名-alias\"><a href=\"#我想给一些Git命令添加别名-alias\" class=\"headerlink\" title=\"我想给一些Git命令添加别名(alias)\"></a>我想给一些Git命令添加别名(alias)</h3><p>在 OS X 和 Linux 下, 你的 Git的配置文件储存在 <code>~/.gitconfig</code>。我在<code>[alias]</code> 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span>alias<span class=\"token punctuation\">]</span>\n    a <span class=\"token operator\">=</span> add\n    amend <span class=\"token operator\">=</span> commit <span class=\"token operator\">--</span>amend\n    c <span class=\"token operator\">=</span> commit\n    ca <span class=\"token operator\">=</span> commit <span class=\"token operator\">--</span>amend\n    ci <span class=\"token operator\">=</span> commit <span class=\"token operator\">-</span>a\n    co <span class=\"token operator\">=</span> checkout\n    d <span class=\"token operator\">=</span> diff\n    dc <span class=\"token operator\">=</span> diff <span class=\"token operator\">--</span>changed\n    ds <span class=\"token operator\">=</span> diff <span class=\"token operator\">--</span>staged\n    f <span class=\"token operator\">=</span> fetch\n    loll <span class=\"token operator\">=</span> log <span class=\"token operator\">--</span>graph <span class=\"token operator\">--</span>decorate <span class=\"token operator\">--</span>pretty<span class=\"token operator\">=</span>oneline <span class=\"token operator\">--</span>abbrev<span class=\"token operator\">-</span>commit\n    m <span class=\"token operator\">=</span> merge\n    one <span class=\"token operator\">=</span> log <span class=\"token operator\">--</span>pretty<span class=\"token operator\">=</span>oneline\n    outstanding <span class=\"token operator\">=</span> rebase <span class=\"token operator\">-</span>i @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span>\n    s <span class=\"token operator\">=</span> status\n    unpushed <span class=\"token operator\">=</span> log @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span>\n    wc <span class=\"token operator\">=</span> whatchanged\n    wip <span class=\"token operator\">=</span> rebase <span class=\"token operator\">-</span>i @<span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">&#125;</span>\n    zap <span class=\"token operator\">=</span> fetch <span class=\"token operator\">-</span>p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"我想缓存一个仓库-repository-的用户名和密码\"><a href=\"#我想缓存一个仓库-repository-的用户名和密码\" class=\"headerlink\" title=\"我想缓存一个仓库(repository)的用户名和密码\"></a>我想缓存一个仓库(repository)的用户名和密码</h3><p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git config <span class=\"token operator\">--</span>global credential<span class=\"token punctuation\">.</span>helper cache\n# <span class=\"token class-name\">Set</span> git <span class=\"token keyword\">to</span> <span class=\"token namespace\">use</span> the credential memory cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git config <span class=\"token operator\">--</span>global credential<span class=\"token punctuation\">.</span>helper <span class=\"token string\">'cache --timeout=3600'</span>\n# <span class=\"token class-name\">Set</span> the cache <span class=\"token keyword\">to</span> <span class=\"token namespace\">timeout</span> after <span class=\"token number\">1</span> hour <span class=\"token punctuation\">(</span>setting is in seconds<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"我不知道我做错了些什么\"><a href=\"#我不知道我做错了些什么\" class=\"headerlink\" title=\"我不知道我做错了些什么\"></a>我不知道我做错了些什么</h3><p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p>\n<p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>$ git reflog\n<span class=\"token number\">0</span>a2e358 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> reset<span class=\"token operator\">:</span> moving <span class=\"token keyword\">to</span> HEAD<span class=\"token operator\">~</span><span class=\"token number\">2</span>\n<span class=\"token number\">0254</span>ea7 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from <span class=\"token number\">2.2</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">main</span>\nc10f740 HEAD@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> checkout<span class=\"token operator\">:</span> moving from main <span class=\"token keyword\">to</span> <span class=\"token number\">2.2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@&#123;0&#125;</code>标识.</p>\n<p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$ git reset <span class=\"token operator\">--</span>hard <span class=\"token number\">0254</span>ea7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。</p>\n"}],"PostAsset":[{"_id":"source/_posts/感受java8后lambda之美/image_16155432.png","slug":"image_16155432.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_23fab375.png","slug":"image_23fab375.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_7771b4fe.png","slug":"image_7771b4fe.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_79d304da.png","slug":"image_79d304da.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_9186bf98.png","slug":"image_9186bf98.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_c1ac2536.png","slug":"image_c1ac2536.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_eba0197b.png","slug":"image_eba0197b.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0},{"_id":"source/_posts/感受java8后lambda之美/image_ec9c4260.png","slug":"image_ec9c4260.png","post":"cla1u1fni00004sld4m8lg8sb","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cla1u1fni00004sld4m8lg8sb","category_id":"cl8ye4pnx00093eld9k027sjj","_id":"cla1uku9p0003wwldbt0ed88c"},{"post_id":"cla1uku9k0000wwld3jap61ky","category_id":"cla1uku9o0001wwldfw4makkm","_id":"cla1uku9r0007wwld9mll9mgo"},{"post_id":"cla1ut5bv00006llddor7gqde","category_id":"cl8ye4pnx00093eld9k027sjj","_id":"cla1ut5c300026lld21judw1i"},{"post_id":"cla1wfs1m0000hzld2zuj5k6i","category_id":"cla1wfs1q0001hzld8czpfcpj","_id":"cla1wfs1s0004hzld91yb8kap"}],"PostTag":[{"post_id":"cla1uku9k0000wwld3jap61ky","tag_id":"cla1uku9p0002wwlda1xf3awq","_id":"cla1uku9q0005wwld2kxfeiyi"},{"post_id":"cla1u1fni00004sld4m8lg8sb","tag_id":"cla1uku9q0004wwldh2h81kby","_id":"cla1uku9r0009wwldg97i83pp"},{"post_id":"cla1u1fni00004sld4m8lg8sb","tag_id":"cla1uku9q0006wwld30xkfwfq","_id":"cla1uku9r000awwld4xxd5err"},{"post_id":"cla1u1fni00004sld4m8lg8sb","tag_id":"cla1uku9r0008wwldgeqta8zc","_id":"cla1uku9r000bwwld0mje2ssd"},{"post_id":"cla1ut5bv00006llddor7gqde","tag_id":"cla1uku9q0004wwldh2h81kby","_id":"cla1ut5c400046lld8fno6zfo"},{"post_id":"cla1ut5bv00006llddor7gqde","tag_id":"cla1ut5c100016lld3frt4kzl","_id":"cla1ut5c400056lld30ih0cq2"},{"post_id":"cla1ut5bv00006llddor7gqde","tag_id":"cla1ut5c400036lldcyw1873y","_id":"cla1ut5c400066lld9xvm45zo"},{"post_id":"cla1wfs1m0000hzld2zuj5k6i","tag_id":"cla1wfs1r0002hzld1pl29flo","_id":"cla1wfs1s0005hzld7vynglqt"},{"post_id":"cla1wfs1m0000hzld2zuj5k6i","tag_id":"cla1wfs1s0003hzld6z4t63zi","_id":"cla1wfs1t0006hzld8rytdeq0"}],"Tag":[{"name":"ios","_id":"cl8ye4pnv00053eld4g7x30yu"},{"name":"objective-c","_id":"cl8ye4pny000a3eldehy9cg15"},{"name":"设计模式","_id":"cl8ye4po0000d3eldg6et6ncg"},{"name":"思考方式","_id":"cl8ye4po0000h3elddmf2gt5j"},{"name":"java8","_id":"cl9w4jneb00011mld3yk12gz5"},{"name":"web","_id":"cl9w6c3km0002yzld6zdiaiml"},{"name":"java","_id":"cla1u1fnq00024sldg3c7dc7w"},{"name":"hexo","_id":"cla1uku9p0002wwlda1xf3awq"},{"name":"jdk1.8","_id":"cla1uku9q0004wwldh2h81kby"},{"name":"lambda","_id":"cla1uku9q0006wwld30xkfwfq"},{"name":"函数式编程","_id":"cla1uku9r0008wwldgeqta8zc"},{"name":"stream","_id":"cla1ut5c100016lld3frt4kzl"},{"name":"lambda操作","_id":"cla1ut5c400036lldcyw1873y"},{"name":"git","_id":"cla1wfs1r0002hzld1pl29flo"},{"name":"代码合并","_id":"cla1wfs1s0003hzld6z4t63zi"}]}}