<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>45个日常用git合代码的经典操作场景</title>
      <link href="/2022/11/04/45-ge-ri-chang-yong-git-he-dai-ma-de-jing-dian-cao-zuo-chang-jing/"/>
      <url>/2022/11/04/45-ge-ri-chang-yong-git-he-dai-ma-de-jing-dian-cao-zuo-chang-jing/</url>
      
        <content type="html"><![CDATA[<p>git对于大家应该都不太陌生，熟练使用git已经成为程序员的一项基本技能，尽管在工作中有诸如 <code>Sourcetree</code>这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的git命令。  </p><p>下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。  </p><h3 id="我刚才提交了什么"><a href="#我刚才提交了什么" class="headerlink" title="我刚才提交了什么?"></a>我刚才提交了什么?</h3><p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git log <span class="token operator">-</span>n1 <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我的提交信息-commit-message-写错了"><a href="#我的提交信息-commit-message-写错了" class="headerlink" title="我的提交信息(commit message)写错了"></a>我的提交信息(commit message)写错了</h3><p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git commit <span class="token operator">--</span>amend <span class="token operator">--</span>only<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git commit <span class="token operator">--</span>amend <span class="token operator">--</span>only <span class="token operator">-</span>m <span class="token string">'xxxxxxx'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p><h3 id="我提交-commit-里的用户名和邮箱不对"><a href="#我提交-commit-里的用户名和邮箱不对" class="headerlink" title="我提交(commit)里的用户名和邮箱不对"></a>我提交(commit)里的用户名和邮箱不对</h3><p>如果这只是单个提交(commit)，修改它：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git commit <span class="token operator">--</span>amend <span class="token operator">--</span>author <span class="token string">"New Authorname &lt;authoremail@mydomain.com>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.</p><h3 id="我想从一个提交-commit-里移除一个文件"><a href="#我想从一个提交-commit-里移除一个文件" class="headerlink" title="我想从一个提交(commit)里移除一个文件"></a>我想从一个提交(commit)里移除一个文件</h3><p>通过下面的方法，从一个提交(commit)里移除一个文件:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git checkout HEAD<span class="token operator">^</span> myfile$ git add <span class="token operator">-</span><span class="token class-name">A</span>$ git commit <span class="token operator">--</span>amend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</p><h3 id="我想删除我的的最后一次提交-commit"><a href="#我想删除我的的最后一次提交-commit" class="headerlink" title="我想删除我的的最后一次提交(commit)"></a>我想删除我的的最后一次提交(commit)</h3><p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git reset HEAD<span class="token operator">^</span> <span class="token operator">--</span>hard$ git push <span class="token operator">-</span>f <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token operator">*</span><span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>soft HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>。</p><h3 id="删除任意提交-commit"><a href="#删除任意提交-commit" class="headerlink" title="删除任意提交(commit)"></a>删除任意提交(commit)</h3><p>同样的警告：不到万不得已的时候不要这么做.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git rebase <span class="token operator">--</span>onto SHA1_OF_BAD_COMMIT<span class="token operator">^</span> SHA1_OF_BAD_COMMIT$ git push <span class="token operator">-</span>f <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。</p><h3 id="我尝试推一个修正后的提交-amended-commit-到远程，但是报错："><a href="#我尝试推一个修正后的提交-amended-commit-到远程，但是报错：" class="headerlink" title="我尝试推一个修正后的提交(amended commit)到远程，但是报错："></a>我尝试推一个修正后的提交(amended commit)到远程，但是报错：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">To</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>yourusername<span class="token operator">/</span>repo<span class="token punctuation">.</span>git<span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        mybranch <span class="token operator">-></span> mybranch <span class="token punctuation">(</span>non<span class="token operator">-</span>fast<span class="token operator">-</span>forward<span class="token punctuation">)</span>error<span class="token operator">:</span> failed <span class="token keyword">to</span> <span class="token namespace">push</span> some refs <span class="token keyword">to</span> <span class="token string">'https://github.com/tanay1337/webmaker.org.git'</span>hint<span class="token operator">:</span> <span class="token class-name">Updates</span> were rejected because the tip of your current branch is behindhint<span class="token operator">:</span> its remote <span class="token class-name"><span class="token namespace">counterpart<span class="token punctuation">.</span></span> Integrate</span> the remote changes <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span>hint<span class="token operator">:</span> <span class="token string">'git pull ...'</span><span class="token punctuation">)</span> before pushing again<span class="token punctuation">.</span>hint<span class="token operator">:</span> <span class="token class-name">See</span> the <span class="token string">'Note about fast-forwards'</span> in <span class="token string">'git push --help'</span> <span class="token keyword">for</span> details<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。注意 – 总是 确保你指明一个分支!</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git push origin mybranch <span class="token operator">-</span>f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p><h3 id="我意外的做了一次硬重置-hard-reset-，我想找回我的内容"><a href="#我意外的做了一次硬重置-hard-reset-，我想找回我的内容" class="headerlink" title="我意外的做了一次硬重置(hard reset)，我想找回我的内容"></a>我意外的做了一次硬重置(hard reset)，我想找回我的内容</h3><p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reflog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard SHA1234<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就完成了。</p><h2 id="暂存-Staging"><a href="#暂存-Staging" class="headerlink" title="暂存(Staging)"></a>暂存(Staging)</h2><h3 id="我需要把暂存的内容添加到上一次的提交-commit"><a href="#我需要把暂存的内容添加到上一次的提交-commit" class="headerlink" title="我需要把暂存的内容添加到上一次的提交(commit)"></a>我需要把暂存的内容添加到上一次的提交(commit)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token operator">*</span><span class="token punctuation">)</span>$ git commit <span class="token operator">--</span>amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想要暂存一个新文件的一部分，而不是这个文件的全部"><a href="#我想要暂存一个新文件的一部分，而不是这个文件的全部" class="headerlink" title="我想要暂存一个新文件的一部分，而不是这个文件的全部"></a>我想要暂存一个新文件的一部分，而不是这个文件的全部</h3><p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git add <span class="token operator">--</span>patch filename<span class="token punctuation">.</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git add <span class="token operator">-</span><span class="token class-name">N</span> filename<span class="token punctuation">.</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p><h3 id="我想把在一个文件里的变化-changes-加到两个提交-commit-里"><a href="#我想把在一个文件里的变化-changes-加到两个提交-commit-里" class="headerlink" title="我想把在一个文件里的变化(changes)加到两个提交(commit)里"></a>我想把在一个文件里的变化(changes)加到两个提交(commit)里</h3><p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p><h3 id="我想把暂存的内容变成未暂存，把未暂存的内容暂存起来"><a href="#我想把暂存的内容变成未暂存，把未暂存的内容暂存起来" class="headerlink" title="我想把暂存的内容变成未暂存，把未暂存的内容暂存起来"></a>我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3><p>多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git commit <span class="token operator">-</span>m <span class="token string">"WIP"</span>$ git add <span class="token punctuation">.</span>$ git stash$ git reset HEAD<span class="token operator">^</span>$ git stash pop <span class="token operator">--</span>index <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意1: 这里使用<code>pop</code>仅仅是因为想尽可能保持幂等。注意2: 假如你不加上<code>--index</code>你会把暂存的文件标记为为存储。</p><h2 id="未暂存-Unstaged-的内容"><a href="#未暂存-Unstaged-的内容" class="headerlink" title="未暂存(Unstaged)的内容"></a>未暂存(Unstaged)的内容</h2><h3 id="我想把未暂存的内容移动到一个新分支"><a href="#我想把未暂存的内容移动到一个新分支" class="headerlink" title="我想把未暂存的内容移动到一个新分支"></a>我想把未暂存的内容移动到一个新分支</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git checkout <span class="token operator">-</span>b my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想把未暂存的内容移动到另一个已存在的分支"><a href="#我想把未暂存的内容移动到另一个已存在的分支" class="headerlink" title="我想把未暂存的内容移动到另一个已存在的分支"></a>我想把未暂存的内容移动到另一个已存在的分支</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash$ git checkout my<span class="token operator">-</span>branch$ git stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="我想丢弃本地未提交的变化-uncommitted-changes"><a href="#我想丢弃本地未提交的变化-uncommitted-changes" class="headerlink" title="我想丢弃本地未提交的变化(uncommitted changes)"></a>我想丢弃本地未提交的变化(uncommitted changes)</h3><p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># one commit<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">^</span># two commits<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">^</span><span class="token operator">^</span># four commits<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">~</span><span class="token number">4</span># or<span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重置某个特殊的文件, 你可以用文件名做为参数:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git reset filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想丢弃某些未暂存的内容"><a href="#我想丢弃某些未暂存的内容" class="headerlink" title="我想丢弃某些未暂存的内容"></a>我想丢弃某些未暂存的内容</h3><p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p><p>签出(checkout)不需要的内容，保留需要的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git checkout <span class="token operator">-</span>p# <span class="token class-name">Answer</span> y <span class="token keyword">to</span> <span class="token namespace">all</span> of the snippets you want <span class="token keyword">to</span> <span class="token namespace">drop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另外一个方法是使用 <code>stash</code>， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash <span class="token operator">-</span>p# <span class="token class-name">Select</span> all of the snippets you want <span class="token keyword">to</span> <span class="token namespace">save</span>$ git reset <span class="token operator">--</span>hard$ git stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者, stash 你不需要的部分, 然后stash drop。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash <span class="token operator">-</span>p# <span class="token class-name">Select</span> all of the snippets you don't want <span class="token keyword">to</span> <span class="token namespace">save</span>$ git stash drop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="分支-Branches"><a href="#分支-Branches" class="headerlink" title="分支(Branches)"></a>分支(Branches)</h2><h3 id="我从错误的分支拉取了内容，或把内容拉取到了错误的分支"><a href="#我从错误的分支拉取了内容，或把内容拉取到了错误的分支" class="headerlink" title="我从错误的分支拉取了内容，或把内容拉取到了错误的分支"></a>我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3><p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前HEAD的指向。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reflogab7555f HEAD@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> pull origin wrong<span class="token operator">-</span>branch<span class="token operator">:</span> <span class="token class-name">Fast</span><span class="token operator">-</span>forwardc5bc55a HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> checkout message goes here<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重置分支到你所需的提交(desired commit):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git reset <span class="token operator">--</span>hard c5bc55a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成。</p><h3 id="我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致"><a href="#我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致" class="headerlink" title="我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致"></a>我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3><p>先确认你没有推(push)你的内容到远程。</p><p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git status# <span class="token class-name">On</span> branch my<span class="token operator">-</span>branch# <span class="token class-name">Your</span> branch is ahead of <span class="token string">'origin/my-branch'</span> by <span class="token number">2</span> commits<span class="token punctuation">.</span>#   <span class="token punctuation">(</span>use <span class="token string">"git push"</span> <span class="token keyword">to</span> <span class="token namespace">publish</span> your local commits<span class="token punctuation">)</span>#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一种方法是:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard origin<span class="token operator">/</span>my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我需要提交到一个新分支，但错误的提交到了main"><a href="#我需要提交到一个新分支，但错误的提交到了main" class="headerlink" title="我需要提交到一个新分支，但错误的提交到了main"></a>我需要提交到一个新分支，但错误的提交到了main</h3><p>在main下创建一个新分支，不切换到新分支,仍在main下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git branch my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把main分支重置到前一个提交:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p><p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的hash(<code>git log</code> 能够完成)， 然后重置到这个hash。使用<code>git push</code> 同步内容到远程。</p><p>例如, main分支想重置到的提交的hash为<code>a13b85e</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard a13b85eHEAD is now at a13b85e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>签出(checkout)刚才新建的分支继续工作:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想保留来自另外一个ref-ish的整个文件"><a href="#我想保留来自另外一个ref-ish的整个文件" class="headerlink" title="我想保留来自另外一个ref-ish的整个文件"></a>我想保留来自另外一个ref-ish的整个文件</h3><p>假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:微信搜索公众号：Java后端编程，回复：java 领取资料 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>$ git add <span class="token operator">-</span><span class="token class-name">A</span> <span class="token operator">&amp;&amp;</span> git commit <span class="token operator">-</span>m <span class="token string">"Adding all changes from this spike into one big commit."</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p><p>假设你有:</p><ul><li> 分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li><li> 分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li></ul><p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>develop<span class="token punctuation">)</span>$ git checkout solution <span class="token operator">--</span> file1<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># <span class="token class-name">On</span> branch develop# <span class="token class-name">Your</span> branch is up<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>date <span class="token keyword">with</span> <span class="token string">'origin/develop'</span><span class="token punctuation">.</span># <span class="token class-name">Changes</span> <span class="token keyword">to</span> <span class="token namespace">be</span> committed<span class="token operator">:</span>#  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> <span class="token keyword">to</span> <span class="token namespace">unstage</span><span class="token punctuation">)</span>##        modified<span class="token operator">:</span>   file1<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后, 正常提交。</p><p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.</p><h3 id="我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里"><a href="#我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里" class="headerlink" title="我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里"></a>我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3><p>假设你有一个<code>main</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git logcommit e3851e817c451cc36f2e6f3049db528415e3c114<span class="token class-name">Author</span><span class="token operator">:</span> <span class="token class-name">Alex</span> <span class="token class-name">Lee</span> <span class="token operator">&lt;</span>alexlee<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Tue</span> <span class="token class-name">Jul</span> <span class="token number">22</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">27</span> <span class="token number">2014</span> <span class="token operator">-</span><span class="token number">0400</span>    <span class="token class-name">Bug</span> #<span class="token number">21</span> <span class="token operator">-</span> <span class="token class-name">Added</span> CSRF protectioncommit <span class="token number">5</span>ea51731d150f7ddc4a365437931cd8be3bf3131<span class="token class-name">Author</span><span class="token operator">:</span> <span class="token class-name">Alex</span> <span class="token class-name">Lee</span> <span class="token operator">&lt;</span>alexlee<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Tue</span> <span class="token class-name">Jul</span> <span class="token number">22</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">12</span> <span class="token number">2014</span> <span class="token operator">-</span><span class="token number">0400</span>    <span class="token class-name">Bug</span> #<span class="token number">14</span> <span class="token operator">-</span> <span class="token class-name">Fixed</span> spacing on titlecommit a13b85e984171c6e2a1729bb061994525f626d14<span class="token class-name">Author</span><span class="token operator">:</span> <span class="token class-name">Aki</span> <span class="token class-name">Rose</span> <span class="token operator">&lt;</span>akirose<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Tue</span> <span class="token class-name">Jul</span> <span class="token number">21</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">2014</span> <span class="token operator">-</span><span class="token number">0400</span>    <span class="token class-name">First</span> commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们用提交hash(commit hash)标记bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p><p>首先, 我们把<code>main</code>分支重置到正确的提交(<code>a13b85e</code>):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard a13b85eHEAD is now at a13b85e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在, 我们对 bug #21 创建一个新的分支:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>b <span class="token number">21</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着, 我们用 cherry-pick 把对bug #21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>$ git cherry<span class="token operator">-</span>pick e3851e8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.</p><p>再者， 我们为bug #14 创建一个新的分支, 也基于<code>main</code>分支</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>$ git checkout main<span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>b <span class="token number">14</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>$ git cherry<span class="token operator">-</span>pick <span class="token number">5</span>ea5173<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想删除上游-upstream-分支被删除了的本地分支"><a href="#我想删除上游-upstream-分支被删除了的本地分支" class="headerlink" title="我想删除上游(upstream)分支被删除了的本地分支"></a>我想删除上游(upstream)分支被删除了的本地分支</h3><p>一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（[IDEA 中玩转 Git][IDEA _ Git]）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git fetch <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我不小心删除了我的分支"><a href="#我不小心删除了我的分支" class="headerlink" title="我不小心删除了我的分支"></a>我不小心删除了我的分支</h3><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>b my<span class="token operator">-</span>branch<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git branch<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ touch foo<span class="token punctuation">.</span>txt<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ lsREADME<span class="token punctuation">.</span>md foo<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加文件并做一次提交</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git add <span class="token punctuation">.</span><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git commit <span class="token operator">-</span>m <span class="token string">'foo.txt added'</span><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ foo<span class="token punctuation">.</span>txt added <span class="token number">1</span> files changed<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span> create mode <span class="token number">100644</span> foo<span class="token punctuation">.</span>txt<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git logcommit <span class="token number">4e3</span>cd85a670ced7cc17a2b5d8d3d809ac88d5012<span class="token class-name">Author</span><span class="token operator">:</span> siemiatj <span class="token operator">&lt;</span>siemiatj<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Wed</span> <span class="token class-name">Jul</span> <span class="token number">30</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">10</span> <span class="token number">2014</span> <span class="token operator">+</span><span class="token number">0200</span>    foo<span class="token punctuation">.</span>txt addedcommit <span class="token number">69204</span>cdf0acbab201619d95ad8295928e7f411d5<span class="token class-name">Author</span><span class="token operator">:</span> <span class="token class-name">Kate</span> <span class="token class-name">Hudson</span> <span class="token operator">&lt;</span>katehudson<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Tue</span> <span class="token class-name">Jul</span> <span class="token number">29</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">46</span> <span class="token number">2014</span> <span class="token operator">-</span><span class="token number">0400</span>    <span class="token class-name">Fixes</span> #<span class="token number">6</span><span class="token operator">:</span> <span class="token class-name">Force</span> pushing after amending commits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们切回到主(main)分支，‘不小心的’删除<code>my-branch</code>分支</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git checkout main<span class="token class-name">Switched</span> <span class="token keyword">to</span> <span class="token namespace">branch</span> <span class="token string">'main'</span><span class="token class-name">Your</span> branch is up<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>date <span class="token keyword">with</span> <span class="token string">'origin/main'</span><span class="token punctuation">.</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git branch <span class="token operator">-</span><span class="token class-name">D</span> my<span class="token operator">-</span>branch<span class="token class-name">Deleted</span> branch my<span class="token operator">-</span>branch <span class="token punctuation">(</span>was <span class="token number">4e3</span>cd85<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ echo oh noes<span class="token punctuation">,</span> deleted my branch<span class="token operator">!</span>oh noes<span class="token punctuation">,</span> deleted my branch<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reflog<span class="token number">69204</span>cd HEAD@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from my<span class="token operator">-</span>branch <span class="token keyword">to</span> <span class="token namespace">main</span><span class="token number">4e3</span>cd85 HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> commit<span class="token operator">:</span> foo<span class="token punctuation">.</span>txt added<span class="token number">69204</span>cd HEAD@<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from main <span class="token keyword">to</span> <span class="token namespace">my</span><span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>b my<span class="token operator">-</span>branch<span class="token operator">-</span>help<span class="token class-name">Switched</span> <span class="token keyword">to</span> <span class="token namespace">a</span> <span class="token keyword">new</span> branch <span class="token string">'my-branch-help'</span><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token operator">-</span>help<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard <span class="token number">4e3</span>cd85HEAD is now at <span class="token number">4e3</span>cd85 foo<span class="token punctuation">.</span>txt added<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token operator">-</span>help<span class="token punctuation">)</span>$ lsREADME<span class="token punctuation">.</span>md foo<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看! 我们把删除的文件找回来了。Git的 <code>reflog</code> 在rebasing出错的时候也是同样有用的。</p><h3 id="我想删除一个分支"><a href="#我想删除一个分支" class="headerlink" title="我想删除一个分支"></a>我想删除一个分支</h3><p>删除一个远程分支:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git push origin <span class="token operator">--</span>delete my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你也可以:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git push origin <span class="token operator">:</span>my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除一个本地分支:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git branch <span class="token operator">-</span><span class="token class-name">D</span> my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想从别人正在工作的远程分支签出-checkout-一个分支"><a href="#我想从别人正在工作的远程分支签出-checkout-一个分支" class="headerlink" title="我想从别人正在工作的远程分支签出(checkout)一个分支"></a>我想从别人正在工作的远程分支签出(checkout)一个分支</h3><p>首先, 从远程拉取(fetch) 所有分支:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git fetch <span class="token operator">--</span>all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">--</span>track origin<span class="token operator">/</span>daves<span class="token class-name">Branch</span> daves set up <span class="token keyword">to</span> <span class="token namespace">track</span> remote branch daves from <span class="token class-name"><span class="token namespace">origin<span class="token punctuation">.</span></span>Switched</span> <span class="token keyword">to</span> <span class="token namespace">a</span> <span class="token keyword">new</span> branch <span class="token string">'daves'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p><p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p><h2 id="Rebasing-和合并-Merging"><a href="#Rebasing-和合并-Merging" class="headerlink" title="Rebasing 和合并(Merging)"></a>Rebasing 和合并(Merging)</h2><h3 id="我想撤销rebase-merge"><a href="#我想撤销rebase-merge" class="headerlink" title="我想撤销rebase/merge"></a>我想撤销rebase/merge</h3><p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard ORIG_HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我已经rebase过-但是我不想强推-force-push"><a href="#我已经rebase过-但是我不想强推-force-push" class="headerlink" title="我已经rebase过, 但是我不想强推(force push)"></a>我已经rebase过, 但是我不想强推(force push)</h3><p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout my<span class="token operator">-</span>branch<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git rebase <span class="token operator">-</span>i main<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git checkout main<span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git merge <span class="token operator">--</span>ff<span class="token operator">-</span>only my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="我需要组合-combine-几个提交-commit"><a href="#我需要组合-combine-几个提交-commit" class="headerlink" title="我需要组合(combine)几个提交(commit)"></a>我需要组合(combine)几个提交(commit)</h3><p>假设你的工作分支将会做对于 <code>main</code> 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>soft main<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git commit <span class="token operator">-</span>am <span class="token string">"New awesome feature"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git rebase <span class="token operator">-</span>i main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行rebase， 组合最近3次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git rebase <span class="token operator">-</span>i HEAD<span class="token operator">~</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pick a9c8a1d <span class="token class-name">Some</span> refactoringpick <span class="token number">01</span>b2fd8 <span class="token class-name">New</span> awesome featurepick b729ad5 fixuppick e3851e8 another fix# <span class="token class-name">Rebase</span> <span class="token number">8074d</span><span class="token number">12.</span><span class="token punctuation">.</span>b729ad5 onto <span class="token number">8074d</span><span class="token number">12</span>## <span class="token class-name">Commands</span><span class="token operator">:</span>#  p<span class="token punctuation">,</span> pick <span class="token operator">=</span> use commit#  r<span class="token punctuation">,</span> reword <span class="token operator">=</span> use commit<span class="token punctuation">,</span> but edit the commit message#  e<span class="token punctuation">,</span> edit <span class="token operator">=</span> use commit<span class="token punctuation">,</span> but stop <span class="token keyword">for</span> amending#  s<span class="token punctuation">,</span> squash <span class="token operator">=</span> use commit<span class="token punctuation">,</span> but meld into previous commit#  f<span class="token punctuation">,</span> fixup <span class="token operator">=</span> like <span class="token string">"squash"</span><span class="token punctuation">,</span> but discard <span class="token keyword">this</span> commit's log message#  x<span class="token punctuation">,</span> exec <span class="token operator">=</span> run command <span class="token punctuation">(</span>the rest of the line<span class="token punctuation">)</span> using shell## <span class="token class-name">These</span> lines can be re<span class="token operator">-</span>ordered<span class="token punctuation">;</span> they are executed from top <span class="token keyword">to</span> <span class="token namespace">bottom<span class="token punctuation">.</span></span>## <span class="token class-name">If</span> you remove a line here THAT COMMIT WILL BE LOST<span class="token punctuation">.</span>## <span class="token class-name">However</span><span class="token punctuation">,</span> <span class="token keyword">if</span> you remove everything<span class="token punctuation">,</span> the rebase will be aborted<span class="token punctuation">.</span>## <span class="token class-name">Note</span> that empty commits are commented out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p><p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p><p>例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pick a9c8a1d <span class="token class-name">Some</span> refactoringpick <span class="token number">01</span>b2fd8 <span class="token class-name">New</span> awesome featuref b729ad5 fixupf e3851e8 another fix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pick a9c8a1d <span class="token class-name">Some</span> refactoringpick <span class="token number">01</span>b2fd8 <span class="token class-name">New</span> awesome features b729ad5 fixups e3851e8 another fix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Newer</span><span class="token punctuation">,</span> awesomer features# <span class="token class-name">Please</span> enter the commit message <span class="token keyword">for</span> your <span class="token class-name"><span class="token namespace">changes<span class="token punctuation">.</span></span> Lines</span> starting# <span class="token keyword">with</span> <span class="token string">'#'</span> will be ignored<span class="token punctuation">,</span> and an empty message aborts the commit<span class="token punctuation">.</span># rebase in progress<span class="token punctuation">;</span> onto <span class="token number">8074d</span><span class="token number">12</span># <span class="token class-name">You</span> are currently editing a commit <span class="token keyword">while</span> rebasing branch <span class="token string">'main'</span> on <span class="token string">'8074d12'</span><span class="token punctuation">.</span>## <span class="token class-name">Changes</span> <span class="token keyword">to</span> <span class="token namespace">be</span> committed<span class="token operator">:</span>#modified<span class="token operator">:</span>   README<span class="token punctuation">.</span>md#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果成功了, 你应该看到类似下面的内容:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ <span class="token class-name">Successfully</span> rebased and updated refs<span class="token operator">/</span>heads<span class="token operator">/</span>main<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安全合并-merging-策略"><a href="#安全合并-merging-策略" class="headerlink" title="安全合并(merging)策略"></a>安全合并(merging)策略</h4><p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。<code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多Git资料，参见[IDEA 中如何完成 Git 版本回退？][IDEA _ Git 1]）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git merge <span class="token operator">--</span>no<span class="token operator">-</span>ff <span class="token operator">--</span>no<span class="token operator">-</span>commit my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="我需要将一个分支合并成一个提交-commit"><a href="#我需要将一个分支合并成一个提交-commit" class="headerlink" title="我需要将一个分支合并成一个提交(commit)"></a>我需要将一个分支合并成一个提交(commit)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git merge <span class="token operator">--</span>squash my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="我只想组合-combine-未推的提交-unpushed-commit"><a href="#我只想组合-combine-未推的提交-unpushed-commit" class="headerlink" title="我只想组合(combine)未推的提交(unpushed commit)"></a>我只想组合(combine)未推的提交(unpushed commit)</h4><p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git rebase <span class="token operator">-</span>i @<span class="token punctuation">&#123;</span>u<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。</p><h3 id="检查是否分支上的所有提交-commit-都合并-merge-过了"><a href="#检查是否分支上的所有提交-commit-都合并-merge-过了" class="headerlink" title="检查是否分支上的所有提交(commit)都合并(merge)过了"></a>检查是否分支上的所有提交(commit)都合并(merge)过了</h3><p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git log <span class="token operator">--</span>graph <span class="token operator">--</span>left<span class="token operator">-</span>right <span class="token operator">--</span>cherry<span class="token operator">-</span>pick <span class="token operator">--</span>oneline HEAD<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>feature<span class="token operator">/</span><span class="token number">120</span><span class="token operator">-</span>on<span class="token operator">-</span>scroll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git log main <span class="token operator">^</span>feature<span class="token operator">/</span><span class="token number">120</span><span class="token operator">-</span>on<span class="token operator">-</span>scroll <span class="token operator">--</span>no<span class="token operator">-</span>merges<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="交互式rebase-interactive-rebase-可能出现的问题"><a href="#交互式rebase-interactive-rebase-可能出现的问题" class="headerlink" title="交互式rebase(interactive rebase)可能出现的问题"></a>交互式rebase(interactive rebase)可能出现的问题</h3><h4 id="这个rebase-编辑屏幕出现’noop’"><a href="#这个rebase-编辑屏幕出现’noop’" class="headerlink" title="这个rebase 编辑屏幕出现’noop’"></a>这个rebase 编辑屏幕出现’noop’</h4><p>如果你看到的是这样:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">noop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:</p><ul><li> 检查确保主(main)分支没有问题</li><li> rebase <code>HEAD~2</code> 或者更早</li></ul><h4 id="有冲突的情况"><a href="#有冲突的情况" class="headerlink" title="有冲突的情况"></a>有冲突的情况</h4><p>如果你不能成功的完成rebase, 你可能必须要解决冲突。</p><p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git status<span class="token class-name">On</span> branch my<span class="token operator">-</span>branch<span class="token class-name">Changes</span> not staged <span class="token keyword">for</span> commit<span class="token operator">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> <span class="token keyword">to</span> <span class="token namespace">update</span> what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file>..."</span> <span class="token keyword">to</span> <span class="token namespace">discard</span> changes in working directory<span class="token punctuation">)</span> modified<span class="token operator">:</span>   README<span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子里面, <code>README.md</code> 有冲突。打开这个文件找到类似下面的内容:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span> HEAD   some code   <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>   some code   <span class="token operator">>>></span><span class="token operator">>>></span><span class="token operator">></span> <span class="token keyword">new</span><span class="token operator">-</span>commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p><p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token operator">*</span><span class="token punctuation">)</span>$ git mergetool <span class="token operator">-</span>t opendiff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续rebase。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git add README<span class="token punctuation">.</span>md<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git rebase <span class="token operator">--</span><span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p><p>任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git rebase <span class="token operator">--</span>abort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h2><h3 id="暂存所有改动"><a href="#暂存所有改动" class="headerlink" title="暂存所有改动"></a>暂存所有改动</h3><p>暂存你工作目录下的所有改动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以使用<code>-u</code>来排除一些文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash <span class="token operator">-</span>u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="暂存指定文件"><a href="#暂存指定文件" class="headerlink" title="暂存指定文件"></a>暂存指定文件</h3><p>假设你只想暂存某一个文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash push working<span class="token operator">-</span>directory<span class="token operator">-</span>path<span class="token operator">/</span>filename<span class="token punctuation">.</span>ext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设你想暂存多个文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash push working<span class="token operator">-</span>directory<span class="token operator">-</span>path<span class="token operator">/</span>filename1<span class="token punctuation">.</span>ext working<span class="token operator">-</span>directory<span class="token operator">-</span>path<span class="token operator">/</span>filename2<span class="token punctuation">.</span>ext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="暂存时记录消息"><a href="#暂存时记录消息" class="headerlink" title="暂存时记录消息"></a>暂存时记录消息</h3><p>这样你可以在<code>list</code>时看到它</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash save <span class="token generics"><span class="token punctuation">&lt;</span>message<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash push <span class="token operator">-</span>m <span class="token generics"><span class="token punctuation">&lt;</span>message<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用某个指定暂存"><a href="#使用某个指定暂存" class="headerlink" title="使用某个指定暂存"></a>使用某个指定暂存</h3><p>首先你可以查看你的<code>stash</code>记录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你可以<code>apply</code>某个<code>stash</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash apply <span class="token string">"stash@&#123;n&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处， ‘n’是<code>stash</code>在栈中的位置，最上层的<code>stash</code>会是0</p><p>除此之外，也可以使用时间标记(假如你能记得的话)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash apply <span class="token string">"stash@&#123;2.hours.ago&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="暂存时保留未暂存的内容"><a href="#暂存时保留未暂存的内容" class="headerlink" title="暂存时保留未暂存的内容"></a>暂存时保留未暂存的内容</h3><p>你需要手动create一个<code>stash commit</code>， 然后使用<code>git stash store</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash create$ git stash store <span class="token operator">-</span>m <span class="token string">"commit-message"</span> CREATED_SHA1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="杂项-Miscellaneous-Objects"><a href="#杂项-Miscellaneous-Objects" class="headerlink" title="杂项(Miscellaneous Objects)"></a>杂项(Miscellaneous Objects)</h2><h3 id="克隆所有子模块"><a href="#克隆所有子模块" class="headerlink" title="克隆所有子模块"></a>克隆所有子模块</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git clone <span class="token operator">--</span>recursive git<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>foo<span class="token operator">/</span>bar<span class="token punctuation">.</span>git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果已经克隆了:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git submodule update <span class="token operator">--</span>init <span class="token operator">--</span>recursive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除标签-tag"><a href="#删除标签-tag" class="headerlink" title="删除标签(tag)"></a>删除标签(tag)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git tag <span class="token operator">-</span>d <span class="token generics"><span class="token punctuation">&lt;</span>tag_name<span class="token punctuation">></span></span>$ git push <span class="token generics"><span class="token punctuation">&lt;</span>remote<span class="token punctuation">></span></span> <span class="token operator">:</span>refs<span class="token operator">/</span>tags<span class="token operator">/</span><span class="token generics"><span class="token punctuation">&lt;</span>tag_name<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="恢复已删除标签-tag"><a href="#恢复已删除标签-tag" class="headerlink" title="恢复已删除标签(tag)"></a>恢复已删除标签(tag)</h3><p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git fsck <span class="token operator">--</span>unreachable <span class="token operator">|</span> grep tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>记下这个标签(tag)的hash，然后用Git的 update-ref</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git update<span class="token operator">-</span>ref refs<span class="token operator">/</span>tags<span class="token operator">/</span><span class="token generics"><span class="token punctuation">&lt;</span>tag_name<span class="token punctuation">></span></span> <span class="token generics"><span class="token punctuation">&lt;</span>hash<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时你的标签(tag)应该已经恢复了。</p><h3 id="已删除补丁-patch"><a href="#已删除补丁-patch" class="headerlink" title="已删除补丁(patch)"></a>已删除补丁(patch)</h3><p>如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p><p>做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。</p><h2 id="跟踪文件-Tracking-Files"><a href="#跟踪文件-Tracking-Files" class="headerlink" title="跟踪文件(Tracking Files)"></a>跟踪文件(Tracking Files)</h2><h3 id="我只想改变一个文件名字的大小写，而不修改内容"><a href="#我只想改变一个文件名字的大小写，而不修改内容" class="headerlink" title="我只想改变一个文件名字的大小写，而不修改内容"></a>我只想改变一个文件名字的大小写，而不修改内容</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git mv <span class="token operator">--</span>force myfile <span class="token class-name">MyFile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想从Git删除一个文件，但保留该文件"><a href="#我想从Git删除一个文件，但保留该文件" class="headerlink" title="我想从Git删除一个文件，但保留该文件"></a>我想从Git删除一个文件，但保留该文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git rm <span class="token operator">--</span>cached log<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置(Configuration)"></a>配置(Configuration)</h2><h3 id="我想给一些Git命令添加别名-alias"><a href="#我想给一些Git命令添加别名-alias" class="headerlink" title="我想给一些Git命令添加别名(alias)"></a>我想给一些Git命令添加别名(alias)</h3><p>在 OS X 和 Linux 下, 你的 Git的配置文件储存在 <code>~/.gitconfig</code>。我在<code>[alias]</code> 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>alias<span class="token punctuation">]</span>    a <span class="token operator">=</span> add    amend <span class="token operator">=</span> commit <span class="token operator">--</span>amend    c <span class="token operator">=</span> commit    ca <span class="token operator">=</span> commit <span class="token operator">--</span>amend    ci <span class="token operator">=</span> commit <span class="token operator">-</span>a    co <span class="token operator">=</span> checkout    d <span class="token operator">=</span> diff    dc <span class="token operator">=</span> diff <span class="token operator">--</span>changed    ds <span class="token operator">=</span> diff <span class="token operator">--</span>staged    f <span class="token operator">=</span> fetch    loll <span class="token operator">=</span> log <span class="token operator">--</span>graph <span class="token operator">--</span>decorate <span class="token operator">--</span>pretty<span class="token operator">=</span>oneline <span class="token operator">--</span>abbrev<span class="token operator">-</span>commit    m <span class="token operator">=</span> merge    one <span class="token operator">=</span> log <span class="token operator">--</span>pretty<span class="token operator">=</span>oneline    outstanding <span class="token operator">=</span> rebase <span class="token operator">-</span>i @<span class="token punctuation">&#123;</span>u<span class="token punctuation">&#125;</span>    s <span class="token operator">=</span> status    unpushed <span class="token operator">=</span> log @<span class="token punctuation">&#123;</span>u<span class="token punctuation">&#125;</span>    wc <span class="token operator">=</span> whatchanged    wip <span class="token operator">=</span> rebase <span class="token operator">-</span>i @<span class="token punctuation">&#123;</span>u<span class="token punctuation">&#125;</span>    zap <span class="token operator">=</span> fetch <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="我想缓存一个仓库-repository-的用户名和密码"><a href="#我想缓存一个仓库-repository-的用户名和密码" class="headerlink" title="我想缓存一个仓库(repository)的用户名和密码"></a>我想缓存一个仓库(repository)的用户名和密码</h3><p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git config <span class="token operator">--</span>global credential<span class="token punctuation">.</span>helper cache# <span class="token class-name">Set</span> git <span class="token keyword">to</span> <span class="token namespace">use</span> the credential memory cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git config <span class="token operator">--</span>global credential<span class="token punctuation">.</span>helper <span class="token string">'cache --timeout=3600'</span># <span class="token class-name">Set</span> the cache <span class="token keyword">to</span> <span class="token namespace">timeout</span> after <span class="token number">1</span> hour <span class="token punctuation">(</span>setting is in seconds<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="我不知道我做错了些什么"><a href="#我不知道我做错了些什么" class="headerlink" title="我不知道我做错了些什么"></a>我不知道我做错了些什么</h3><p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p><p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reflog<span class="token number">0</span>a2e358 HEAD@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> reset<span class="token operator">:</span> moving <span class="token keyword">to</span> HEAD<span class="token operator">~</span><span class="token number">2</span><span class="token number">0254</span>ea7 HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from <span class="token number">2.2</span> <span class="token keyword">to</span> <span class="token namespace">main</span>c10f740 HEAD@<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from main <span class="token keyword">to</span> <span class="token number">2.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@&#123;0&#125;</code>标识.</p><p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git reset <span class="token operator">--</span>hard <span class="token number">0254</span>ea7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 代码合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8Stream实战系列</title>
      <link href="/2022/11/04/java8stream-shi-zhan-xi-lie/"/>
      <url>/2022/11/04/java8stream-shi-zhan-xi-lie/</url>
      
        <content type="html"><![CDATA[<p>就目前而言，Java8之类的仍然是主流，即使用比较广泛，其次就是JDK11之类的，毕竟对于企业研发而言，求稳第一。  </p><h2 id="一、Java8有哪些新特性？"><a href="#一、Java8有哪些新特性？" class="headerlink" title="一、Java8有哪些新特性？"></a>一、Java8有哪些新特性？</h2><ul><li> 1.Lambda表达式；</li><li> 2.新的日期API；</li><li> 3.引入Optional；</li><li> 4.新增Base64加解密API；</li><li> 5.接口的默认方法和静态方法；</li><li> 6.新增方法引用格式；</li><li> 7.新增Stream类；</li><li> 8.注解相关的改变；</li><li> 9.支持并行数组；</li><li> 10.对并发类的扩展。</li></ul><p>这里不一一讲解，只讲Stream相关系列的实战和应用。</p><h2 id="二、我在实践应用Stream相关的是如何提高开发效率的？"><a href="#二、我在实践应用Stream相关的是如何提高开发效率的？" class="headerlink" title="二、我在实践应用Stream相关的是如何提高开发效率的？"></a>二、我在实践应用Stream相关的是如何提高开发效率的？</h2><p>以下以实用为主(实际应用比较多的)，进行分类划分。在实际中这些通常以组合的形式进行使用，不局限于单单使用某一个。这样做的目的就是为了提高研发效率以及更快更好的解决问题。不然，使用Stream这些新特性的意义也就不存在了。</p><h3 id="1-分组"><a href="#1-分组" class="headerlink" title="1.分组"></a>1.分组</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> groupMapData <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-条件筛选"><a href="#2-条件筛选" class="headerlink" title="2.条件筛选"></a>2.条件筛选</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> filterList <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-></span> a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"YC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> filterOBDHourData <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-去重"><a href="#4-去重" class="headerlink" title="4.去重"></a>4.去重</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> dataVOS <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>        <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">collectingAndThen</span><span class="token punctuation">(</span>            <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-数组转List"><a href="#5-数组转List" class="headerlink" title="5.数组转List"></a>5.数组转List</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> codes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  codes <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-数据合并-含去重以及不去重"><a href="#6-数据合并-含去重以及不去重" class="headerlink" title="6.数据合并(含去重以及不去重)"></a>6.数据合并(含去重以及不去重)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-分页"><a href="#7-分页" class="headerlink" title="7.分页"></a>7.分页</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> dataList <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> dto<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-统计"><a href="#8-统计" class="headerlink" title="8.统计"></a>8.统计</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//求最大值BigDecimal max = dataList.stream().map(T::getPrice).max((x1, x2) -> x1.compareTo(x2)).get();</span><span class="token comment">//求最小值BigDecimal min = dataList.stream().map(T::getPrice).min((x1, x2) -> x1.compareTo(x2)).get();</span><span class="token comment">//求和 空指针异常排除BigDecimal sum = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);</span><span class="token comment">//求平均值BigDecimal average = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add).divide(BigDecimal.valueOf(dataList.size()), 2, BigDecimal.ROUND_HALF_UP);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-拼接"><a href="#9-拼接" class="headerlink" title="9.拼接"></a>9.拼接</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> nameJoin <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-归集"><a href="#10-归集" class="headerlink" title="10.归集"></a>10.归集</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> mapNameObject <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> item <span class="token operator">-></span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-映射Map"><a href="#11-映射Map" class="headerlink" title="11.映射Map"></a>11.映射Map</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"1,2,3"</span><span class="token punctuation">,</span> <span class="token string">"4,5,6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newStrList <span class="token operator">=</span> strList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-搜索"><a href="#12-搜索" class="headerlink" title="12.搜索"></a>12.搜索</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>data <span class="token operator">-></span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>FALSE <span class="token operator">?</span> data<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>data<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>dto    <span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk1.8 </tag>
            
            <tag> stream </tag>
            
            <tag> lambda操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在hexo中无痛使用本地图片</title>
      <link href="/2022/11/04/zai-hexo-zhong-wu-tong-shi-yong-ben-di-tu-pian/"/>
      <url>/2022/11/04/zai-hexo-zhong-wu-tong-shi-yong-ben-di-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="1-起因"><a href="#1-起因" class="headerlink" title="1 起因"></a>1 起因</h2><p>在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。</p><p>这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。</p><p>hexo 下插入图片现在大概有几个方案</p><h3 id="1-1-放在根目录"><a href="#1-1-放在根目录" class="headerlink" title="1.1 放在根目录"></a>1.1 放在根目录</h3><p>早期大部分的方案是把图片放在 <code>source/img</code> 下，然后在 markdown 里写 <code>![img](/source/img/img.png)</code> 。显然这样在本地的编辑器里完全不能正确识别图片的位置。</p><h3 id="1-2-asset-image"><a href="#1-2-asset-image" class="headerlink" title="1.2 asset-image"></a>1.2 asset-image</h3><p>在 hexo 2.x 时出现的插件，后来被吸纳进 <code>hexo 3 core</code> ，用法的介绍见 [资源文件夹 | Hexo][_ Hexo] 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。</p><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2 解决方案"></a>2 解决方案</h2><p>[CodeFalling/hexo-asset-image][CodeFalling_hexo-asset-image]</p><h3 id="2-1-使用"><a href="#2-1-使用" class="headerlink" title="2.1 使用"></a>2.1 使用</h3><p>首先确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code> 。</p><p>在 hexo 目录，执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">npm install https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token class-name">CodeFalling</span><span class="token operator">/</span>hexo<span class="token operator">-</span>asset<span class="token operator">-</span>image <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设在</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MacGesture2</span><span class="token operator">-</span><span class="token class-name">Publish</span>├── apppicker<span class="token punctuation">.</span>jpg├── logo<span class="token punctuation">.</span>jpg└── rules<span class="token punctuation">.</span>jpg <span class="token class-name">MacGesture2</span><span class="token operator">-</span><span class="token class-name">Publish</span><span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样的目录结构（目录名和文章名一致），只要使用 <code>![logo](MacGesture2-Publish/logo.jpg)</code>就可以插入图片。</p><p>生成的结构为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">/</span><span class="token number">2015</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">18</span><span class="token operator">/</span><span class="token class-name">MacGesture2</span><span class="token operator">-</span><span class="token class-name">Publish</span>├── apppicker<span class="token punctuation">.</span>jpg├── index<span class="token punctuation">.</span>html├── logo<span class="token punctuation">.</span>jpg└── rules<span class="token punctuation">.</span>jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，生成的 html 是</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/2015/10/18/MacGesture2-Publish/logo.jpg"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而不是愚蠢的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"MacGesture2-Publish/logo.jpg"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值得一提的是，这个插件对于 [CodeFalling/hexo-renderer-org][CodeFalling_hexo-renderer-org] 同样有效。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感受java8后lambda之美</title>
      <link href="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/"/>
      <url>/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/</url>
      
        <content type="html"><![CDATA[<p>一、引言</p><p>java8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。总结就是：使用不可变值与函数，函数对不可变值进行处理，映射成另一个值。</p><h2 id="二、java重要的函数式接口"><a href="#二、java重要的函数式接口" class="headerlink" title="二、java重要的函数式接口"></a>二、java重要的函数式接口</h2><h3 id="1、什么是函数式接口"><a href="#1、什么是函数式接口" class="headerlink" title="1、什么是函数式接口"></a>1、什么是函数式接口</h3><p>函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。</p><h4 id="1-1-java8自带的常用函数式接口。"><a href="#1-1-java8自带的常用函数式接口。" class="headerlink" title="1.1 java8自带的常用函数式接口。"></a>1.1 java8自带的常用函数式接口。</h4><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_ec9c4260.png" alt="image_ec9c4260.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> predicate <span class="token operator">=</span> x <span class="token operator">-></span> x <span class="token operator">></span> <span class="token number">185</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"9龙"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>            <span class="token string">"9龙的身高高于185吗？："</span> <span class="token operator">+</span> predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getStature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"命运由我不由天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> function <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> supplier <span class="token operator">=</span>             <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>TEN<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UnaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> unaryOperator <span class="token operator">=</span> uglily <span class="token operator">-></span> <span class="token operator">!</span>uglily<span class="token punctuation">;</span>        <span class="token class-name">Boolean</span> apply2 <span class="token operator">=</span> unaryOperator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apply2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> operator <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>        <span class="token class-name">Integer</span> integer <span class="token operator">=</span> operator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"我是一个演示的函数式接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 演示自定义函数式接口使用     *     * @param worker     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> worker<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> work <span class="token operator">=</span> worker<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Worker</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//9龙的身高高于185吗？：false</span><span class="token comment">//命运由我不由天</span><span class="token comment">//9龙</span><span class="token comment">//10</span><span class="token comment">//false</span><span class="token comment">//6</span><span class="token comment">//我是一个演示的函数式接口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上演示了lambda接口的使用及自定义一个函数式接口并使用。下面，我们看看java8将函数式接口封装到流中如何高效的帮助我们处理集合。  </p><p>注意：Student::getName例子中这种编写lambda表达式的方式称为方法引用。格式为ClassNmae::methodName。是不是很神奇，java8就是这么迷人。</p><blockquote><p>示例：本篇所有示例都基于以下三个类。OutstandingClass：班级；Student：学生；SpecialityEnum：特长。</p></blockquote><h4 id><a href="#" class="headerlink" title></a><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_7771b4fe.png" alt="image_7771b4fe.png"></h4><h4 id="1-2-惰性求值与及早求值"><a href="#1-2-惰性求值与及早求值" class="headerlink" title="1.2 惰性求值与及早求值"></a>1.2 惰性求值与及早求值</h4><p>惰性求值：只描述Stream，操作的结果也是Stream，这样的操作称为惰性求值。惰性求值可以像建造者模式一样链式使用，最后再使用及早求值得到最终结果。</p><p>及早求值：得到最终的结果而不是Stream，这样的操作称为及早求值。</p><h3 id="2、常用的流"><a href="#2、常用的流" class="headerlink" title="2、常用的流"></a>2、常用的流</h3><h4 id="2-1-collect-Collectors-toList"><a href="#2-1-collect-Collectors-toList" class="headerlink" title="2.1 collect(Collectors.toList())"></a>2.1 collect(Collectors.toList())</h4><p>将流转换为list。还有toSet()，toMap()等。及早求值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> studentList <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-filter"><a href="#2-2-filter" class="headerlink" title="2.2 filter"></a>2.2 filter</h4><p>顾名思义，起过滤筛选的作用。内部就是Predicate接口。惰性求值。</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_eba0197b.png" alt="image_eba0197b.png"></p><p>比如我们筛选出出身高小于180的同学。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span><span class="token function">getStature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">180</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-map"><a href="#2-3-map" class="headerlink" title="2.3 map"></a>2.3 map</h4><p>转换功能，内部就是Function接口。惰性求值</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_23fab375.png" alt="image_23fab375.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>student <span class="token operator">-></span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[路飞, 红发, 白胡子]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子中将student对象转换为String对象，获取student的名字。  </p><h4 id="2-4-flatMap"><a href="#2-4-flatMap" class="headerlink" title="2.4 flatMap"></a>2.4 flatMap</h4><p>将多个Stream合并为一个Stream。惰性求值</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_c1ac2536.png" alt="image_c1ac2536.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> studentList <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span>                <span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"艾斯"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"雷利"</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>students1 <span class="token operator">-></span> students1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='艾斯', age=25, stature=183, specialities=null&#125;,</span><span class="token comment">//Student&#123;name='雷利', age=48, stature=176, specialities=null&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用Stream.of的静态方法将两个list转换为Stream，再通过flatMap将两个流合并为一个。  </p><h4 id="2-5-max和min"><a href="#2-5-max和min" class="headerlink" title="2.5 max和min"></a>2.5 max和min</h4><p>我们经常会在集合中求最大或最小值，使用流就很方便。及早求值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> min <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否有值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;</span><span class="token comment">//Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>max、min接收一个Comparator（例子中使用java8自带的静态函数，只需要传进需要比较值即可。）并且返回一个Optional对象，该对象是java8新增的类，专门为了防止null引发的空指针异常。  </p><p>可以使用max.isPresent()判断是否有值；可以使用max.orElse(new Student())，当值为null时就使用给定值；也可以使用max.orElseGet(() -&gt; new Student());这需要传入一个Supplier的lambda表达式。</p><h4 id="2-6-count"><a href="#2-6-count" class="headerlink" title="2.6 count"></a>2.6 count</h4><p>统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s1 <span class="token operator">-></span> s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄小于45岁的人数是："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//年龄小于45岁的人数是：2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-7-reduce"><a href="#2-7-reduce" class="headerlink" title="2.7 reduce"></a>2.7 reduce</h4><p>reduce 操作可以实现从一组值中生成一个值。在上述例子中用到的 count 、 min 和 max 方法，因为常用而被纳入标准库中。事实上，这些方法都是 reduce 操作。及早求值。</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_9186bf98.png" alt="image_9186bf98.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> reduce <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-></span> acc<span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看得reduce接收了一个初始值为0的累加器，依次取出值与累加器相加，最后累加器的值就是最终的结果。</p><h2 id="三、高级集合类及收集器"><a href="#三、高级集合类及收集器" class="headerlink" title="三、高级集合类及收集器"></a>三、高级集合类及收集器</h2><h3 id="3-1-转换成值"><a href="#3-1-转换成值" class="headerlink" title="3.1 转换成值"></a>3.1 转换成值</h3><p>收集器，一种通用的、从流生成复杂值的结构。只要将它传给 collect 方法，所有的流就都可以使用它了。标准类库已经提供了一些有用的收集器，以下示例代码中的收集器都是从 java.util.stream.Collectors 类中静态导入的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectorsTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutstandingClass</span> ostClass1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutstandingClass</span><span class="token punctuation">(</span><span class="token string">"一班"</span><span class="token punctuation">,</span> students1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//复制students1，并移除一个学生</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>students1<span class="token punctuation">)</span><span class="token punctuation">;</span>        students2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutstandingClass</span> ostClass2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutstandingClass</span><span class="token punctuation">(</span><span class="token string">"二班"</span><span class="token punctuation">,</span> students2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将ostClass1、ostClass2转换为Stream</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OutstandingClass</span><span class="token punctuation">></span></span> classStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>ostClass1<span class="token punctuation">,</span> ostClass2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutstandingClass</span> outstandingClass <span class="token operator">=</span> <span class="token function">biggestGroup</span><span class="token punctuation">(</span>classStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人数最多的班级是："</span> <span class="token operator">+</span> outstandingClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一班平均年龄是："</span> <span class="token operator">+</span> <span class="token function">averageNumberOfStudent</span><span class="token punctuation">(</span>students1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取人数最多的班级     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">OutstandingClass</span> <span class="token function">biggestGroup</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OutstandingClass</span><span class="token punctuation">></span></span> outstandingClasses<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> outstandingClasses<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>                <span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span>ostClass <span class="token operator">-></span> ostClass<span class="token punctuation">.</span><span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token class-name">OutstandingClass</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 计算平均年龄     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">averageNumberOfStudent</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">averagingInt</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//人数最多的班级是：一班</span><span class="token comment">//一班平均年龄是：37.666666666666664</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>maxBy或者minBy就是求最大值与最小值。  </p><h3 id="3-2-转换成块"><a href="#3-2-转换成块" class="headerlink" title="3.2 转换成块"></a>3.2 转换成块</h3><p>常用的流操作是将其分解成两个集合，Collectors.partitioningBy帮我们实现了，接收一个Predicate函数式接口。</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_16155432.png" alt="image_16155432.png"></p><p>将示例学生分为会唱歌与不会唱歌的两个集合。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PartitioningByTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//省略List&lt;student> students的初始化</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span><span class="token punctuation">></span></span> listMap <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>            <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>student <span class="token operator">-></span> student<span class="token punctuation">.</span><span class="token function">getSpecialities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                                      <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">SpecialityEnum</span><span class="token punctuation">.</span>SING<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-数据分组"><a href="#3-3-数据分组" class="headerlink" title="3.3 数据分组"></a>3.3 数据分组</h3><p>数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使用任意值对数据分组。Collectors.groupingBy接收一个Function做转换。</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_79d304da.png" alt="image_79d304da.png"></p><p>如图，我们使用groupingBy将根据进行分组为圆形一组，三角形一组，正方形一组。</p><p>例子：根据学生第一个特长进行分组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupingByTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//省略List&lt;student> students的初始化</span>         <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpecialityEnum</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span><span class="token punctuation">></span></span> listMap <span class="token operator">=</span>              students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>             <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>student <span class="token operator">-></span> student<span class="token punctuation">.</span><span class="token function">getSpecialities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Collectors.groupingBy与SQL 中的 group by 操作是一样的。</p><h3 id="3-4-字符串拼接"><a href="#3-4-字符串拼接" class="headerlink" title="3.4 字符串拼接"></a>3.4 字符串拼接</h3><p>如果将所有学生的名字拼接起来，怎么做呢？通常只能创建一个StringBuilder，循环拼接。使用Stream，使用Collectors.joining()简单容易。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoiningTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> names <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"["</span><span class="token punctuation">,</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[路飞,红发,白胡子]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>joining接收三个参数，第一个是分界符，第二个是前缀符，第三个是结束符。也可以不传入参数Collectors.joining()，这样就是直接拼接。  </p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本篇主要从实际使用讲述了常用的方法及流，使用java8可以很清晰表达你要做什么，代码也很简洁。本篇例子主要是为了讲解较为简单，大家可以去使用java8重构自己现有的代码，自行领会lambda的奥妙。</p><p>本文说的Stream要组合使用才会发挥更大的功能，链式调用很迷人，根据自己的业务去做吧。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk1.8 </tag>
            
            <tag> lambda </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
